diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts balancer-js/dist/index.d.ts balancer-js/dist/index.d.ts
--- balancer-js/dist/index.d.ts	2022-10-28 09:53:22.000000000 +0200
+++ balancer-js/dist/index.d.ts	1970-01-01 01:00:00.000000000 +0100
@@ -1,389 +0,0 @@
-import { BigNumberish, BigNumber } from '@ethersproject/bignumber';
-import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';
-import { Contract } from '@ethersproject/contracts';
-
-declare enum StablePoolJoinKind {
-    INIT = 0,
-    EXACT_TOKENS_IN_FOR_BPT_OUT = 1,
-    TOKEN_IN_FOR_EXACT_BPT_OUT = 2
-}
-declare enum StablePoolExitKind {
-    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,
-    BPT_IN_FOR_EXACT_TOKENS_OUT = 1
-}
-declare class StablePoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    private constructor();
-    /**
-     * Encodes the userData parameter for providing the initial liquidity to a StablePool
-     * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances
-     */
-    static joinInit: (amountsIn: BigNumberish[]) => string;
-    /**
-     * Encodes the userData parameter for joining a StablePool with exact token inputs
-     * @param amountsIn - the amounts each of token to deposit in the pool as liquidity
-     * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens
-     */
-    static joinExactTokensInForBPTOut: (amountsIn: BigNumberish[], minimumBPT: BigNumberish) => string;
-    /**
-     * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT
-     * @param bptAmountOut - the amount of BPT to be minted
-     * @param enterTokenIndex - the index of the token to be provided as liquidity
-     */
-    static joinTokenInForExactBPTOut: (bptAmountOut: BigNumberish, enterTokenIndex: number) => string;
-    /**
-     * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT
-     * @param bptAmountIn - the amount of BPT to be burned
-     * @param enterTokenIndex - the index of the token to removed from the pool
-     */
-    static exitExactBPTInForOneTokenOut: (bptAmountIn: BigNumberish, exitTokenIndex: number) => string;
-    /**
-     * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens
-     * @param amountsOut - the amounts of each token to be withdrawn from the pool
-     * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens
-     */
-    static exitBPTInForExactTokensOut: (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish) => string;
-}
-
-declare enum WeightedPoolJoinKind {
-    INIT = 0,
-    EXACT_TOKENS_IN_FOR_BPT_OUT = 1,
-    TOKEN_IN_FOR_EXACT_BPT_OUT = 2,
-    ALL_TOKENS_IN_FOR_EXACT_BPT_OUT = 3,
-    ADD_TOKEN = 4
-}
-declare enum WeightedPoolExitKind {
-    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,
-    EXACT_BPT_IN_FOR_TOKENS_OUT = 1,
-    BPT_IN_FOR_EXACT_TOKENS_OUT = 2,
-    REMOVE_TOKEN = 3
-}
-declare class WeightedPoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    private constructor();
-    /**
-     * Encodes the userData parameter for providing the initial liquidity to a WeightedPool
-     * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances
-     */
-    static joinInit: (amountsIn: BigNumberish[]) => string;
-    /**
-     * Encodes the userData parameter for joining a WeightedPool with exact token inputs
-     * @param amountsIn - the amounts each of token to deposit in the pool as liquidity
-     * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens
-     */
-    static joinExactTokensInForBPTOut: (amountsIn: BigNumberish[], minimumBPT: BigNumberish) => string;
-    /**
-     * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT
-     * @param bptAmountOut - the amount of BPT to be minted
-     * @param enterTokenIndex - the index of the token to be provided as liquidity
-     */
-    static joinTokenInForExactBPTOut: (bptAmountOut: BigNumberish, enterTokenIndex: number) => string;
-    /**
-     * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT
-     * @param bptAmountOut - the amount of BPT to be minted
-     */
-    static joinAllTokensInForExactBPTOut: (bptAmountOut: BigNumberish) => string;
-    /**
-     * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT
-     * @param bptAmountIn - the amount of BPT to be burned
-     * @param enterTokenIndex - the index of the token to removed from the pool
-     */
-    static exitExactBPTInForOneTokenOut: (bptAmountIn: BigNumberish, exitTokenIndex: number) => string;
-    /**
-     * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT
-     * @param bptAmountIn - the amount of BPT to be burned
-     */
-    static exitExactBPTInForTokensOut: (bptAmountIn: BigNumberish) => string;
-    /**
-     * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens
-     * @param amountsOut - the amounts of each token to be withdrawn from the pool
-     * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens
-     */
-    static exitBPTInForExactTokensOut: (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish) => string;
-}
-declare class ManagedPoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    private constructor();
-    /**
-     * Encodes the userData parameter for exiting a ManagedPool to remove a token.
-     * This can only be done by the pool owner.
-     */
-    static exitForRemoveToken: (tokenIndex: BigNumberish) => string;
-}
-
-/**
- * Normalize an array of token weights to ensure they sum to `1e18`
- * @param weights - an array of token weights to be normalized
- * @returns an equivalent set of normalized weights
- */
-declare function toNormalizedWeights(weights: BigNumber[]): BigNumber[];
-/**
- * Check whether a set of weights are normalized
- * @param weights - an array of potentially unnormalized weights
- * @returns a boolean of whether the weights are normalized
- */
-declare const isNormalizedWeights: (weights: BigNumberish[]) => boolean;
-
-declare enum PoolSpecialization {
-    GeneralPool = 0,
-    MinimalSwapInfoPool = 1,
-    TwoTokenPool = 2
-}
-declare type FundManagement = {
-    sender: string;
-    fromInternalBalance: boolean;
-    recipient: string;
-    toInternalBalance: boolean;
-};
-declare enum SwapKind {
-    GivenIn = 0,
-    GivenOut = 1
-}
-declare type SingleSwap = {
-    poolId: string;
-    kind: SwapKind;
-    assetIn: string;
-    assetOut: string;
-    amount: BigNumberish;
-    userData: string;
-};
-declare type Swap = {
-    kind: SwapKind;
-    singleSwap: SingleSwap;
-    limit: BigNumberish;
-    deadline: BigNumberish;
-};
-declare type BatchSwapStep = {
-    poolId: string;
-    assetInIndex: number;
-    assetOutIndex: number;
-    amount: BigNumberish;
-    userData: string;
-};
-declare type BatchSwap = {
-    kind: SwapKind;
-    swaps: BatchSwapStep[];
-    assets: string[];
-    funds: FundManagement;
-    limits: BigNumberish[];
-    deadline: BigNumberish;
-};
-declare type SwapRequest = {
-    kind: SwapKind;
-    tokenIn: string;
-    tokenOut: string;
-    amount: BigNumberish;
-    poolId: string;
-    lastChangeBlock: BigNumberish;
-    from: string;
-    to: string;
-    userData: string;
-};
-declare type JoinPoolRequest = {
-    assets: string[];
-    maxAmountsIn: BigNumberish[];
-    userData: string;
-    fromInternalBalance: boolean;
-};
-declare type ExitPoolRequest = {
-    assets: string[];
-    minAmountsOut: BigNumberish[];
-    userData: string;
-    toInternalBalance: boolean;
-};
-declare enum UserBalanceOpKind {
-    DepositInternal = 0,
-    WithdrawInternal = 1,
-    TransferInternal = 2,
-    TransferExternal = 3
-}
-declare type UserBalanceOp = {
-    kind: UserBalanceOpKind;
-    asset: string;
-    amount: BigNumberish;
-    sender: string;
-    recipient: string;
-};
-declare enum PoolBalanceOpKind {
-    Withdraw = 0,
-    Deposit = 1,
-    Update = 2
-}
-declare type PoolBalanceOp = {
-    kind: PoolBalanceOpKind;
-    poolId: string;
-    token: string;
-    amount: BigNumberish;
-};
-
-/**
- * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce
- * @param poolId - a bytes32 string of the pool's ID
- * @returns an object with the decomposed poolId
- */
-declare const splitPoolId: (poolId: string) => {
-    address: string;
-    specialization: PoolSpecialization;
-    nonce: BigNumber;
-};
-/**
- * Extracts a pool's address from its poolId
- * @param poolId - a bytes32 string of the pool's ID
- * @returns the pool's address
- */
-declare const getPoolAddress: (poolId: string) => string;
-/**
- * Extracts a pool's specialization from its poolId
- * @param poolId - a bytes32 string of the pool's ID
- * @returns the pool's specialization
- */
-declare const getPoolSpecialization: (poolId: string) => PoolSpecialization;
-/**
- * Extracts a pool's nonce from its poolId
- * @param poolId - a bytes32 string of the pool's ID
- * @returns the pool's nonce
- */
-declare const getPoolNonce: (poolId: string) => BigNumber;
-
-declare enum BasePoolExitKind {
-    RECOVERY_MODE = 255
-}
-declare class BasePoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    private constructor();
-    /**
-     * Encodes the userData parameter for exiting any Pool in recovery mode, by removing tokens in return for
-     * an exact amount of BPT
-     * @param bptAmountIn - the amount of BPT to be burned
-     */
-    static recoveryModeExit: (bptAmountIn: BigNumberish) => string;
-}
-
-declare class BalancerErrors {
-    /**
-     * Cannot be constructed.
-     */
-    private constructor();
-    static isErrorCode: (error: string) => boolean;
-    /**
-     * Decodes a Balancer error code into the corresponding reason
-     * @param error - a Balancer error code of the form `BAL#000`
-     * @returns The decoded error reason
-     */
-    static parseErrorCode: (error: string) => string;
-    /**
-     * Decodes a Balancer error code into the corresponding reason
-     * @param error - a Balancer error code of the form `BAL#000`
-     * @returns The decoded error reason if passed a valid error code, otherwise returns passed input
-     */
-    static tryParseErrorCode: (error: string) => string;
-    /**
-     * Tests whether a string is a known Balancer error message
-     * @param error - a string to be checked verified as a Balancer error message
-     */
-    static isBalancerError: (error: string) => boolean;
-    /**
-     * Encodes an error string into the corresponding error code
-     * @param error - a Balancer error message string
-     * @returns a Balancer error code of the form `BAL#000`
-     */
-    static encodeError: (error: string) => string;
-}
-
-declare type Account = string | Signer | Contract;
-declare function accountToAddress(account: Account): Promise<string>;
-declare enum RelayerAction {
-    JoinPool = "JoinPool",
-    ExitPool = "ExitPool",
-    Swap = "Swap",
-    BatchSwap = "BatchSwap",
-    SetRelayerApproval = "SetRelayerApproval"
-}
-declare class RelayerAuthorization {
-    /**
-     * Cannot be constructed.
-     */
-    private constructor();
-    static encodeCalldataAuthorization: (calldata: string, deadline: BigNumberish, signature: string) => string;
-    static signJoinAuthorization: (validator: Contract, user: Signer & TypedDataSigner, allowedSender: Account, allowedCalldata: string, deadline?: BigNumberish | undefined, nonce?: BigNumberish | undefined) => Promise<string>;
-    static signExitAuthorization: (validator: Contract, user: Signer & TypedDataSigner, allowedSender: Account, allowedCalldata: string, deadline?: BigNumberish | undefined, nonce?: BigNumberish | undefined) => Promise<string>;
-    static signSwapAuthorization: (validator: Contract, user: Signer & TypedDataSigner, allowedSender: Account, allowedCalldata: string, deadline?: BigNumberish | undefined, nonce?: BigNumberish | undefined) => Promise<string>;
-    static signBatchSwapAuthorization: (validator: Contract, user: Signer & TypedDataSigner, allowedSender: Account, allowedCalldata: string, deadline?: BigNumberish | undefined, nonce?: BigNumberish | undefined) => Promise<string>;
-    static signSetRelayerApprovalAuthorization: (validator: Contract, user: Signer & TypedDataSigner, allowedSender: Account, allowedCalldata: string, deadline?: BigNumberish | undefined, nonce?: BigNumberish | undefined) => Promise<string>;
-    static signAuthorizationFor: (type: RelayerAction, validator: Contract, user: Signer & TypedDataSigner, allowedSender: Account, allowedCalldata: string, deadline?: BigNumberish, nonce?: BigNumberish | undefined) => Promise<string>;
-}
-declare class BalancerMinterAuthorization {
-    /**
-     * Cannot be constructed.
-     */
-    private constructor();
-    static signSetMinterApproval: (minterContract: Contract, minter: Account, approval: boolean, user: Signer & TypedDataSigner, deadline?: BigNumberish, nonce?: BigNumberish | undefined) => Promise<{
-        v: number;
-        r: string;
-        s: string;
-        deadline: BigNumber;
-    }>;
-}
-
-declare const signPermit: (token: Contract, owner: Signer & TypedDataSigner, spender: Account, amount: BigNumberish, deadline?: BigNumberish, nonce?: BigNumberish | undefined) => Promise<{
-    v: number;
-    r: string;
-    s: string;
-    deadline: BigNumber;
-    nonce: BigNumber;
-}>;
-
-declare class AssetHelpers {
-    readonly ETH: string;
-    readonly WETH: string;
-    constructor(wethAddress: string);
-    static isEqual: (addressA: string, addressB: string) => boolean;
-    /**
-     * Tests whether `token` is ETH (represented by `0x0000...0000`).
-     *
-     * @param token - the address of the asset to be checked
-     */
-    isETH: (token: string) => boolean;
-    /**
-     * Tests whether `token` is WETH.
-     *
-     * @param token - the address of the asset to be checked
-     */
-    isWETH: (token: string) => boolean;
-    /**
-     * Converts an asset to the equivalent ERC20 address.
-     *
-     * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address
-     * @param token - the address of the asset to be translated to an equivalent ERC20
-     * @returns the address of translated ERC20 asset
-     */
-    translateToERC20: (token: string) => string;
-    /**
-     * Sorts an array of token addresses into ascending order to match the format expected by the Vault.
-     *
-     * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.
-     *
-     * The zero address (representing ETH) is sorted as if it were the WETH address.
-     * This matches the behaviour expected by the Vault when receiving an array of addresses.
-     *
-     * @param tokens - an array of token addresses to be sorted in ascending order
-     * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses
-     * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`
-     *
-     * @example
-     * const [tokens] = sortTokens([tokenB, tokenC, tokenA])
-     * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])
-     * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]
-     */
-    sortTokens(tokens: string[], ...others: unknown[][]): [string[], ...unknown[][]];
-}
-
-export { Account, AssetHelpers, BalancerErrors, BalancerMinterAuthorization, BasePoolEncoder, BasePoolExitKind, BatchSwap, BatchSwapStep, ExitPoolRequest, FundManagement, JoinPoolRequest, ManagedPoolEncoder, PoolBalanceOp, PoolBalanceOpKind, PoolSpecialization, RelayerAction, RelayerAuthorization, SingleSwap, StablePoolEncoder, StablePoolExitKind, StablePoolJoinKind, Swap, SwapKind, SwapRequest, UserBalanceOp, UserBalanceOpKind, WeightedPoolEncoder, WeightedPoolExitKind, WeightedPoolJoinKind, accountToAddress, getPoolAddress, getPoolNonce, getPoolSpecialization, isNormalizedWeights, signPermit, splitPoolId, toNormalizedWeights };
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts balancer-js/dist/index.esm.js balancer-js/dist/index.esm.js
--- balancer-js/dist/index.esm.js	2022-10-28 09:53:21.000000000 +0200
+++ balancer-js/dist/index.esm.js	1970-01-01 01:00:00.000000000 +0100
@@ -1,708 +0,0 @@
-import { defaultAbiCoder } from '@ethersproject/abi';
-import { WeiPerEther, Zero, MaxUint256, AddressZero } from '@ethersproject/constants';
-import { BigNumber } from '@ethersproject/bignumber';
-import { hexZeroPad, hexValue, splitSignature } from '@ethersproject/bytes';
-import { Signer } from '@ethersproject/abstract-signer';
-import { getAddress } from '@ethersproject/address';
-
-var StablePoolJoinKind;
-(function (StablePoolJoinKind) {
-    StablePoolJoinKind[StablePoolJoinKind["INIT"] = 0] = "INIT";
-    StablePoolJoinKind[StablePoolJoinKind["EXACT_TOKENS_IN_FOR_BPT_OUT"] = 1] = "EXACT_TOKENS_IN_FOR_BPT_OUT";
-    StablePoolJoinKind[StablePoolJoinKind["TOKEN_IN_FOR_EXACT_BPT_OUT"] = 2] = "TOKEN_IN_FOR_EXACT_BPT_OUT";
-})(StablePoolJoinKind || (StablePoolJoinKind = {}));
-var StablePoolExitKind;
-(function (StablePoolExitKind) {
-    StablePoolExitKind[StablePoolExitKind["EXACT_BPT_IN_FOR_ONE_TOKEN_OUT"] = 0] = "EXACT_BPT_IN_FOR_ONE_TOKEN_OUT";
-    StablePoolExitKind[StablePoolExitKind["BPT_IN_FOR_EXACT_TOKENS_OUT"] = 1] = "BPT_IN_FOR_EXACT_TOKENS_OUT";
-})(StablePoolExitKind || (StablePoolExitKind = {}));
-class StablePoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-/**
- * Encodes the userData parameter for providing the initial liquidity to a StablePool
- * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances
- */
-StablePoolEncoder.joinInit = (amountsIn) => defaultAbiCoder.encode(['uint256', 'uint256[]'], [StablePoolJoinKind.INIT, amountsIn]);
-/**
- * Encodes the userData parameter for joining a StablePool with exact token inputs
- * @param amountsIn - the amounts each of token to deposit in the pool as liquidity
- * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens
- */
-StablePoolEncoder.joinExactTokensInForBPTOut = (amountsIn, minimumBPT) => defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]);
-/**
- * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT
- * @param bptAmountOut - the amount of BPT to be minted
- * @param enterTokenIndex - the index of the token to be provided as liquidity
- */
-StablePoolEncoder.joinTokenInForExactBPTOut = (bptAmountOut, enterTokenIndex) => defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]);
-/**
- * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT
- * @param bptAmountIn - the amount of BPT to be burned
- * @param enterTokenIndex - the index of the token to removed from the pool
- */
-StablePoolEncoder.exitExactBPTInForOneTokenOut = (bptAmountIn, exitTokenIndex) => defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]);
-/**
- * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens
- * @param amountsOut - the amounts of each token to be withdrawn from the pool
- * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens
- */
-StablePoolEncoder.exitBPTInForExactTokensOut = (amountsOut, maxBPTAmountIn) => defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]);
-
-var WeightedPoolJoinKind;
-(function (WeightedPoolJoinKind) {
-    WeightedPoolJoinKind[WeightedPoolJoinKind["INIT"] = 0] = "INIT";
-    WeightedPoolJoinKind[WeightedPoolJoinKind["EXACT_TOKENS_IN_FOR_BPT_OUT"] = 1] = "EXACT_TOKENS_IN_FOR_BPT_OUT";
-    WeightedPoolJoinKind[WeightedPoolJoinKind["TOKEN_IN_FOR_EXACT_BPT_OUT"] = 2] = "TOKEN_IN_FOR_EXACT_BPT_OUT";
-    WeightedPoolJoinKind[WeightedPoolJoinKind["ALL_TOKENS_IN_FOR_EXACT_BPT_OUT"] = 3] = "ALL_TOKENS_IN_FOR_EXACT_BPT_OUT";
-    WeightedPoolJoinKind[WeightedPoolJoinKind["ADD_TOKEN"] = 4] = "ADD_TOKEN";
-})(WeightedPoolJoinKind || (WeightedPoolJoinKind = {}));
-var WeightedPoolExitKind;
-(function (WeightedPoolExitKind) {
-    WeightedPoolExitKind[WeightedPoolExitKind["EXACT_BPT_IN_FOR_ONE_TOKEN_OUT"] = 0] = "EXACT_BPT_IN_FOR_ONE_TOKEN_OUT";
-    WeightedPoolExitKind[WeightedPoolExitKind["EXACT_BPT_IN_FOR_TOKENS_OUT"] = 1] = "EXACT_BPT_IN_FOR_TOKENS_OUT";
-    WeightedPoolExitKind[WeightedPoolExitKind["BPT_IN_FOR_EXACT_TOKENS_OUT"] = 2] = "BPT_IN_FOR_EXACT_TOKENS_OUT";
-    WeightedPoolExitKind[WeightedPoolExitKind["REMOVE_TOKEN"] = 3] = "REMOVE_TOKEN";
-})(WeightedPoolExitKind || (WeightedPoolExitKind = {}));
-class WeightedPoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-/**
- * Encodes the userData parameter for providing the initial liquidity to a WeightedPool
- * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances
- */
-WeightedPoolEncoder.joinInit = (amountsIn) => defaultAbiCoder.encode(['uint256', 'uint256[]'], [WeightedPoolJoinKind.INIT, amountsIn]);
-/**
- * Encodes the userData parameter for joining a WeightedPool with exact token inputs
- * @param amountsIn - the amounts each of token to deposit in the pool as liquidity
- * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens
- */
-WeightedPoolEncoder.joinExactTokensInForBPTOut = (amountsIn, minimumBPT) => defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]);
-/**
- * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT
- * @param bptAmountOut - the amount of BPT to be minted
- * @param enterTokenIndex - the index of the token to be provided as liquidity
- */
-WeightedPoolEncoder.joinTokenInForExactBPTOut = (bptAmountOut, enterTokenIndex) => defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]);
-/**
- * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT
- * @param bptAmountOut - the amount of BPT to be minted
- */
-WeightedPoolEncoder.joinAllTokensInForExactBPTOut = (bptAmountOut) => defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]);
-/**
- * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT
- * @param bptAmountIn - the amount of BPT to be burned
- * @param enterTokenIndex - the index of the token to removed from the pool
- */
-WeightedPoolEncoder.exitExactBPTInForOneTokenOut = (bptAmountIn, exitTokenIndex) => defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]);
-/**
- * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT
- * @param bptAmountIn - the amount of BPT to be burned
- */
-WeightedPoolEncoder.exitExactBPTInForTokensOut = (bptAmountIn) => defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]);
-/**
- * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens
- * @param amountsOut - the amounts of each token to be withdrawn from the pool
- * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens
- */
-WeightedPoolEncoder.exitBPTInForExactTokensOut = (amountsOut, maxBPTAmountIn) => defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]);
-class ManagedPoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-/**
- * Encodes the userData parameter for exiting a ManagedPool to remove a token.
- * This can only be done by the pool owner.
- */
-ManagedPoolEncoder.exitForRemoveToken = (tokenIndex) => defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolExitKind.REMOVE_TOKEN, tokenIndex]);
-
-// Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants
-// Including would introduce a dependency
-const MaxWeightedTokens = 100;
-/**
- * Normalize an array of token weights to ensure they sum to `1e18`
- * @param weights - an array of token weights to be normalized
- * @returns an equivalent set of normalized weights
- */
-function toNormalizedWeights(weights) {
-    // When the number is exactly equal to the max, normalizing with common inputs
-    // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.
-    if (weights.length == MaxWeightedTokens) {
-        return Array(MaxWeightedTokens).fill(WeiPerEther.div(MaxWeightedTokens));
-    }
-    const sum = weights.reduce((total, weight) => total.add(weight), Zero);
-    if (sum.eq(WeiPerEther))
-        return weights;
-    const normalizedWeights = [];
-    let normalizedSum = Zero;
-    for (let index = 0; index < weights.length; index++) {
-        if (index < weights.length - 1) {
-            normalizedWeights[index] = weights[index].mul(WeiPerEther).div(sum);
-            normalizedSum = normalizedSum.add(normalizedWeights[index]);
-        }
-        else {
-            normalizedWeights[index] = WeiPerEther.sub(normalizedSum);
-        }
-    }
-    return normalizedWeights;
-}
-/**
- * Check whether a set of weights are normalized
- * @param weights - an array of potentially unnormalized weights
- * @returns a boolean of whether the weights are normalized
- */
-const isNormalizedWeights = (weights) => {
-    const totalWeight = weights.reduce((total, weight) => total.add(weight), Zero);
-    return totalWeight.eq(WeiPerEther);
-};
-
-var isProduction = process.env.NODE_ENV === 'production';
-var prefix = 'Invariant failed';
-function invariant(condition, message) {
-    if (condition) {
-        return;
-    }
-    if (isProduction) {
-        throw new Error(prefix);
-    }
-    throw new Error(prefix + ": " + (message || ''));
-}
-
-/**
- * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce
- * @param poolId - a bytes32 string of the pool's ID
- * @returns an object with the decomposed poolId
- */
-const splitPoolId = (poolId) => {
-    return {
-        address: getPoolAddress(poolId),
-        specialization: getPoolSpecialization(poolId),
-        nonce: getPoolNonce(poolId),
-    };
-};
-/**
- * Extracts a pool's address from its poolId
- * @param poolId - a bytes32 string of the pool's ID
- * @returns the pool's address
- */
-const getPoolAddress = (poolId) => {
-    invariant(poolId.length === 66, 'Invalid poolId length');
-    return poolId.slice(0, 42);
-};
-/**
- * Extracts a pool's specialization from its poolId
- * @param poolId - a bytes32 string of the pool's ID
- * @returns the pool's specialization
- */
-const getPoolSpecialization = (poolId) => {
-    invariant(poolId.length === 66, 'Invalid poolId length');
-    // Only have 3 pool specializations so we can just pull the relevant character
-    const specializationCode = parseInt(poolId[45]);
-    invariant(specializationCode < 3, 'Invalid pool specialization');
-    return specializationCode;
-};
-/**
- * Extracts a pool's nonce from its poolId
- * @param poolId - a bytes32 string of the pool's ID
- * @returns the pool's nonce
- */
-const getPoolNonce = (poolId) => {
-    invariant(poolId.length === 66, 'Invalid poolId length');
-    return BigNumber.from(`0x${poolId.slice(46)}`);
-};
-
-// RECOVERY_MODE must match BasePoolUserData.RECOVERY_MODE_EXIT_KIND, the value that
-// (Legacy)BasePool uses to detect the special exit enabled in recovery mode.
-var BasePoolExitKind;
-(function (BasePoolExitKind) {
-    BasePoolExitKind[BasePoolExitKind["RECOVERY_MODE"] = 255] = "RECOVERY_MODE";
-})(BasePoolExitKind || (BasePoolExitKind = {}));
-class BasePoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-/**
- * Encodes the userData parameter for exiting any Pool in recovery mode, by removing tokens in return for
- * an exact amount of BPT
- * @param bptAmountIn - the amount of BPT to be burned
- */
-BasePoolEncoder.recoveryModeExit = (bptAmountIn) => defaultAbiCoder.encode(['uint256', 'uint256'], [BasePoolExitKind.RECOVERY_MODE, bptAmountIn]);
-
-const balancerErrorCodes = {
-    '000': 'ADD_OVERFLOW',
-    '001': 'SUB_OVERFLOW',
-    '002': 'SUB_UNDERFLOW',
-    '003': 'MUL_OVERFLOW',
-    '004': 'ZERO_DIVISION',
-    '005': 'DIV_INTERNAL',
-    '006': 'X_OUT_OF_BOUNDS',
-    '007': 'Y_OUT_OF_BOUNDS',
-    '008': 'PRODUCT_OUT_OF_BOUNDS',
-    '009': 'INVALID_EXPONENT',
-    '100': 'OUT_OF_BOUNDS',
-    '101': 'UNSORTED_ARRAY',
-    '102': 'UNSORTED_TOKENS',
-    '103': 'INPUT_LENGTH_MISMATCH',
-    '104': 'ZERO_TOKEN',
-    '200': 'MIN_TOKENS',
-    '201': 'MAX_TOKENS',
-    '202': 'MAX_SWAP_FEE_PERCENTAGE',
-    '203': 'MIN_SWAP_FEE_PERCENTAGE',
-    '204': 'MINIMUM_BPT',
-    '205': 'CALLER_NOT_VAULT',
-    '206': 'UNINITIALIZED',
-    '207': 'BPT_IN_MAX_AMOUNT',
-    '208': 'BPT_OUT_MIN_AMOUNT',
-    '209': 'EXPIRED_PERMIT',
-    '210': 'NOT_TWO_TOKENS',
-    '211': 'DISABLED',
-    '300': 'MIN_AMP',
-    '301': 'MAX_AMP',
-    '302': 'MIN_WEIGHT',
-    '303': 'MAX_STABLE_TOKENS',
-    '304': 'MAX_IN_RATIO',
-    '305': 'MAX_OUT_RATIO',
-    '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',
-    '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',
-    '308': 'NORMALIZED_WEIGHT_INVARIANT',
-    '309': 'INVALID_TOKEN',
-    '310': 'UNHANDLED_JOIN_KIND',
-    '311': 'ZERO_INVARIANT',
-    '312': 'ORACLE_INVALID_SECONDS_QUERY',
-    '313': 'ORACLE_NOT_INITIALIZED',
-    '314': 'ORACLE_QUERY_TOO_OLD',
-    '315': 'ORACLE_INVALID_INDEX',
-    '316': 'ORACLE_BAD_SECS',
-    '317': 'AMP_END_TIME_TOO_CLOSE',
-    '318': 'AMP_ONGOING_UPDATE',
-    '319': 'AMP_RATE_TOO_HIGH',
-    '320': 'AMP_NO_ONGOING_UPDATE',
-    '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',
-    '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',
-    '323': 'RELAYER_NOT_CONTRACT',
-    '324': 'BASE_POOL_RELAYER_NOT_CALLED',
-    '325': 'REBALANCING_RELAYER_REENTERED',
-    '326': 'GRADUAL_UPDATE_TIME_TRAVEL',
-    '327': 'SWAPS_DISABLED',
-    '328': 'CALLER_IS_NOT_LBP_OWNER',
-    '329': 'PRICE_RATE_OVERFLOW',
-    '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',
-    '331': 'WEIGHT_CHANGE_TOO_FAST',
-    '332': 'LOWER_GREATER_THAN_UPPER_TARGET',
-    '333': 'UPPER_TARGET_TOO_HIGH',
-    '334': 'UNHANDLED_BY_LINEAR_POOL',
-    '335': 'OUT_OF_TARGET_RANGE',
-    '336': 'UNHANDLED_EXIT_KIND',
-    '337': 'UNAUTHORIZED_EXIT',
-    '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',
-    '339': 'UNHANDLED_BY_MANAGED_POOL',
-    '340': 'UNHANDLED_BY_PHANTOM_POOL',
-    '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',
-    '342': 'INVALID_INITIALIZATION',
-    '343': 'OUT_OF_NEW_TARGET_RANGE',
-    '344': 'FEATURE_DISABLED',
-    '345': 'UNINITIALIZED_POOL_CONTROLLER',
-    '346': 'SET_SWAP_FEE_DURING_FEE_CHANGE',
-    '347': 'SET_SWAP_FEE_PENDING_FEE_CHANGE',
-    '348': 'CHANGE_TOKENS_DURING_WEIGHT_CHANGE',
-    '349': 'CHANGE_TOKENS_PENDING_WEIGHT_CHANGE',
-    '350': 'MAX_WEIGHT',
-    '351': 'UNAUTHORIZED_JOIN',
-    '352': 'MAX_MANAGEMENT_AUM_FEE_PERCENTAGE',
-    '353': 'FRACTIONAL_TARGET',
-    '354': 'ADD_OR_REMOVE_BPT',
-    '355': 'INVALID_CIRCUIT_BREAKER_BOUNDS',
-    '356': 'CIRCUIT_BREAKER_TRIPPED',
-    '400': 'REENTRANCY',
-    '401': 'SENDER_NOT_ALLOWED',
-    '402': 'PAUSED',
-    '403': 'PAUSE_WINDOW_EXPIRED',
-    '404': 'MAX_PAUSE_WINDOW_DURATION',
-    '405': 'MAX_BUFFER_PERIOD_DURATION',
-    '406': 'INSUFFICIENT_BALANCE',
-    '407': 'INSUFFICIENT_ALLOWANCE',
-    '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',
-    '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',
-    '410': 'ERC20_MINT_TO_ZERO_ADDRESS',
-    '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',
-    '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',
-    '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',
-    '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',
-    '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',
-    '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',
-    '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',
-    '418': 'SAFE_ERC20_CALL_FAILED',
-    '419': 'ADDRESS_INSUFFICIENT_BALANCE',
-    '420': 'ADDRESS_CANNOT_SEND_VALUE',
-    '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',
-    '422': 'GRANT_SENDER_NOT_ADMIN',
-    '423': 'REVOKE_SENDER_NOT_ADMIN',
-    '424': 'RENOUNCE_SENDER_NOT_ALLOWED',
-    '425': 'BUFFER_PERIOD_EXPIRED',
-    '426': 'CALLER_IS_NOT_OWNER',
-    '427': 'NEW_OWNER_IS_ZERO',
-    '428': 'CODE_DEPLOYMENT_FAILED',
-    '429': 'CALL_TO_NON_CONTRACT',
-    '430': 'LOW_LEVEL_CALL_FAILED',
-    '431': 'NOT_PAUSED',
-    '432': 'ADDRESS_ALREADY_ALLOWLISTED',
-    '433': 'ADDRESS_NOT_ALLOWLISTED',
-    '434': 'ERC20_BURN_EXCEEDS_BALANCE',
-    '435': 'INVALID_OPERATION',
-    '436': 'CODEC_OVERFLOW',
-    '437': 'IN_RECOVERY_MODE',
-    '438': 'NOT_IN_RECOVERY_MODE',
-    '439': 'INDUCED_FAILURE',
-    '440': 'EXPIRED_SIGNATURE',
-    '441': 'MALFORMED_SIGNATURE',
-    '442': 'SAFE_CAST_VALUE_CANT_FIT_UINT64',
-    '443': 'UNHANDLED_FEE_TYPE',
-    '444': 'BURN_FROM_ZERO',
-    '500': 'INVALID_POOL_ID',
-    '501': 'CALLER_NOT_POOL',
-    '502': 'SENDER_NOT_ASSET_MANAGER',
-    '503': 'USER_DOESNT_ALLOW_RELAYER',
-    '504': 'INVALID_SIGNATURE',
-    '505': 'EXIT_BELOW_MIN',
-    '506': 'JOIN_ABOVE_MAX',
-    '507': 'SWAP_LIMIT',
-    '508': 'SWAP_DEADLINE',
-    '509': 'CANNOT_SWAP_SAME_TOKEN',
-    '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',
-    '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',
-    '512': 'INTERNAL_BALANCE_OVERFLOW',
-    '513': 'INSUFFICIENT_INTERNAL_BALANCE',
-    '514': 'INVALID_ETH_INTERNAL_BALANCE',
-    '515': 'INVALID_POST_LOAN_BALANCE',
-    '516': 'INSUFFICIENT_ETH',
-    '517': 'UNALLOCATED_ETH',
-    '518': 'ETH_TRANSFER',
-    '519': 'CANNOT_USE_ETH_SENTINEL',
-    '520': 'TOKENS_MISMATCH',
-    '521': 'TOKEN_NOT_REGISTERED',
-    '522': 'TOKEN_ALREADY_REGISTERED',
-    '523': 'TOKENS_ALREADY_SET',
-    '524': 'TOKENS_LENGTH_MUST_BE_2',
-    '525': 'NONZERO_TOKEN_BALANCE',
-    '526': 'BALANCE_TOTAL_OVERFLOW',
-    '527': 'POOL_NO_TOKENS',
-    '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',
-    '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',
-    '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',
-    '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',
-    '603': 'AUM_FEE_PERCENTAGE_TOO_HIGH',
-    '700': 'SPLITTER_FEE_PERCENTAGE_TOO_HIGH',
-    '998': 'UNIMPLEMENTED',
-    '999': 'SHOULD_NOT_HAPPEN',
-};
-class BalancerErrors {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-BalancerErrors.isErrorCode = (error) => {
-    if (!error.includes('BAL#'))
-        return false;
-    const errorCode = error.replace('BAL#', '');
-    return Object.keys(balancerErrorCodes).includes(errorCode);
-};
-/**
- * Decodes a Balancer error code into the corresponding reason
- * @param error - a Balancer error code of the form `BAL#000`
- * @returns The decoded error reason
- */
-BalancerErrors.parseErrorCode = (error) => {
-    if (!error.includes('BAL#'))
-        throw new Error('Error code not found');
-    const errorCode = error.replace('BAL#', '');
-    const actualError = balancerErrorCodes[errorCode];
-    if (!actualError)
-        throw new Error('Error code not found');
-    return actualError;
-};
-/**
- * Decodes a Balancer error code into the corresponding reason
- * @param error - a Balancer error code of the form `BAL#000`
- * @returns The decoded error reason if passed a valid error code, otherwise returns passed input
- */
-BalancerErrors.tryParseErrorCode = (error) => {
-    try {
-        return BalancerErrors.parseErrorCode(error);
-    }
-    catch {
-        return error;
-    }
-};
-/**
- * Tests whether a string is a known Balancer error message
- * @param error - a string to be checked verified as a Balancer error message
- */
-BalancerErrors.isBalancerError = (error) => Object.values(balancerErrorCodes).includes(error);
-/**
- * Encodes an error string into the corresponding error code
- * @param error - a Balancer error message string
- * @returns a Balancer error code of the form `BAL#000`
- */
-BalancerErrors.encodeError = (error) => {
-    const encodedError = Object.entries(balancerErrorCodes).find(([, message]) => message === error);
-    if (!encodedError)
-        throw Error('Error message not found');
-    return `BAL#${encodedError[0]}`;
-};
-
-async function accountToAddress(account) {
-    if (typeof account == 'string')
-        return account;
-    if (Signer.isSigner(account))
-        return account.getAddress();
-    if (account.address)
-        return account.address;
-    throw new Error('Could not read account address');
-}
-var RelayerAction;
-(function (RelayerAction) {
-    RelayerAction["JoinPool"] = "JoinPool";
-    RelayerAction["ExitPool"] = "ExitPool";
-    RelayerAction["Swap"] = "Swap";
-    RelayerAction["BatchSwap"] = "BatchSwap";
-    RelayerAction["SetRelayerApproval"] = "SetRelayerApproval";
-})(RelayerAction || (RelayerAction = {}));
-class RelayerAuthorization {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-RelayerAuthorization.encodeCalldataAuthorization = (calldata, deadline, signature) => {
-    const encodedDeadline = hexZeroPad(hexValue(deadline), 32).slice(2);
-    const { v, r, s } = splitSignature(signature);
-    const encodedV = hexZeroPad(hexValue(v), 32).slice(2);
-    const encodedR = r.slice(2);
-    const encodedS = s.slice(2);
-    return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;
-};
-RelayerAuthorization.signJoinAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(RelayerAction.JoinPool, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-RelayerAuthorization.signExitAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(RelayerAction.ExitPool, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-RelayerAuthorization.signSwapAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(RelayerAction.Swap, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-RelayerAuthorization.signBatchSwapAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(RelayerAction.BatchSwap, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-RelayerAuthorization.signSetRelayerApprovalAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(RelayerAction.SetRelayerApproval, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-RelayerAuthorization.signAuthorizationFor = async (type, validator, user, allowedSender, allowedCalldata, deadline = MaxUint256, nonce) => {
-    const { chainId } = await validator.provider.getNetwork();
-    if (!nonce) {
-        const userAddress = await user.getAddress();
-        nonce = (await validator.getNextNonce(userAddress));
-    }
-    const domain = {
-        name: 'Balancer V2 Vault',
-        version: '1',
-        chainId,
-        verifyingContract: validator.address,
-    };
-    const types = {
-        [type]: [
-            { name: 'calldata', type: 'bytes' },
-            { name: 'sender', type: 'address' },
-            { name: 'nonce', type: 'uint256' },
-            { name: 'deadline', type: 'uint256' },
-        ],
-    };
-    const value = {
-        calldata: allowedCalldata,
-        sender: await accountToAddress(allowedSender),
-        nonce: nonce.toString(),
-        deadline: deadline.toString(),
-    };
-    return user._signTypedData(domain, types, value);
-};
-class BalancerMinterAuthorization {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-BalancerMinterAuthorization.signSetMinterApproval = async (minterContract, minter, approval, user, deadline = MaxUint256, nonce) => {
-    const { chainId } = await minterContract.provider.getNetwork();
-    if (!nonce) {
-        const userAddress = await user.getAddress();
-        nonce = (await minterContract.getNextNonce(userAddress));
-    }
-    const domain = {
-        name: 'Balancer Minter',
-        version: '1',
-        chainId,
-        verifyingContract: minterContract.address,
-    };
-    const types = {
-        SetMinterApproval: [
-            { name: 'minter', type: 'address' },
-            { name: 'approval', type: 'bool' },
-            { name: 'nonce', type: 'uint256' },
-            { name: 'deadline', type: 'uint256' },
-        ],
-    };
-    const value = {
-        minter: await accountToAddress(minter),
-        approval,
-        nonce: nonce.toString(),
-        deadline: deadline.toString(),
-    };
-    const signature = await user._signTypedData(domain, types, value);
-    return { ...splitSignature(signature), deadline: BigNumber.from(deadline) };
-};
-
-const signPermit = async (token, owner, spender, amount, deadline = MaxUint256, nonce) => {
-    const { chainId } = await token.provider.getNetwork();
-    const ownerAddress = await owner.getAddress();
-    if (!nonce)
-        nonce = (await token.nonces(ownerAddress));
-    // Hack around some tokens not exposing a `version()` function.
-    // If they do then use it, otherwise assume that their version is "1".
-    let version = '1';
-    try {
-        if (token.version) {
-            version = await token.version();
-        }
-    }
-    catch {
-        // eslint-disable-prev-line no-empty
-    }
-    const domain = {
-        name: await token.name(),
-        version,
-        chainId,
-        verifyingContract: token.address,
-    };
-    const types = {
-        Permit: [
-            { name: 'owner', type: 'address' },
-            { name: 'spender', type: 'address' },
-            { name: 'value', type: 'uint256' },
-            { name: 'nonce', type: 'uint256' },
-            { name: 'deadline', type: 'uint256' },
-        ],
-    };
-    const value = {
-        owner: ownerAddress,
-        spender: await accountToAddress(spender),
-        value: amount,
-        nonce,
-        deadline,
-    };
-    const signature = await owner._signTypedData(domain, types, value);
-    return { ...splitSignature(signature), deadline: BigNumber.from(deadline), nonce: BigNumber.from(nonce) };
-};
-
-const cmpTokens = (tokenA, tokenB) => (tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1);
-const transposeMatrix = (matrix) => matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));
-class AssetHelpers {
-    constructor(wethAddress) {
-        this.ETH = AddressZero;
-        /**
-         * Tests whether `token` is ETH (represented by `0x0000...0000`).
-         *
-         * @param token - the address of the asset to be checked
-         */
-        this.isETH = (token) => AssetHelpers.isEqual(token, this.ETH);
-        /**
-         * Tests whether `token` is WETH.
-         *
-         * @param token - the address of the asset to be checked
-         */
-        this.isWETH = (token) => AssetHelpers.isEqual(token, this.WETH);
-        /**
-         * Converts an asset to the equivalent ERC20 address.
-         *
-         * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address
-         * @param token - the address of the asset to be translated to an equivalent ERC20
-         * @returns the address of translated ERC20 asset
-         */
-        this.translateToERC20 = (token) => (this.isETH(token) ? this.WETH : token);
-        this.WETH = getAddress(wethAddress);
-    }
-    /**
-     * Sorts an array of token addresses into ascending order to match the format expected by the Vault.
-     *
-     * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.
-     *
-     * The zero address (representing ETH) is sorted as if it were the WETH address.
-     * This matches the behaviour expected by the Vault when receiving an array of addresses.
-     *
-     * @param tokens - an array of token addresses to be sorted in ascending order
-     * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses
-     * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`
-     *
-     * @example
-     * const [tokens] = sortTokens([tokenB, tokenC, tokenA])
-     * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])
-     * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]
-     */
-    sortTokens(tokens, ...others) {
-        others.forEach((array) => invariant(tokens.length === array.length, 'array length mismatch'));
-        // We want to sort ETH as if were WETH so we translate to ERC20s
-        const erc20Tokens = tokens.map(this.translateToERC20);
-        const transpose = transposeMatrix([erc20Tokens, ...others]);
-        const sortedTranspose = transpose.sort(([tokenA], [tokenB]) => cmpTokens(tokenA, tokenB));
-        const [sortedErc20s, ...sortedOthers] = transposeMatrix(sortedTranspose);
-        // If one of the tokens was ETH, we need to translate back from WETH
-        const sortedTokens = tokens.includes(this.ETH)
-            ? sortedErc20s.map((token) => (this.isWETH(token) ? this.ETH : token))
-            : sortedErc20s;
-        return [sortedTokens, ...sortedOthers];
-    }
-}
-AssetHelpers.isEqual = (addressA, addressB) => getAddress(addressA) === getAddress(addressB);
-
-var PoolSpecialization;
-(function (PoolSpecialization) {
-    PoolSpecialization[PoolSpecialization["GeneralPool"] = 0] = "GeneralPool";
-    PoolSpecialization[PoolSpecialization["MinimalSwapInfoPool"] = 1] = "MinimalSwapInfoPool";
-    PoolSpecialization[PoolSpecialization["TwoTokenPool"] = 2] = "TwoTokenPool";
-})(PoolSpecialization || (PoolSpecialization = {}));
-// Swaps
-var SwapKind;
-(function (SwapKind) {
-    SwapKind[SwapKind["GivenIn"] = 0] = "GivenIn";
-    SwapKind[SwapKind["GivenOut"] = 1] = "GivenOut";
-})(SwapKind || (SwapKind = {}));
-// Balance Operations
-var UserBalanceOpKind;
-(function (UserBalanceOpKind) {
-    UserBalanceOpKind[UserBalanceOpKind["DepositInternal"] = 0] = "DepositInternal";
-    UserBalanceOpKind[UserBalanceOpKind["WithdrawInternal"] = 1] = "WithdrawInternal";
-    UserBalanceOpKind[UserBalanceOpKind["TransferInternal"] = 2] = "TransferInternal";
-    UserBalanceOpKind[UserBalanceOpKind["TransferExternal"] = 3] = "TransferExternal";
-})(UserBalanceOpKind || (UserBalanceOpKind = {}));
-var PoolBalanceOpKind;
-(function (PoolBalanceOpKind) {
-    PoolBalanceOpKind[PoolBalanceOpKind["Withdraw"] = 0] = "Withdraw";
-    PoolBalanceOpKind[PoolBalanceOpKind["Deposit"] = 1] = "Deposit";
-    PoolBalanceOpKind[PoolBalanceOpKind["Update"] = 2] = "Update";
-})(PoolBalanceOpKind || (PoolBalanceOpKind = {}));
-
-export { AssetHelpers, BalancerErrors, BalancerMinterAuthorization, BasePoolEncoder, BasePoolExitKind, ManagedPoolEncoder, PoolBalanceOpKind, PoolSpecialization, RelayerAction, RelayerAuthorization, StablePoolEncoder, StablePoolExitKind, StablePoolJoinKind, SwapKind, UserBalanceOpKind, WeightedPoolEncoder, WeightedPoolExitKind, WeightedPoolJoinKind, accountToAddress, getPoolAddress, getPoolNonce, getPoolSpecialization, isNormalizedWeights, signPermit, splitPoolId, toNormalizedWeights };
-//# sourceMappingURL=index.esm.js.map
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts balancer-js/dist/index.esm.js.map balancer-js/dist/index.esm.js.map
--- balancer-js/dist/index.esm.js.map	2022-10-28 09:53:21.000000000 +0200
+++ balancer-js/dist/index.esm.js.map	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-{"version":3,"file":"index.esm.js","sources":["../src/pool-stable/encoder.ts","../src/pool-weighted/encoder.ts","../src/pool-weighted/normalizedWeights.ts","../../../node_modules/tiny-invariant/dist/tiny-invariant.esm.js","../src/pool-utils/poolId.ts","../src/pool-utils/encoder.ts","../src/utils/errors.ts","../src/utils/signatures.ts","../src/utils/permit.ts","../src/utils/assetHelpers.ts","../src/types.ts"],"sourcesContent":["import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum StablePoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum StablePoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n}\n\nexport class StablePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a StablePool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256[]'], [StablePoolJoinKind.INIT, amountsIn]);\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (amountsIn: BigNumberish[], minimumBPT: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (bptAmountOut: BigNumberish, enterTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (bptAmountIn: BigNumberish, exitTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]\n    );\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum WeightedPoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n  ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n  ADD_TOKEN,\n}\n\nexport enum WeightedPoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n  REMOVE_TOKEN,\n}\n\nexport class WeightedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a WeightedPool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256[]'], [WeightedPoolJoinKind.INIT, amountsIn]);\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (amountsIn: BigNumberish[], minimumBPT: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (bptAmountOut: BigNumberish, enterTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   */\n  static joinAllTokensInForExactBPTOut = (bptAmountOut: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (bptAmountIn: BigNumberish, exitTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]);\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]\n    );\n}\n\nexport class ManagedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting a ManagedPool to remove a token.\n   * This can only be done by the pool owner.\n   */\n  static exitForRemoveToken = (tokenIndex: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolExitKind.REMOVE_TOKEN, tokenIndex]);\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther as ONE } from '@ethersproject/constants';\n\n// Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants\n// Including would introduce a dependency\nconst MaxWeightedTokens = 100;\n\n/**\n * Normalize an array of token weights to ensure they sum to `1e18`\n * @param weights - an array of token weights to be normalized\n * @returns an equivalent set of normalized weights\n */\nexport function toNormalizedWeights(weights: BigNumber[]): BigNumber[] {\n  // When the number is exactly equal to the max, normalizing with common inputs\n  // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.\n  if (weights.length == MaxWeightedTokens) {\n    return Array(MaxWeightedTokens).fill(ONE.div(MaxWeightedTokens));\n  }\n\n  const sum = weights.reduce((total, weight) => total.add(weight), Zero);\n  if (sum.eq(ONE)) return weights;\n\n  const normalizedWeights = [];\n  let normalizedSum = Zero;\n  for (let index = 0; index < weights.length; index++) {\n    if (index < weights.length - 1) {\n      normalizedWeights[index] = weights[index].mul(ONE).div(sum);\n      normalizedSum = normalizedSum.add(normalizedWeights[index]);\n    } else {\n      normalizedWeights[index] = ONE.sub(normalizedSum);\n    }\n  }\n\n  return normalizedWeights;\n}\n\n/**\n * Check whether a set of weights are normalized\n * @param weights - an array of potentially unnormalized weights\n * @returns a boolean of whether the weights are normalized\n */\nexport const isNormalizedWeights = (weights: BigNumberish[]): boolean => {\n  const totalWeight = weights.reduce((total: BigNumber, weight) => total.add(weight), Zero);\n  return totalWeight.eq(ONE);\n};\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    throw new Error(prefix + \": \" + (message || ''));\n}\n\nexport default invariant;\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { PoolSpecialization } from '../types';\nimport invariant from 'tiny-invariant';\n\n/**\n * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce\n * @param poolId - a bytes32 string of the pool's ID\n * @returns an object with the decomposed poolId\n */\nexport const splitPoolId = (\n  poolId: string\n): { address: string; specialization: PoolSpecialization; nonce: BigNumber } => {\n  return {\n    address: getPoolAddress(poolId),\n    specialization: getPoolSpecialization(poolId),\n    nonce: getPoolNonce(poolId),\n  };\n};\n\n/**\n * Extracts a pool's address from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's address\n */\nexport const getPoolAddress = (poolId: string): string => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return poolId.slice(0, 42);\n};\n\n/**\n * Extracts a pool's specialization from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's specialization\n */\nexport const getPoolSpecialization = (poolId: string): PoolSpecialization => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n\n  // Only have 3 pool specializations so we can just pull the relevant character\n  const specializationCode = parseInt(poolId[45]);\n  invariant(specializationCode < 3, 'Invalid pool specialization');\n\n  return specializationCode;\n};\n\n/**\n * Extracts a pool's nonce from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's nonce\n */\nexport const getPoolNonce = (poolId: string): BigNumber => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return BigNumber.from(`0x${poolId.slice(46)}`);\n};\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\n// RECOVERY_MODE must match BasePoolUserData.RECOVERY_MODE_EXIT_KIND, the value that\n// (Legacy)BasePool uses to detect the special exit enabled in recovery mode.\nexport enum BasePoolExitKind {\n  RECOVERY_MODE = 255,\n}\n\nexport class BasePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting any Pool in recovery mode, by removing tokens in return for\n   * an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static recoveryModeExit = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [BasePoolExitKind.RECOVERY_MODE, bptAmountIn]);\n}\n","const balancerErrorCodes: Record<string, string> = {\n  '000': 'ADD_OVERFLOW',\n  '001': 'SUB_OVERFLOW',\n  '002': 'SUB_UNDERFLOW',\n  '003': 'MUL_OVERFLOW',\n  '004': 'ZERO_DIVISION',\n  '005': 'DIV_INTERNAL',\n  '006': 'X_OUT_OF_BOUNDS',\n  '007': 'Y_OUT_OF_BOUNDS',\n  '008': 'PRODUCT_OUT_OF_BOUNDS',\n  '009': 'INVALID_EXPONENT',\n  '100': 'OUT_OF_BOUNDS',\n  '101': 'UNSORTED_ARRAY',\n  '102': 'UNSORTED_TOKENS',\n  '103': 'INPUT_LENGTH_MISMATCH',\n  '104': 'ZERO_TOKEN',\n  '200': 'MIN_TOKENS',\n  '201': 'MAX_TOKENS',\n  '202': 'MAX_SWAP_FEE_PERCENTAGE',\n  '203': 'MIN_SWAP_FEE_PERCENTAGE',\n  '204': 'MINIMUM_BPT',\n  '205': 'CALLER_NOT_VAULT',\n  '206': 'UNINITIALIZED',\n  '207': 'BPT_IN_MAX_AMOUNT',\n  '208': 'BPT_OUT_MIN_AMOUNT',\n  '209': 'EXPIRED_PERMIT',\n  '210': 'NOT_TWO_TOKENS',\n  '211': 'DISABLED',\n  '300': 'MIN_AMP',\n  '301': 'MAX_AMP',\n  '302': 'MIN_WEIGHT',\n  '303': 'MAX_STABLE_TOKENS',\n  '304': 'MAX_IN_RATIO',\n  '305': 'MAX_OUT_RATIO',\n  '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',\n  '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',\n  '308': 'NORMALIZED_WEIGHT_INVARIANT',\n  '309': 'INVALID_TOKEN',\n  '310': 'UNHANDLED_JOIN_KIND',\n  '311': 'ZERO_INVARIANT',\n  '312': 'ORACLE_INVALID_SECONDS_QUERY',\n  '313': 'ORACLE_NOT_INITIALIZED',\n  '314': 'ORACLE_QUERY_TOO_OLD',\n  '315': 'ORACLE_INVALID_INDEX',\n  '316': 'ORACLE_BAD_SECS',\n  '317': 'AMP_END_TIME_TOO_CLOSE',\n  '318': 'AMP_ONGOING_UPDATE',\n  '319': 'AMP_RATE_TOO_HIGH',\n  '320': 'AMP_NO_ONGOING_UPDATE',\n  '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',\n  '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',\n  '323': 'RELAYER_NOT_CONTRACT',\n  '324': 'BASE_POOL_RELAYER_NOT_CALLED',\n  '325': 'REBALANCING_RELAYER_REENTERED',\n  '326': 'GRADUAL_UPDATE_TIME_TRAVEL',\n  '327': 'SWAPS_DISABLED',\n  '328': 'CALLER_IS_NOT_LBP_OWNER',\n  '329': 'PRICE_RATE_OVERFLOW',\n  '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',\n  '331': 'WEIGHT_CHANGE_TOO_FAST',\n  '332': 'LOWER_GREATER_THAN_UPPER_TARGET',\n  '333': 'UPPER_TARGET_TOO_HIGH',\n  '334': 'UNHANDLED_BY_LINEAR_POOL',\n  '335': 'OUT_OF_TARGET_RANGE',\n  '336': 'UNHANDLED_EXIT_KIND',\n  '337': 'UNAUTHORIZED_EXIT',\n  '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',\n  '339': 'UNHANDLED_BY_MANAGED_POOL',\n  '340': 'UNHANDLED_BY_PHANTOM_POOL',\n  '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',\n  '342': 'INVALID_INITIALIZATION',\n  '343': 'OUT_OF_NEW_TARGET_RANGE',\n  '344': 'FEATURE_DISABLED',\n  '345': 'UNINITIALIZED_POOL_CONTROLLER',\n  '346': 'SET_SWAP_FEE_DURING_FEE_CHANGE',\n  '347': 'SET_SWAP_FEE_PENDING_FEE_CHANGE',\n  '348': 'CHANGE_TOKENS_DURING_WEIGHT_CHANGE',\n  '349': 'CHANGE_TOKENS_PENDING_WEIGHT_CHANGE',\n  '350': 'MAX_WEIGHT',\n  '351': 'UNAUTHORIZED_JOIN',\n  '352': 'MAX_MANAGEMENT_AUM_FEE_PERCENTAGE',\n  '353': 'FRACTIONAL_TARGET',\n  '354': 'ADD_OR_REMOVE_BPT',\n  '355': 'INVALID_CIRCUIT_BREAKER_BOUNDS',\n  '356': 'CIRCUIT_BREAKER_TRIPPED',\n  '400': 'REENTRANCY',\n  '401': 'SENDER_NOT_ALLOWED',\n  '402': 'PAUSED',\n  '403': 'PAUSE_WINDOW_EXPIRED',\n  '404': 'MAX_PAUSE_WINDOW_DURATION',\n  '405': 'MAX_BUFFER_PERIOD_DURATION',\n  '406': 'INSUFFICIENT_BALANCE',\n  '407': 'INSUFFICIENT_ALLOWANCE',\n  '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',\n  '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',\n  '410': 'ERC20_MINT_TO_ZERO_ADDRESS',\n  '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',\n  '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',\n  '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',\n  '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',\n  '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',\n  '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',\n  '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',\n  '418': 'SAFE_ERC20_CALL_FAILED',\n  '419': 'ADDRESS_INSUFFICIENT_BALANCE',\n  '420': 'ADDRESS_CANNOT_SEND_VALUE',\n  '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',\n  '422': 'GRANT_SENDER_NOT_ADMIN',\n  '423': 'REVOKE_SENDER_NOT_ADMIN',\n  '424': 'RENOUNCE_SENDER_NOT_ALLOWED',\n  '425': 'BUFFER_PERIOD_EXPIRED',\n  '426': 'CALLER_IS_NOT_OWNER',\n  '427': 'NEW_OWNER_IS_ZERO',\n  '428': 'CODE_DEPLOYMENT_FAILED',\n  '429': 'CALL_TO_NON_CONTRACT',\n  '430': 'LOW_LEVEL_CALL_FAILED',\n  '431': 'NOT_PAUSED',\n  '432': 'ADDRESS_ALREADY_ALLOWLISTED',\n  '433': 'ADDRESS_NOT_ALLOWLISTED',\n  '434': 'ERC20_BURN_EXCEEDS_BALANCE',\n  '435': 'INVALID_OPERATION',\n  '436': 'CODEC_OVERFLOW',\n  '437': 'IN_RECOVERY_MODE',\n  '438': 'NOT_IN_RECOVERY_MODE',\n  '439': 'INDUCED_FAILURE',\n  '440': 'EXPIRED_SIGNATURE',\n  '441': 'MALFORMED_SIGNATURE',\n  '442': 'SAFE_CAST_VALUE_CANT_FIT_UINT64',\n  '443': 'UNHANDLED_FEE_TYPE',\n  '444': 'BURN_FROM_ZERO',\n  '500': 'INVALID_POOL_ID',\n  '501': 'CALLER_NOT_POOL',\n  '502': 'SENDER_NOT_ASSET_MANAGER',\n  '503': 'USER_DOESNT_ALLOW_RELAYER',\n  '504': 'INVALID_SIGNATURE',\n  '505': 'EXIT_BELOW_MIN',\n  '506': 'JOIN_ABOVE_MAX',\n  '507': 'SWAP_LIMIT',\n  '508': 'SWAP_DEADLINE',\n  '509': 'CANNOT_SWAP_SAME_TOKEN',\n  '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',\n  '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',\n  '512': 'INTERNAL_BALANCE_OVERFLOW',\n  '513': 'INSUFFICIENT_INTERNAL_BALANCE',\n  '514': 'INVALID_ETH_INTERNAL_BALANCE',\n  '515': 'INVALID_POST_LOAN_BALANCE',\n  '516': 'INSUFFICIENT_ETH',\n  '517': 'UNALLOCATED_ETH',\n  '518': 'ETH_TRANSFER',\n  '519': 'CANNOT_USE_ETH_SENTINEL',\n  '520': 'TOKENS_MISMATCH',\n  '521': 'TOKEN_NOT_REGISTERED',\n  '522': 'TOKEN_ALREADY_REGISTERED',\n  '523': 'TOKENS_ALREADY_SET',\n  '524': 'TOKENS_LENGTH_MUST_BE_2',\n  '525': 'NONZERO_TOKEN_BALANCE',\n  '526': 'BALANCE_TOTAL_OVERFLOW',\n  '527': 'POOL_NO_TOKENS',\n  '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',\n  '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',\n  '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',\n  '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',\n  '603': 'AUM_FEE_PERCENTAGE_TOO_HIGH',\n  '700': 'SPLITTER_FEE_PERCENTAGE_TOO_HIGH',\n  '998': 'UNIMPLEMENTED',\n  '999': 'SHOULD_NOT_HAPPEN',\n};\n\nexport class BalancerErrors {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static isErrorCode = (error: string): boolean => {\n    if (!error.includes('BAL#')) return false;\n\n    const errorCode = error.replace('BAL#', '');\n    return Object.keys(balancerErrorCodes).includes(errorCode);\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason\n   */\n  static parseErrorCode = (error: string): string => {\n    if (!error.includes('BAL#')) throw new Error('Error code not found');\n    const errorCode = error.replace('BAL#', '');\n\n    const actualError = balancerErrorCodes[errorCode];\n\n    if (!actualError) throw new Error('Error code not found');\n\n    return actualError;\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason if passed a valid error code, otherwise returns passed input\n   */\n  static tryParseErrorCode = (error: string): string => {\n    try {\n      return BalancerErrors.parseErrorCode(error);\n    } catch {\n      return error;\n    }\n  };\n\n  /**\n   * Tests whether a string is a known Balancer error message\n   * @param error - a string to be checked verified as a Balancer error message\n   */\n  static isBalancerError = (error: string): boolean => Object.values(balancerErrorCodes).includes(error);\n\n  /**\n   * Encodes an error string into the corresponding error code\n   * @param error - a Balancer error message string\n   * @returns a Balancer error code of the form `BAL#000`\n   */\n  static encodeError = (error: string): string => {\n    const encodedError = Object.entries(balancerErrorCodes).find(([, message]) => message === error);\n\n    if (!encodedError) throw Error('Error message not found');\n\n    return `BAL#${encodedError[0]}`;\n  };\n}\n","import { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { hexValue, hexZeroPad, splitSignature } from '@ethersproject/bytes';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\n\nexport type Account = string | Signer | Contract;\n\nexport async function accountToAddress(account: Account): Promise<string> {\n  if (typeof account == 'string') return account;\n  if (Signer.isSigner(account)) return account.getAddress();\n  if (account.address) return account.address;\n  throw new Error('Could not read account address');\n}\n\nexport enum RelayerAction {\n  JoinPool = 'JoinPool',\n  ExitPool = 'ExitPool',\n  Swap = 'Swap',\n  BatchSwap = 'BatchSwap',\n  SetRelayerApproval = 'SetRelayerApproval',\n}\n\nexport class RelayerAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static encodeCalldataAuthorization = (calldata: string, deadline: BigNumberish, signature: string): string => {\n    const encodedDeadline = hexZeroPad(hexValue(deadline), 32).slice(2);\n    const { v, r, s } = splitSignature(signature);\n    const encodedV = hexZeroPad(hexValue(v), 32).slice(2);\n    const encodedR = r.slice(2);\n    const encodedS = s.slice(2);\n    return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;\n  };\n\n  static signJoinAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.JoinPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signExitAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.ExitPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.Swap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signBatchSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.BatchSwap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSetRelayerApprovalAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.SetRelayerApproval,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signAuthorizationFor = async (\n    type: RelayerAction,\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<string> => {\n    const { chainId } = await validator.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await validator.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer V2 Vault',\n      version: '1',\n      chainId,\n      verifyingContract: validator.address,\n    };\n\n    const types = {\n      [type]: [\n        { name: 'calldata', type: 'bytes' },\n        { name: 'sender', type: 'address' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      calldata: allowedCalldata,\n      sender: await accountToAddress(allowedSender),\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    return user._signTypedData(domain, types, value);\n  };\n}\n\nexport class BalancerMinterAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static signSetMinterApproval = async (\n    minterContract: Contract,\n    minter: Account,\n    approval: boolean,\n    user: Signer & TypedDataSigner,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<{ v: number; r: string; s: string; deadline: BigNumber }> => {\n    const { chainId } = await minterContract.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await minterContract.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer Minter',\n      version: '1',\n      chainId,\n      verifyingContract: minterContract.address,\n    };\n\n    const types = {\n      SetMinterApproval: [\n        { name: 'minter', type: 'address' },\n        { name: 'approval', type: 'bool' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      minter: await accountToAddress(minter),\n      approval,\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    const signature = await user._signTypedData(domain, types, value);\n\n    return { ...splitSignature(signature), deadline: BigNumber.from(deadline) };\n  };\n}\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { splitSignature } from '@ethersproject/bytes';\nimport { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { Account, accountToAddress } from './signatures';\n\nexport const signPermit = async (\n  token: Contract,\n  owner: Signer & TypedDataSigner,\n  spender: Account,\n  amount: BigNumberish,\n  deadline: BigNumberish = MAX_DEADLINE,\n  nonce?: BigNumberish\n): Promise<{ v: number; r: string; s: string; deadline: BigNumber; nonce: BigNumber }> => {\n  const { chainId } = await token.provider.getNetwork();\n  const ownerAddress = await owner.getAddress();\n\n  if (!nonce) nonce = (await token.nonces(ownerAddress)) as BigNumberish;\n\n  // Hack around some tokens not exposing a `version()` function.\n  // If they do then use it, otherwise assume that their version is \"1\".\n  let version = '1';\n  try {\n    if (token.version) {\n      version = await token.version();\n    }\n  } catch {\n    // eslint-disable-prev-line no-empty\n  }\n\n  const domain = {\n    name: await token.name(),\n    version,\n    chainId,\n    verifyingContract: token.address,\n  };\n\n  const types = {\n    Permit: [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ],\n  };\n\n  const value = {\n    owner: ownerAddress,\n    spender: await accountToAddress(spender),\n    value: amount,\n    nonce,\n    deadline,\n  };\n\n  const signature = await owner._signTypedData(domain, types, value);\n  return { ...splitSignature(signature), deadline: BigNumber.from(deadline), nonce: BigNumber.from(nonce) };\n};\n","import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport invariant from 'tiny-invariant';\n\nconst cmpTokens = (tokenA: string, tokenB: string): number => (tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1);\n\nconst transposeMatrix = (matrix: unknown[][]): unknown[][] =>\n  matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));\n\nexport class AssetHelpers {\n  public readonly ETH: string = AddressZero;\n  public readonly WETH: string;\n\n  constructor(wethAddress: string) {\n    this.WETH = getAddress(wethAddress);\n  }\n\n  static isEqual = (addressA: string, addressB: string): boolean => getAddress(addressA) === getAddress(addressB);\n\n  /**\n   * Tests whether `token` is ETH (represented by `0x0000...0000`).\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isETH = (token: string): boolean => AssetHelpers.isEqual(token, this.ETH);\n\n  /**\n   * Tests whether `token` is WETH.\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isWETH = (token: string): boolean => AssetHelpers.isEqual(token, this.WETH);\n\n  /**\n   * Converts an asset to the equivalent ERC20 address.\n   *\n   * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address\n   * @param token - the address of the asset to be translated to an equivalent ERC20\n   * @returns the address of translated ERC20 asset\n   */\n  translateToERC20 = (token: string): string => (this.isETH(token) ? this.WETH : token);\n\n  /**\n   * Sorts an array of token addresses into ascending order to match the format expected by the Vault.\n   *\n   * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.\n   *\n   * The zero address (representing ETH) is sorted as if it were the WETH address.\n   * This matches the behaviour expected by the Vault when receiving an array of addresses.\n   *\n   * @param tokens - an array of token addresses to be sorted in ascending order\n   * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses\n   * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`\n   *\n   * @example\n   * const [tokens] = sortTokens([tokenB, tokenC, tokenA])\n   * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])\n   * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]\n   */\n  sortTokens(tokens: string[], ...others: unknown[][]): [string[], ...unknown[][]] {\n    others.forEach((array) => invariant(tokens.length === array.length, 'array length mismatch'));\n\n    // We want to sort ETH as if were WETH so we translate to ERC20s\n    const erc20Tokens = tokens.map(this.translateToERC20);\n\n    const transpose = transposeMatrix([erc20Tokens, ...others]) as [string, ...unknown[]][];\n    const sortedTranspose = transpose.sort(([tokenA], [tokenB]) => cmpTokens(tokenA, tokenB));\n    const [sortedErc20s, ...sortedOthers] = transposeMatrix(sortedTranspose) as [string[], ...unknown[][]];\n\n    // If one of the tokens was ETH, we need to translate back from WETH\n    const sortedTokens = tokens.includes(this.ETH)\n      ? sortedErc20s.map((token) => (this.isWETH(token) ? this.ETH : token))\n      : sortedErc20s;\n    return [sortedTokens, ...sortedOthers];\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum PoolSpecialization {\n  GeneralPool = 0,\n  MinimalSwapInfoPool,\n  TwoTokenPool,\n}\n\nexport type FundManagement = {\n  sender: string;\n  fromInternalBalance: boolean;\n  recipient: string;\n  toInternalBalance: boolean;\n};\n\n// Swaps\n\nexport enum SwapKind {\n  GivenIn = 0,\n  GivenOut,\n}\n\nexport type SingleSwap = {\n  poolId: string;\n  kind: SwapKind;\n  assetIn: string;\n  assetOut: string;\n  amount: BigNumberish;\n  userData: string;\n};\n\nexport type Swap = {\n  kind: SwapKind;\n  singleSwap: SingleSwap;\n  limit: BigNumberish;\n  deadline: BigNumberish;\n};\n\nexport type BatchSwapStep = {\n  poolId: string;\n  assetInIndex: number;\n  assetOutIndex: number;\n  amount: BigNumberish;\n  userData: string;\n};\n\nexport type BatchSwap = {\n  kind: SwapKind;\n  swaps: BatchSwapStep[];\n  assets: string[];\n  funds: FundManagement;\n  limits: BigNumberish[];\n  deadline: BigNumberish;\n};\n\nexport type SwapRequest = {\n  kind: SwapKind;\n  tokenIn: string;\n  tokenOut: string;\n  amount: BigNumberish;\n  poolId: string;\n  lastChangeBlock: BigNumberish;\n  from: string;\n  to: string;\n  userData: string;\n};\n\n// Joins\n\nexport type JoinPoolRequest = {\n  assets: string[];\n  maxAmountsIn: BigNumberish[];\n  userData: string;\n  fromInternalBalance: boolean;\n};\n\n// Exit\n\nexport type ExitPoolRequest = {\n  assets: string[];\n  minAmountsOut: BigNumberish[];\n  userData: string;\n  toInternalBalance: boolean;\n};\n\n// Balance Operations\n\nexport enum UserBalanceOpKind {\n  DepositInternal = 0,\n  WithdrawInternal,\n  TransferInternal,\n  TransferExternal,\n}\n\nexport type UserBalanceOp = {\n  kind: UserBalanceOpKind;\n  asset: string;\n  amount: BigNumberish;\n  sender: string;\n  recipient: string;\n};\n\nexport enum PoolBalanceOpKind {\n  Withdraw = 0,\n  Deposit = 1,\n  Update = 2,\n}\n\nexport type PoolBalanceOp = {\n  kind: PoolBalanceOpKind;\n  poolId: string;\n  token: string;\n  amount: BigNumberish;\n};\n"],"names":["ONE","MAX_DEADLINE"],"mappings":"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"}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts balancer-js/dist/index.js balancer-js/dist/index.js
--- balancer-js/dist/index.js	2022-10-28 09:53:21.000000000 +0200
+++ balancer-js/dist/index.js	1970-01-01 01:00:00.000000000 +0100
@@ -1,727 +0,0 @@
-'use strict';
-
-Object.defineProperty(exports, '__esModule', { value: true });
-
-var abi = require('@ethersproject/abi');
-var constants = require('@ethersproject/constants');
-var bignumber = require('@ethersproject/bignumber');
-var bytes = require('@ethersproject/bytes');
-var abstractSigner = require('@ethersproject/abstract-signer');
-var address = require('@ethersproject/address');
-
-exports.StablePoolJoinKind = void 0;
-(function (StablePoolJoinKind) {
-    StablePoolJoinKind[StablePoolJoinKind["INIT"] = 0] = "INIT";
-    StablePoolJoinKind[StablePoolJoinKind["EXACT_TOKENS_IN_FOR_BPT_OUT"] = 1] = "EXACT_TOKENS_IN_FOR_BPT_OUT";
-    StablePoolJoinKind[StablePoolJoinKind["TOKEN_IN_FOR_EXACT_BPT_OUT"] = 2] = "TOKEN_IN_FOR_EXACT_BPT_OUT";
-})(exports.StablePoolJoinKind || (exports.StablePoolJoinKind = {}));
-exports.StablePoolExitKind = void 0;
-(function (StablePoolExitKind) {
-    StablePoolExitKind[StablePoolExitKind["EXACT_BPT_IN_FOR_ONE_TOKEN_OUT"] = 0] = "EXACT_BPT_IN_FOR_ONE_TOKEN_OUT";
-    StablePoolExitKind[StablePoolExitKind["BPT_IN_FOR_EXACT_TOKENS_OUT"] = 1] = "BPT_IN_FOR_EXACT_TOKENS_OUT";
-})(exports.StablePoolExitKind || (exports.StablePoolExitKind = {}));
-class StablePoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-/**
- * Encodes the userData parameter for providing the initial liquidity to a StablePool
- * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances
- */
-StablePoolEncoder.joinInit = (amountsIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]'], [exports.StablePoolJoinKind.INIT, amountsIn]);
-/**
- * Encodes the userData parameter for joining a StablePool with exact token inputs
- * @param amountsIn - the amounts each of token to deposit in the pool as liquidity
- * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens
- */
-StablePoolEncoder.joinExactTokensInForBPTOut = (amountsIn, minimumBPT) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [exports.StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]);
-/**
- * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT
- * @param bptAmountOut - the amount of BPT to be minted
- * @param enterTokenIndex - the index of the token to be provided as liquidity
- */
-StablePoolEncoder.joinTokenInForExactBPTOut = (bptAmountOut, enterTokenIndex) => abi.defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [exports.StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]);
-/**
- * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT
- * @param bptAmountIn - the amount of BPT to be burned
- * @param enterTokenIndex - the index of the token to removed from the pool
- */
-StablePoolEncoder.exitExactBPTInForOneTokenOut = (bptAmountIn, exitTokenIndex) => abi.defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [exports.StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]);
-/**
- * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens
- * @param amountsOut - the amounts of each token to be withdrawn from the pool
- * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens
- */
-StablePoolEncoder.exitBPTInForExactTokensOut = (amountsOut, maxBPTAmountIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [exports.StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]);
-
-exports.WeightedPoolJoinKind = void 0;
-(function (WeightedPoolJoinKind) {
-    WeightedPoolJoinKind[WeightedPoolJoinKind["INIT"] = 0] = "INIT";
-    WeightedPoolJoinKind[WeightedPoolJoinKind["EXACT_TOKENS_IN_FOR_BPT_OUT"] = 1] = "EXACT_TOKENS_IN_FOR_BPT_OUT";
-    WeightedPoolJoinKind[WeightedPoolJoinKind["TOKEN_IN_FOR_EXACT_BPT_OUT"] = 2] = "TOKEN_IN_FOR_EXACT_BPT_OUT";
-    WeightedPoolJoinKind[WeightedPoolJoinKind["ALL_TOKENS_IN_FOR_EXACT_BPT_OUT"] = 3] = "ALL_TOKENS_IN_FOR_EXACT_BPT_OUT";
-    WeightedPoolJoinKind[WeightedPoolJoinKind["ADD_TOKEN"] = 4] = "ADD_TOKEN";
-})(exports.WeightedPoolJoinKind || (exports.WeightedPoolJoinKind = {}));
-exports.WeightedPoolExitKind = void 0;
-(function (WeightedPoolExitKind) {
-    WeightedPoolExitKind[WeightedPoolExitKind["EXACT_BPT_IN_FOR_ONE_TOKEN_OUT"] = 0] = "EXACT_BPT_IN_FOR_ONE_TOKEN_OUT";
-    WeightedPoolExitKind[WeightedPoolExitKind["EXACT_BPT_IN_FOR_TOKENS_OUT"] = 1] = "EXACT_BPT_IN_FOR_TOKENS_OUT";
-    WeightedPoolExitKind[WeightedPoolExitKind["BPT_IN_FOR_EXACT_TOKENS_OUT"] = 2] = "BPT_IN_FOR_EXACT_TOKENS_OUT";
-    WeightedPoolExitKind[WeightedPoolExitKind["REMOVE_TOKEN"] = 3] = "REMOVE_TOKEN";
-})(exports.WeightedPoolExitKind || (exports.WeightedPoolExitKind = {}));
-class WeightedPoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-/**
- * Encodes the userData parameter for providing the initial liquidity to a WeightedPool
- * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances
- */
-WeightedPoolEncoder.joinInit = (amountsIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]'], [exports.WeightedPoolJoinKind.INIT, amountsIn]);
-/**
- * Encodes the userData parameter for joining a WeightedPool with exact token inputs
- * @param amountsIn - the amounts each of token to deposit in the pool as liquidity
- * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens
- */
-WeightedPoolEncoder.joinExactTokensInForBPTOut = (amountsIn, minimumBPT) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [exports.WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]);
-/**
- * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT
- * @param bptAmountOut - the amount of BPT to be minted
- * @param enterTokenIndex - the index of the token to be provided as liquidity
- */
-WeightedPoolEncoder.joinTokenInForExactBPTOut = (bptAmountOut, enterTokenIndex) => abi.defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [exports.WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]);
-/**
- * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT
- * @param bptAmountOut - the amount of BPT to be minted
- */
-WeightedPoolEncoder.joinAllTokensInForExactBPTOut = (bptAmountOut) => abi.defaultAbiCoder.encode(['uint256', 'uint256'], [exports.WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]);
-/**
- * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT
- * @param bptAmountIn - the amount of BPT to be burned
- * @param enterTokenIndex - the index of the token to removed from the pool
- */
-WeightedPoolEncoder.exitExactBPTInForOneTokenOut = (bptAmountIn, exitTokenIndex) => abi.defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [exports.WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]);
-/**
- * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT
- * @param bptAmountIn - the amount of BPT to be burned
- */
-WeightedPoolEncoder.exitExactBPTInForTokensOut = (bptAmountIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256'], [exports.WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]);
-/**
- * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens
- * @param amountsOut - the amounts of each token to be withdrawn from the pool
- * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens
- */
-WeightedPoolEncoder.exitBPTInForExactTokensOut = (amountsOut, maxBPTAmountIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [exports.WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]);
-class ManagedPoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-/**
- * Encodes the userData parameter for exiting a ManagedPool to remove a token.
- * This can only be done by the pool owner.
- */
-ManagedPoolEncoder.exitForRemoveToken = (tokenIndex) => abi.defaultAbiCoder.encode(['uint256', 'uint256'], [exports.WeightedPoolExitKind.REMOVE_TOKEN, tokenIndex]);
-
-// Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants
-// Including would introduce a dependency
-const MaxWeightedTokens = 100;
-/**
- * Normalize an array of token weights to ensure they sum to `1e18`
- * @param weights - an array of token weights to be normalized
- * @returns an equivalent set of normalized weights
- */
-function toNormalizedWeights(weights) {
-    // When the number is exactly equal to the max, normalizing with common inputs
-    // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.
-    if (weights.length == MaxWeightedTokens) {
-        return Array(MaxWeightedTokens).fill(constants.WeiPerEther.div(MaxWeightedTokens));
-    }
-    const sum = weights.reduce((total, weight) => total.add(weight), constants.Zero);
-    if (sum.eq(constants.WeiPerEther))
-        return weights;
-    const normalizedWeights = [];
-    let normalizedSum = constants.Zero;
-    for (let index = 0; index < weights.length; index++) {
-        if (index < weights.length - 1) {
-            normalizedWeights[index] = weights[index].mul(constants.WeiPerEther).div(sum);
-            normalizedSum = normalizedSum.add(normalizedWeights[index]);
-        }
-        else {
-            normalizedWeights[index] = constants.WeiPerEther.sub(normalizedSum);
-        }
-    }
-    return normalizedWeights;
-}
-/**
- * Check whether a set of weights are normalized
- * @param weights - an array of potentially unnormalized weights
- * @returns a boolean of whether the weights are normalized
- */
-const isNormalizedWeights = (weights) => {
-    const totalWeight = weights.reduce((total, weight) => total.add(weight), constants.Zero);
-    return totalWeight.eq(constants.WeiPerEther);
-};
-
-var isProduction = process.env.NODE_ENV === 'production';
-var prefix = 'Invariant failed';
-function invariant(condition, message) {
-    if (condition) {
-        return;
-    }
-    if (isProduction) {
-        throw new Error(prefix);
-    }
-    throw new Error(prefix + ": " + (message || ''));
-}
-
-/**
- * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce
- * @param poolId - a bytes32 string of the pool's ID
- * @returns an object with the decomposed poolId
- */
-const splitPoolId = (poolId) => {
-    return {
-        address: getPoolAddress(poolId),
-        specialization: getPoolSpecialization(poolId),
-        nonce: getPoolNonce(poolId),
-    };
-};
-/**
- * Extracts a pool's address from its poolId
- * @param poolId - a bytes32 string of the pool's ID
- * @returns the pool's address
- */
-const getPoolAddress = (poolId) => {
-    invariant(poolId.length === 66, 'Invalid poolId length');
-    return poolId.slice(0, 42);
-};
-/**
- * Extracts a pool's specialization from its poolId
- * @param poolId - a bytes32 string of the pool's ID
- * @returns the pool's specialization
- */
-const getPoolSpecialization = (poolId) => {
-    invariant(poolId.length === 66, 'Invalid poolId length');
-    // Only have 3 pool specializations so we can just pull the relevant character
-    const specializationCode = parseInt(poolId[45]);
-    invariant(specializationCode < 3, 'Invalid pool specialization');
-    return specializationCode;
-};
-/**
- * Extracts a pool's nonce from its poolId
- * @param poolId - a bytes32 string of the pool's ID
- * @returns the pool's nonce
- */
-const getPoolNonce = (poolId) => {
-    invariant(poolId.length === 66, 'Invalid poolId length');
-    return bignumber.BigNumber.from(`0x${poolId.slice(46)}`);
-};
-
-// RECOVERY_MODE must match BasePoolUserData.RECOVERY_MODE_EXIT_KIND, the value that
-// (Legacy)BasePool uses to detect the special exit enabled in recovery mode.
-exports.BasePoolExitKind = void 0;
-(function (BasePoolExitKind) {
-    BasePoolExitKind[BasePoolExitKind["RECOVERY_MODE"] = 255] = "RECOVERY_MODE";
-})(exports.BasePoolExitKind || (exports.BasePoolExitKind = {}));
-class BasePoolEncoder {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-/**
- * Encodes the userData parameter for exiting any Pool in recovery mode, by removing tokens in return for
- * an exact amount of BPT
- * @param bptAmountIn - the amount of BPT to be burned
- */
-BasePoolEncoder.recoveryModeExit = (bptAmountIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256'], [exports.BasePoolExitKind.RECOVERY_MODE, bptAmountIn]);
-
-const balancerErrorCodes = {
-    '000': 'ADD_OVERFLOW',
-    '001': 'SUB_OVERFLOW',
-    '002': 'SUB_UNDERFLOW',
-    '003': 'MUL_OVERFLOW',
-    '004': 'ZERO_DIVISION',
-    '005': 'DIV_INTERNAL',
-    '006': 'X_OUT_OF_BOUNDS',
-    '007': 'Y_OUT_OF_BOUNDS',
-    '008': 'PRODUCT_OUT_OF_BOUNDS',
-    '009': 'INVALID_EXPONENT',
-    '100': 'OUT_OF_BOUNDS',
-    '101': 'UNSORTED_ARRAY',
-    '102': 'UNSORTED_TOKENS',
-    '103': 'INPUT_LENGTH_MISMATCH',
-    '104': 'ZERO_TOKEN',
-    '200': 'MIN_TOKENS',
-    '201': 'MAX_TOKENS',
-    '202': 'MAX_SWAP_FEE_PERCENTAGE',
-    '203': 'MIN_SWAP_FEE_PERCENTAGE',
-    '204': 'MINIMUM_BPT',
-    '205': 'CALLER_NOT_VAULT',
-    '206': 'UNINITIALIZED',
-    '207': 'BPT_IN_MAX_AMOUNT',
-    '208': 'BPT_OUT_MIN_AMOUNT',
-    '209': 'EXPIRED_PERMIT',
-    '210': 'NOT_TWO_TOKENS',
-    '211': 'DISABLED',
-    '300': 'MIN_AMP',
-    '301': 'MAX_AMP',
-    '302': 'MIN_WEIGHT',
-    '303': 'MAX_STABLE_TOKENS',
-    '304': 'MAX_IN_RATIO',
-    '305': 'MAX_OUT_RATIO',
-    '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',
-    '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',
-    '308': 'NORMALIZED_WEIGHT_INVARIANT',
-    '309': 'INVALID_TOKEN',
-    '310': 'UNHANDLED_JOIN_KIND',
-    '311': 'ZERO_INVARIANT',
-    '312': 'ORACLE_INVALID_SECONDS_QUERY',
-    '313': 'ORACLE_NOT_INITIALIZED',
-    '314': 'ORACLE_QUERY_TOO_OLD',
-    '315': 'ORACLE_INVALID_INDEX',
-    '316': 'ORACLE_BAD_SECS',
-    '317': 'AMP_END_TIME_TOO_CLOSE',
-    '318': 'AMP_ONGOING_UPDATE',
-    '319': 'AMP_RATE_TOO_HIGH',
-    '320': 'AMP_NO_ONGOING_UPDATE',
-    '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',
-    '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',
-    '323': 'RELAYER_NOT_CONTRACT',
-    '324': 'BASE_POOL_RELAYER_NOT_CALLED',
-    '325': 'REBALANCING_RELAYER_REENTERED',
-    '326': 'GRADUAL_UPDATE_TIME_TRAVEL',
-    '327': 'SWAPS_DISABLED',
-    '328': 'CALLER_IS_NOT_LBP_OWNER',
-    '329': 'PRICE_RATE_OVERFLOW',
-    '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',
-    '331': 'WEIGHT_CHANGE_TOO_FAST',
-    '332': 'LOWER_GREATER_THAN_UPPER_TARGET',
-    '333': 'UPPER_TARGET_TOO_HIGH',
-    '334': 'UNHANDLED_BY_LINEAR_POOL',
-    '335': 'OUT_OF_TARGET_RANGE',
-    '336': 'UNHANDLED_EXIT_KIND',
-    '337': 'UNAUTHORIZED_EXIT',
-    '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',
-    '339': 'UNHANDLED_BY_MANAGED_POOL',
-    '340': 'UNHANDLED_BY_PHANTOM_POOL',
-    '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',
-    '342': 'INVALID_INITIALIZATION',
-    '343': 'OUT_OF_NEW_TARGET_RANGE',
-    '344': 'FEATURE_DISABLED',
-    '345': 'UNINITIALIZED_POOL_CONTROLLER',
-    '346': 'SET_SWAP_FEE_DURING_FEE_CHANGE',
-    '347': 'SET_SWAP_FEE_PENDING_FEE_CHANGE',
-    '348': 'CHANGE_TOKENS_DURING_WEIGHT_CHANGE',
-    '349': 'CHANGE_TOKENS_PENDING_WEIGHT_CHANGE',
-    '350': 'MAX_WEIGHT',
-    '351': 'UNAUTHORIZED_JOIN',
-    '352': 'MAX_MANAGEMENT_AUM_FEE_PERCENTAGE',
-    '353': 'FRACTIONAL_TARGET',
-    '354': 'ADD_OR_REMOVE_BPT',
-    '355': 'INVALID_CIRCUIT_BREAKER_BOUNDS',
-    '356': 'CIRCUIT_BREAKER_TRIPPED',
-    '400': 'REENTRANCY',
-    '401': 'SENDER_NOT_ALLOWED',
-    '402': 'PAUSED',
-    '403': 'PAUSE_WINDOW_EXPIRED',
-    '404': 'MAX_PAUSE_WINDOW_DURATION',
-    '405': 'MAX_BUFFER_PERIOD_DURATION',
-    '406': 'INSUFFICIENT_BALANCE',
-    '407': 'INSUFFICIENT_ALLOWANCE',
-    '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',
-    '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',
-    '410': 'ERC20_MINT_TO_ZERO_ADDRESS',
-    '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',
-    '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',
-    '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',
-    '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',
-    '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',
-    '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',
-    '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',
-    '418': 'SAFE_ERC20_CALL_FAILED',
-    '419': 'ADDRESS_INSUFFICIENT_BALANCE',
-    '420': 'ADDRESS_CANNOT_SEND_VALUE',
-    '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',
-    '422': 'GRANT_SENDER_NOT_ADMIN',
-    '423': 'REVOKE_SENDER_NOT_ADMIN',
-    '424': 'RENOUNCE_SENDER_NOT_ALLOWED',
-    '425': 'BUFFER_PERIOD_EXPIRED',
-    '426': 'CALLER_IS_NOT_OWNER',
-    '427': 'NEW_OWNER_IS_ZERO',
-    '428': 'CODE_DEPLOYMENT_FAILED',
-    '429': 'CALL_TO_NON_CONTRACT',
-    '430': 'LOW_LEVEL_CALL_FAILED',
-    '431': 'NOT_PAUSED',
-    '432': 'ADDRESS_ALREADY_ALLOWLISTED',
-    '433': 'ADDRESS_NOT_ALLOWLISTED',
-    '434': 'ERC20_BURN_EXCEEDS_BALANCE',
-    '435': 'INVALID_OPERATION',
-    '436': 'CODEC_OVERFLOW',
-    '437': 'IN_RECOVERY_MODE',
-    '438': 'NOT_IN_RECOVERY_MODE',
-    '439': 'INDUCED_FAILURE',
-    '440': 'EXPIRED_SIGNATURE',
-    '441': 'MALFORMED_SIGNATURE',
-    '442': 'SAFE_CAST_VALUE_CANT_FIT_UINT64',
-    '443': 'UNHANDLED_FEE_TYPE',
-    '444': 'BURN_FROM_ZERO',
-    '500': 'INVALID_POOL_ID',
-    '501': 'CALLER_NOT_POOL',
-    '502': 'SENDER_NOT_ASSET_MANAGER',
-    '503': 'USER_DOESNT_ALLOW_RELAYER',
-    '504': 'INVALID_SIGNATURE',
-    '505': 'EXIT_BELOW_MIN',
-    '506': 'JOIN_ABOVE_MAX',
-    '507': 'SWAP_LIMIT',
-    '508': 'SWAP_DEADLINE',
-    '509': 'CANNOT_SWAP_SAME_TOKEN',
-    '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',
-    '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',
-    '512': 'INTERNAL_BALANCE_OVERFLOW',
-    '513': 'INSUFFICIENT_INTERNAL_BALANCE',
-    '514': 'INVALID_ETH_INTERNAL_BALANCE',
-    '515': 'INVALID_POST_LOAN_BALANCE',
-    '516': 'INSUFFICIENT_ETH',
-    '517': 'UNALLOCATED_ETH',
-    '518': 'ETH_TRANSFER',
-    '519': 'CANNOT_USE_ETH_SENTINEL',
-    '520': 'TOKENS_MISMATCH',
-    '521': 'TOKEN_NOT_REGISTERED',
-    '522': 'TOKEN_ALREADY_REGISTERED',
-    '523': 'TOKENS_ALREADY_SET',
-    '524': 'TOKENS_LENGTH_MUST_BE_2',
-    '525': 'NONZERO_TOKEN_BALANCE',
-    '526': 'BALANCE_TOTAL_OVERFLOW',
-    '527': 'POOL_NO_TOKENS',
-    '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',
-    '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',
-    '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',
-    '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',
-    '603': 'AUM_FEE_PERCENTAGE_TOO_HIGH',
-    '700': 'SPLITTER_FEE_PERCENTAGE_TOO_HIGH',
-    '998': 'UNIMPLEMENTED',
-    '999': 'SHOULD_NOT_HAPPEN',
-};
-class BalancerErrors {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-BalancerErrors.isErrorCode = (error) => {
-    if (!error.includes('BAL#'))
-        return false;
-    const errorCode = error.replace('BAL#', '');
-    return Object.keys(balancerErrorCodes).includes(errorCode);
-};
-/**
- * Decodes a Balancer error code into the corresponding reason
- * @param error - a Balancer error code of the form `BAL#000`
- * @returns The decoded error reason
- */
-BalancerErrors.parseErrorCode = (error) => {
-    if (!error.includes('BAL#'))
-        throw new Error('Error code not found');
-    const errorCode = error.replace('BAL#', '');
-    const actualError = balancerErrorCodes[errorCode];
-    if (!actualError)
-        throw new Error('Error code not found');
-    return actualError;
-};
-/**
- * Decodes a Balancer error code into the corresponding reason
- * @param error - a Balancer error code of the form `BAL#000`
- * @returns The decoded error reason if passed a valid error code, otherwise returns passed input
- */
-BalancerErrors.tryParseErrorCode = (error) => {
-    try {
-        return BalancerErrors.parseErrorCode(error);
-    }
-    catch {
-        return error;
-    }
-};
-/**
- * Tests whether a string is a known Balancer error message
- * @param error - a string to be checked verified as a Balancer error message
- */
-BalancerErrors.isBalancerError = (error) => Object.values(balancerErrorCodes).includes(error);
-/**
- * Encodes an error string into the corresponding error code
- * @param error - a Balancer error message string
- * @returns a Balancer error code of the form `BAL#000`
- */
-BalancerErrors.encodeError = (error) => {
-    const encodedError = Object.entries(balancerErrorCodes).find(([, message]) => message === error);
-    if (!encodedError)
-        throw Error('Error message not found');
-    return `BAL#${encodedError[0]}`;
-};
-
-async function accountToAddress(account) {
-    if (typeof account == 'string')
-        return account;
-    if (abstractSigner.Signer.isSigner(account))
-        return account.getAddress();
-    if (account.address)
-        return account.address;
-    throw new Error('Could not read account address');
-}
-exports.RelayerAction = void 0;
-(function (RelayerAction) {
-    RelayerAction["JoinPool"] = "JoinPool";
-    RelayerAction["ExitPool"] = "ExitPool";
-    RelayerAction["Swap"] = "Swap";
-    RelayerAction["BatchSwap"] = "BatchSwap";
-    RelayerAction["SetRelayerApproval"] = "SetRelayerApproval";
-})(exports.RelayerAction || (exports.RelayerAction = {}));
-class RelayerAuthorization {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-RelayerAuthorization.encodeCalldataAuthorization = (calldata, deadline, signature) => {
-    const encodedDeadline = bytes.hexZeroPad(bytes.hexValue(deadline), 32).slice(2);
-    const { v, r, s } = bytes.splitSignature(signature);
-    const encodedV = bytes.hexZeroPad(bytes.hexValue(v), 32).slice(2);
-    const encodedR = r.slice(2);
-    const encodedS = s.slice(2);
-    return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;
-};
-RelayerAuthorization.signJoinAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(exports.RelayerAction.JoinPool, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-RelayerAuthorization.signExitAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(exports.RelayerAction.ExitPool, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-RelayerAuthorization.signSwapAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(exports.RelayerAction.Swap, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-RelayerAuthorization.signBatchSwapAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(exports.RelayerAction.BatchSwap, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-RelayerAuthorization.signSetRelayerApprovalAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(exports.RelayerAction.SetRelayerApproval, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-RelayerAuthorization.signAuthorizationFor = async (type, validator, user, allowedSender, allowedCalldata, deadline = constants.MaxUint256, nonce) => {
-    const { chainId } = await validator.provider.getNetwork();
-    if (!nonce) {
-        const userAddress = await user.getAddress();
-        nonce = (await validator.getNextNonce(userAddress));
-    }
-    const domain = {
-        name: 'Balancer V2 Vault',
-        version: '1',
-        chainId,
-        verifyingContract: validator.address,
-    };
-    const types = {
-        [type]: [
-            { name: 'calldata', type: 'bytes' },
-            { name: 'sender', type: 'address' },
-            { name: 'nonce', type: 'uint256' },
-            { name: 'deadline', type: 'uint256' },
-        ],
-    };
-    const value = {
-        calldata: allowedCalldata,
-        sender: await accountToAddress(allowedSender),
-        nonce: nonce.toString(),
-        deadline: deadline.toString(),
-    };
-    return user._signTypedData(domain, types, value);
-};
-class BalancerMinterAuthorization {
-    /**
-     * Cannot be constructed.
-     */
-    constructor() {
-        // eslint-disable-next-line @typescript-eslint/no-empty-function
-    }
-}
-BalancerMinterAuthorization.signSetMinterApproval = async (minterContract, minter, approval, user, deadline = constants.MaxUint256, nonce) => {
-    const { chainId } = await minterContract.provider.getNetwork();
-    if (!nonce) {
-        const userAddress = await user.getAddress();
-        nonce = (await minterContract.getNextNonce(userAddress));
-    }
-    const domain = {
-        name: 'Balancer Minter',
-        version: '1',
-        chainId,
-        verifyingContract: minterContract.address,
-    };
-    const types = {
-        SetMinterApproval: [
-            { name: 'minter', type: 'address' },
-            { name: 'approval', type: 'bool' },
-            { name: 'nonce', type: 'uint256' },
-            { name: 'deadline', type: 'uint256' },
-        ],
-    };
-    const value = {
-        minter: await accountToAddress(minter),
-        approval,
-        nonce: nonce.toString(),
-        deadline: deadline.toString(),
-    };
-    const signature = await user._signTypedData(domain, types, value);
-    return { ...bytes.splitSignature(signature), deadline: bignumber.BigNumber.from(deadline) };
-};
-
-const signPermit = async (token, owner, spender, amount, deadline = constants.MaxUint256, nonce) => {
-    const { chainId } = await token.provider.getNetwork();
-    const ownerAddress = await owner.getAddress();
-    if (!nonce)
-        nonce = (await token.nonces(ownerAddress));
-    // Hack around some tokens not exposing a `version()` function.
-    // If they do then use it, otherwise assume that their version is "1".
-    let version = '1';
-    try {
-        if (token.version) {
-            version = await token.version();
-        }
-    }
-    catch {
-        // eslint-disable-prev-line no-empty
-    }
-    const domain = {
-        name: await token.name(),
-        version,
-        chainId,
-        verifyingContract: token.address,
-    };
-    const types = {
-        Permit: [
-            { name: 'owner', type: 'address' },
-            { name: 'spender', type: 'address' },
-            { name: 'value', type: 'uint256' },
-            { name: 'nonce', type: 'uint256' },
-            { name: 'deadline', type: 'uint256' },
-        ],
-    };
-    const value = {
-        owner: ownerAddress,
-        spender: await accountToAddress(spender),
-        value: amount,
-        nonce,
-        deadline,
-    };
-    const signature = await owner._signTypedData(domain, types, value);
-    return { ...bytes.splitSignature(signature), deadline: bignumber.BigNumber.from(deadline), nonce: bignumber.BigNumber.from(nonce) };
-};
-
-const cmpTokens = (tokenA, tokenB) => (tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1);
-const transposeMatrix = (matrix) => matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));
-class AssetHelpers {
-    constructor(wethAddress) {
-        this.ETH = constants.AddressZero;
-        /**
-         * Tests whether `token` is ETH (represented by `0x0000...0000`).
-         *
-         * @param token - the address of the asset to be checked
-         */
-        this.isETH = (token) => AssetHelpers.isEqual(token, this.ETH);
-        /**
-         * Tests whether `token` is WETH.
-         *
-         * @param token - the address of the asset to be checked
-         */
-        this.isWETH = (token) => AssetHelpers.isEqual(token, this.WETH);
-        /**
-         * Converts an asset to the equivalent ERC20 address.
-         *
-         * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address
-         * @param token - the address of the asset to be translated to an equivalent ERC20
-         * @returns the address of translated ERC20 asset
-         */
-        this.translateToERC20 = (token) => (this.isETH(token) ? this.WETH : token);
-        this.WETH = address.getAddress(wethAddress);
-    }
-    /**
-     * Sorts an array of token addresses into ascending order to match the format expected by the Vault.
-     *
-     * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.
-     *
-     * The zero address (representing ETH) is sorted as if it were the WETH address.
-     * This matches the behaviour expected by the Vault when receiving an array of addresses.
-     *
-     * @param tokens - an array of token addresses to be sorted in ascending order
-     * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses
-     * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`
-     *
-     * @example
-     * const [tokens] = sortTokens([tokenB, tokenC, tokenA])
-     * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])
-     * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]
-     */
-    sortTokens(tokens, ...others) {
-        others.forEach((array) => invariant(tokens.length === array.length, 'array length mismatch'));
-        // We want to sort ETH as if were WETH so we translate to ERC20s
-        const erc20Tokens = tokens.map(this.translateToERC20);
-        const transpose = transposeMatrix([erc20Tokens, ...others]);
-        const sortedTranspose = transpose.sort(([tokenA], [tokenB]) => cmpTokens(tokenA, tokenB));
-        const [sortedErc20s, ...sortedOthers] = transposeMatrix(sortedTranspose);
-        // If one of the tokens was ETH, we need to translate back from WETH
-        const sortedTokens = tokens.includes(this.ETH)
-            ? sortedErc20s.map((token) => (this.isWETH(token) ? this.ETH : token))
-            : sortedErc20s;
-        return [sortedTokens, ...sortedOthers];
-    }
-}
-AssetHelpers.isEqual = (addressA, addressB) => address.getAddress(addressA) === address.getAddress(addressB);
-
-exports.PoolSpecialization = void 0;
-(function (PoolSpecialization) {
-    PoolSpecialization[PoolSpecialization["GeneralPool"] = 0] = "GeneralPool";
-    PoolSpecialization[PoolSpecialization["MinimalSwapInfoPool"] = 1] = "MinimalSwapInfoPool";
-    PoolSpecialization[PoolSpecialization["TwoTokenPool"] = 2] = "TwoTokenPool";
-})(exports.PoolSpecialization || (exports.PoolSpecialization = {}));
-// Swaps
-exports.SwapKind = void 0;
-(function (SwapKind) {
-    SwapKind[SwapKind["GivenIn"] = 0] = "GivenIn";
-    SwapKind[SwapKind["GivenOut"] = 1] = "GivenOut";
-})(exports.SwapKind || (exports.SwapKind = {}));
-// Balance Operations
-exports.UserBalanceOpKind = void 0;
-(function (UserBalanceOpKind) {
-    UserBalanceOpKind[UserBalanceOpKind["DepositInternal"] = 0] = "DepositInternal";
-    UserBalanceOpKind[UserBalanceOpKind["WithdrawInternal"] = 1] = "WithdrawInternal";
-    UserBalanceOpKind[UserBalanceOpKind["TransferInternal"] = 2] = "TransferInternal";
-    UserBalanceOpKind[UserBalanceOpKind["TransferExternal"] = 3] = "TransferExternal";
-})(exports.UserBalanceOpKind || (exports.UserBalanceOpKind = {}));
-exports.PoolBalanceOpKind = void 0;
-(function (PoolBalanceOpKind) {
-    PoolBalanceOpKind[PoolBalanceOpKind["Withdraw"] = 0] = "Withdraw";
-    PoolBalanceOpKind[PoolBalanceOpKind["Deposit"] = 1] = "Deposit";
-    PoolBalanceOpKind[PoolBalanceOpKind["Update"] = 2] = "Update";
-})(exports.PoolBalanceOpKind || (exports.PoolBalanceOpKind = {}));
-
-exports.AssetHelpers = AssetHelpers;
-exports.BalancerErrors = BalancerErrors;
-exports.BalancerMinterAuthorization = BalancerMinterAuthorization;
-exports.BasePoolEncoder = BasePoolEncoder;
-exports.ManagedPoolEncoder = ManagedPoolEncoder;
-exports.RelayerAuthorization = RelayerAuthorization;
-exports.StablePoolEncoder = StablePoolEncoder;
-exports.WeightedPoolEncoder = WeightedPoolEncoder;
-exports.accountToAddress = accountToAddress;
-exports.getPoolAddress = getPoolAddress;
-exports.getPoolNonce = getPoolNonce;
-exports.getPoolSpecialization = getPoolSpecialization;
-exports.isNormalizedWeights = isNormalizedWeights;
-exports.signPermit = signPermit;
-exports.splitPoolId = splitPoolId;
-exports.toNormalizedWeights = toNormalizedWeights;
-//# sourceMappingURL=index.js.map
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts balancer-js/dist/index.js.map balancer-js/dist/index.js.map
--- balancer-js/dist/index.js.map	2022-10-28 09:53:21.000000000 +0200
+++ balancer-js/dist/index.js.map	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-{"version":3,"file":"index.js","sources":["../src/pool-stable/encoder.ts","../src/pool-weighted/encoder.ts","../src/pool-weighted/normalizedWeights.ts","../../../node_modules/tiny-invariant/dist/tiny-invariant.esm.js","../src/pool-utils/poolId.ts","../src/pool-utils/encoder.ts","../src/utils/errors.ts","../src/utils/signatures.ts","../src/utils/permit.ts","../src/utils/assetHelpers.ts","../src/types.ts"],"sourcesContent":["import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum StablePoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum StablePoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n}\n\nexport class StablePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a StablePool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256[]'], [StablePoolJoinKind.INIT, amountsIn]);\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (amountsIn: BigNumberish[], minimumBPT: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (bptAmountOut: BigNumberish, enterTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (bptAmountIn: BigNumberish, exitTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]\n    );\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum WeightedPoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n  ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n  ADD_TOKEN,\n}\n\nexport enum WeightedPoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n  REMOVE_TOKEN,\n}\n\nexport class WeightedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a WeightedPool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256[]'], [WeightedPoolJoinKind.INIT, amountsIn]);\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (amountsIn: BigNumberish[], minimumBPT: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (bptAmountOut: BigNumberish, enterTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   */\n  static joinAllTokensInForExactBPTOut = (bptAmountOut: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (bptAmountIn: BigNumberish, exitTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]);\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]\n    );\n}\n\nexport class ManagedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting a ManagedPool to remove a token.\n   * This can only be done by the pool owner.\n   */\n  static exitForRemoveToken = (tokenIndex: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolExitKind.REMOVE_TOKEN, tokenIndex]);\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther as ONE } from '@ethersproject/constants';\n\n// Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants\n// Including would introduce a dependency\nconst MaxWeightedTokens = 100;\n\n/**\n * Normalize an array of token weights to ensure they sum to `1e18`\n * @param weights - an array of token weights to be normalized\n * @returns an equivalent set of normalized weights\n */\nexport function toNormalizedWeights(weights: BigNumber[]): BigNumber[] {\n  // When the number is exactly equal to the max, normalizing with common inputs\n  // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.\n  if (weights.length == MaxWeightedTokens) {\n    return Array(MaxWeightedTokens).fill(ONE.div(MaxWeightedTokens));\n  }\n\n  const sum = weights.reduce((total, weight) => total.add(weight), Zero);\n  if (sum.eq(ONE)) return weights;\n\n  const normalizedWeights = [];\n  let normalizedSum = Zero;\n  for (let index = 0; index < weights.length; index++) {\n    if (index < weights.length - 1) {\n      normalizedWeights[index] = weights[index].mul(ONE).div(sum);\n      normalizedSum = normalizedSum.add(normalizedWeights[index]);\n    } else {\n      normalizedWeights[index] = ONE.sub(normalizedSum);\n    }\n  }\n\n  return normalizedWeights;\n}\n\n/**\n * Check whether a set of weights are normalized\n * @param weights - an array of potentially unnormalized weights\n * @returns a boolean of whether the weights are normalized\n */\nexport const isNormalizedWeights = (weights: BigNumberish[]): boolean => {\n  const totalWeight = weights.reduce((total: BigNumber, weight) => total.add(weight), Zero);\n  return totalWeight.eq(ONE);\n};\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    throw new Error(prefix + \": \" + (message || ''));\n}\n\nexport default invariant;\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { PoolSpecialization } from '../types';\nimport invariant from 'tiny-invariant';\n\n/**\n * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce\n * @param poolId - a bytes32 string of the pool's ID\n * @returns an object with the decomposed poolId\n */\nexport const splitPoolId = (\n  poolId: string\n): { address: string; specialization: PoolSpecialization; nonce: BigNumber } => {\n  return {\n    address: getPoolAddress(poolId),\n    specialization: getPoolSpecialization(poolId),\n    nonce: getPoolNonce(poolId),\n  };\n};\n\n/**\n * Extracts a pool's address from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's address\n */\nexport const getPoolAddress = (poolId: string): string => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return poolId.slice(0, 42);\n};\n\n/**\n * Extracts a pool's specialization from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's specialization\n */\nexport const getPoolSpecialization = (poolId: string): PoolSpecialization => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n\n  // Only have 3 pool specializations so we can just pull the relevant character\n  const specializationCode = parseInt(poolId[45]);\n  invariant(specializationCode < 3, 'Invalid pool specialization');\n\n  return specializationCode;\n};\n\n/**\n * Extracts a pool's nonce from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's nonce\n */\nexport const getPoolNonce = (poolId: string): BigNumber => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return BigNumber.from(`0x${poolId.slice(46)}`);\n};\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\n// RECOVERY_MODE must match BasePoolUserData.RECOVERY_MODE_EXIT_KIND, the value that\n// (Legacy)BasePool uses to detect the special exit enabled in recovery mode.\nexport enum BasePoolExitKind {\n  RECOVERY_MODE = 255,\n}\n\nexport class BasePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting any Pool in recovery mode, by removing tokens in return for\n   * an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static recoveryModeExit = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [BasePoolExitKind.RECOVERY_MODE, bptAmountIn]);\n}\n","const balancerErrorCodes: Record<string, string> = {\n  '000': 'ADD_OVERFLOW',\n  '001': 'SUB_OVERFLOW',\n  '002': 'SUB_UNDERFLOW',\n  '003': 'MUL_OVERFLOW',\n  '004': 'ZERO_DIVISION',\n  '005': 'DIV_INTERNAL',\n  '006': 'X_OUT_OF_BOUNDS',\n  '007': 'Y_OUT_OF_BOUNDS',\n  '008': 'PRODUCT_OUT_OF_BOUNDS',\n  '009': 'INVALID_EXPONENT',\n  '100': 'OUT_OF_BOUNDS',\n  '101': 'UNSORTED_ARRAY',\n  '102': 'UNSORTED_TOKENS',\n  '103': 'INPUT_LENGTH_MISMATCH',\n  '104': 'ZERO_TOKEN',\n  '200': 'MIN_TOKENS',\n  '201': 'MAX_TOKENS',\n  '202': 'MAX_SWAP_FEE_PERCENTAGE',\n  '203': 'MIN_SWAP_FEE_PERCENTAGE',\n  '204': 'MINIMUM_BPT',\n  '205': 'CALLER_NOT_VAULT',\n  '206': 'UNINITIALIZED',\n  '207': 'BPT_IN_MAX_AMOUNT',\n  '208': 'BPT_OUT_MIN_AMOUNT',\n  '209': 'EXPIRED_PERMIT',\n  '210': 'NOT_TWO_TOKENS',\n  '211': 'DISABLED',\n  '300': 'MIN_AMP',\n  '301': 'MAX_AMP',\n  '302': 'MIN_WEIGHT',\n  '303': 'MAX_STABLE_TOKENS',\n  '304': 'MAX_IN_RATIO',\n  '305': 'MAX_OUT_RATIO',\n  '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',\n  '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',\n  '308': 'NORMALIZED_WEIGHT_INVARIANT',\n  '309': 'INVALID_TOKEN',\n  '310': 'UNHANDLED_JOIN_KIND',\n  '311': 'ZERO_INVARIANT',\n  '312': 'ORACLE_INVALID_SECONDS_QUERY',\n  '313': 'ORACLE_NOT_INITIALIZED',\n  '314': 'ORACLE_QUERY_TOO_OLD',\n  '315': 'ORACLE_INVALID_INDEX',\n  '316': 'ORACLE_BAD_SECS',\n  '317': 'AMP_END_TIME_TOO_CLOSE',\n  '318': 'AMP_ONGOING_UPDATE',\n  '319': 'AMP_RATE_TOO_HIGH',\n  '320': 'AMP_NO_ONGOING_UPDATE',\n  '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',\n  '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',\n  '323': 'RELAYER_NOT_CONTRACT',\n  '324': 'BASE_POOL_RELAYER_NOT_CALLED',\n  '325': 'REBALANCING_RELAYER_REENTERED',\n  '326': 'GRADUAL_UPDATE_TIME_TRAVEL',\n  '327': 'SWAPS_DISABLED',\n  '328': 'CALLER_IS_NOT_LBP_OWNER',\n  '329': 'PRICE_RATE_OVERFLOW',\n  '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',\n  '331': 'WEIGHT_CHANGE_TOO_FAST',\n  '332': 'LOWER_GREATER_THAN_UPPER_TARGET',\n  '333': 'UPPER_TARGET_TOO_HIGH',\n  '334': 'UNHANDLED_BY_LINEAR_POOL',\n  '335': 'OUT_OF_TARGET_RANGE',\n  '336': 'UNHANDLED_EXIT_KIND',\n  '337': 'UNAUTHORIZED_EXIT',\n  '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',\n  '339': 'UNHANDLED_BY_MANAGED_POOL',\n  '340': 'UNHANDLED_BY_PHANTOM_POOL',\n  '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',\n  '342': 'INVALID_INITIALIZATION',\n  '343': 'OUT_OF_NEW_TARGET_RANGE',\n  '344': 'FEATURE_DISABLED',\n  '345': 'UNINITIALIZED_POOL_CONTROLLER',\n  '346': 'SET_SWAP_FEE_DURING_FEE_CHANGE',\n  '347': 'SET_SWAP_FEE_PENDING_FEE_CHANGE',\n  '348': 'CHANGE_TOKENS_DURING_WEIGHT_CHANGE',\n  '349': 'CHANGE_TOKENS_PENDING_WEIGHT_CHANGE',\n  '350': 'MAX_WEIGHT',\n  '351': 'UNAUTHORIZED_JOIN',\n  '352': 'MAX_MANAGEMENT_AUM_FEE_PERCENTAGE',\n  '353': 'FRACTIONAL_TARGET',\n  '354': 'ADD_OR_REMOVE_BPT',\n  '355': 'INVALID_CIRCUIT_BREAKER_BOUNDS',\n  '356': 'CIRCUIT_BREAKER_TRIPPED',\n  '400': 'REENTRANCY',\n  '401': 'SENDER_NOT_ALLOWED',\n  '402': 'PAUSED',\n  '403': 'PAUSE_WINDOW_EXPIRED',\n  '404': 'MAX_PAUSE_WINDOW_DURATION',\n  '405': 'MAX_BUFFER_PERIOD_DURATION',\n  '406': 'INSUFFICIENT_BALANCE',\n  '407': 'INSUFFICIENT_ALLOWANCE',\n  '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',\n  '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',\n  '410': 'ERC20_MINT_TO_ZERO_ADDRESS',\n  '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',\n  '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',\n  '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',\n  '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',\n  '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',\n  '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',\n  '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',\n  '418': 'SAFE_ERC20_CALL_FAILED',\n  '419': 'ADDRESS_INSUFFICIENT_BALANCE',\n  '420': 'ADDRESS_CANNOT_SEND_VALUE',\n  '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',\n  '422': 'GRANT_SENDER_NOT_ADMIN',\n  '423': 'REVOKE_SENDER_NOT_ADMIN',\n  '424': 'RENOUNCE_SENDER_NOT_ALLOWED',\n  '425': 'BUFFER_PERIOD_EXPIRED',\n  '426': 'CALLER_IS_NOT_OWNER',\n  '427': 'NEW_OWNER_IS_ZERO',\n  '428': 'CODE_DEPLOYMENT_FAILED',\n  '429': 'CALL_TO_NON_CONTRACT',\n  '430': 'LOW_LEVEL_CALL_FAILED',\n  '431': 'NOT_PAUSED',\n  '432': 'ADDRESS_ALREADY_ALLOWLISTED',\n  '433': 'ADDRESS_NOT_ALLOWLISTED',\n  '434': 'ERC20_BURN_EXCEEDS_BALANCE',\n  '435': 'INVALID_OPERATION',\n  '436': 'CODEC_OVERFLOW',\n  '437': 'IN_RECOVERY_MODE',\n  '438': 'NOT_IN_RECOVERY_MODE',\n  '439': 'INDUCED_FAILURE',\n  '440': 'EXPIRED_SIGNATURE',\n  '441': 'MALFORMED_SIGNATURE',\n  '442': 'SAFE_CAST_VALUE_CANT_FIT_UINT64',\n  '443': 'UNHANDLED_FEE_TYPE',\n  '444': 'BURN_FROM_ZERO',\n  '500': 'INVALID_POOL_ID',\n  '501': 'CALLER_NOT_POOL',\n  '502': 'SENDER_NOT_ASSET_MANAGER',\n  '503': 'USER_DOESNT_ALLOW_RELAYER',\n  '504': 'INVALID_SIGNATURE',\n  '505': 'EXIT_BELOW_MIN',\n  '506': 'JOIN_ABOVE_MAX',\n  '507': 'SWAP_LIMIT',\n  '508': 'SWAP_DEADLINE',\n  '509': 'CANNOT_SWAP_SAME_TOKEN',\n  '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',\n  '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',\n  '512': 'INTERNAL_BALANCE_OVERFLOW',\n  '513': 'INSUFFICIENT_INTERNAL_BALANCE',\n  '514': 'INVALID_ETH_INTERNAL_BALANCE',\n  '515': 'INVALID_POST_LOAN_BALANCE',\n  '516': 'INSUFFICIENT_ETH',\n  '517': 'UNALLOCATED_ETH',\n  '518': 'ETH_TRANSFER',\n  '519': 'CANNOT_USE_ETH_SENTINEL',\n  '520': 'TOKENS_MISMATCH',\n  '521': 'TOKEN_NOT_REGISTERED',\n  '522': 'TOKEN_ALREADY_REGISTERED',\n  '523': 'TOKENS_ALREADY_SET',\n  '524': 'TOKENS_LENGTH_MUST_BE_2',\n  '525': 'NONZERO_TOKEN_BALANCE',\n  '526': 'BALANCE_TOTAL_OVERFLOW',\n  '527': 'POOL_NO_TOKENS',\n  '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',\n  '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',\n  '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',\n  '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',\n  '603': 'AUM_FEE_PERCENTAGE_TOO_HIGH',\n  '700': 'SPLITTER_FEE_PERCENTAGE_TOO_HIGH',\n  '998': 'UNIMPLEMENTED',\n  '999': 'SHOULD_NOT_HAPPEN',\n};\n\nexport class BalancerErrors {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static isErrorCode = (error: string): boolean => {\n    if (!error.includes('BAL#')) return false;\n\n    const errorCode = error.replace('BAL#', '');\n    return Object.keys(balancerErrorCodes).includes(errorCode);\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason\n   */\n  static parseErrorCode = (error: string): string => {\n    if (!error.includes('BAL#')) throw new Error('Error code not found');\n    const errorCode = error.replace('BAL#', '');\n\n    const actualError = balancerErrorCodes[errorCode];\n\n    if (!actualError) throw new Error('Error code not found');\n\n    return actualError;\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason if passed a valid error code, otherwise returns passed input\n   */\n  static tryParseErrorCode = (error: string): string => {\n    try {\n      return BalancerErrors.parseErrorCode(error);\n    } catch {\n      return error;\n    }\n  };\n\n  /**\n   * Tests whether a string is a known Balancer error message\n   * @param error - a string to be checked verified as a Balancer error message\n   */\n  static isBalancerError = (error: string): boolean => Object.values(balancerErrorCodes).includes(error);\n\n  /**\n   * Encodes an error string into the corresponding error code\n   * @param error - a Balancer error message string\n   * @returns a Balancer error code of the form `BAL#000`\n   */\n  static encodeError = (error: string): string => {\n    const encodedError = Object.entries(balancerErrorCodes).find(([, message]) => message === error);\n\n    if (!encodedError) throw Error('Error message not found');\n\n    return `BAL#${encodedError[0]}`;\n  };\n}\n","import { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { hexValue, hexZeroPad, splitSignature } from '@ethersproject/bytes';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\n\nexport type Account = string | Signer | Contract;\n\nexport async function accountToAddress(account: Account): Promise<string> {\n  if (typeof account == 'string') return account;\n  if (Signer.isSigner(account)) return account.getAddress();\n  if (account.address) return account.address;\n  throw new Error('Could not read account address');\n}\n\nexport enum RelayerAction {\n  JoinPool = 'JoinPool',\n  ExitPool = 'ExitPool',\n  Swap = 'Swap',\n  BatchSwap = 'BatchSwap',\n  SetRelayerApproval = 'SetRelayerApproval',\n}\n\nexport class RelayerAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static encodeCalldataAuthorization = (calldata: string, deadline: BigNumberish, signature: string): string => {\n    const encodedDeadline = hexZeroPad(hexValue(deadline), 32).slice(2);\n    const { v, r, s } = splitSignature(signature);\n    const encodedV = hexZeroPad(hexValue(v), 32).slice(2);\n    const encodedR = r.slice(2);\n    const encodedS = s.slice(2);\n    return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;\n  };\n\n  static signJoinAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.JoinPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signExitAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.ExitPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.Swap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signBatchSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.BatchSwap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSetRelayerApprovalAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.SetRelayerApproval,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signAuthorizationFor = async (\n    type: RelayerAction,\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<string> => {\n    const { chainId } = await validator.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await validator.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer V2 Vault',\n      version: '1',\n      chainId,\n      verifyingContract: validator.address,\n    };\n\n    const types = {\n      [type]: [\n        { name: 'calldata', type: 'bytes' },\n        { name: 'sender', type: 'address' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      calldata: allowedCalldata,\n      sender: await accountToAddress(allowedSender),\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    return user._signTypedData(domain, types, value);\n  };\n}\n\nexport class BalancerMinterAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static signSetMinterApproval = async (\n    minterContract: Contract,\n    minter: Account,\n    approval: boolean,\n    user: Signer & TypedDataSigner,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<{ v: number; r: string; s: string; deadline: BigNumber }> => {\n    const { chainId } = await minterContract.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await minterContract.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer Minter',\n      version: '1',\n      chainId,\n      verifyingContract: minterContract.address,\n    };\n\n    const types = {\n      SetMinterApproval: [\n        { name: 'minter', type: 'address' },\n        { name: 'approval', type: 'bool' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      minter: await accountToAddress(minter),\n      approval,\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    const signature = await user._signTypedData(domain, types, value);\n\n    return { ...splitSignature(signature), deadline: BigNumber.from(deadline) };\n  };\n}\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { splitSignature } from '@ethersproject/bytes';\nimport { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { Account, accountToAddress } from './signatures';\n\nexport const signPermit = async (\n  token: Contract,\n  owner: Signer & TypedDataSigner,\n  spender: Account,\n  amount: BigNumberish,\n  deadline: BigNumberish = MAX_DEADLINE,\n  nonce?: BigNumberish\n): Promise<{ v: number; r: string; s: string; deadline: BigNumber; nonce: BigNumber }> => {\n  const { chainId } = await token.provider.getNetwork();\n  const ownerAddress = await owner.getAddress();\n\n  if (!nonce) nonce = (await token.nonces(ownerAddress)) as BigNumberish;\n\n  // Hack around some tokens not exposing a `version()` function.\n  // If they do then use it, otherwise assume that their version is \"1\".\n  let version = '1';\n  try {\n    if (token.version) {\n      version = await token.version();\n    }\n  } catch {\n    // eslint-disable-prev-line no-empty\n  }\n\n  const domain = {\n    name: await token.name(),\n    version,\n    chainId,\n    verifyingContract: token.address,\n  };\n\n  const types = {\n    Permit: [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ],\n  };\n\n  const value = {\n    owner: ownerAddress,\n    spender: await accountToAddress(spender),\n    value: amount,\n    nonce,\n    deadline,\n  };\n\n  const signature = await owner._signTypedData(domain, types, value);\n  return { ...splitSignature(signature), deadline: BigNumber.from(deadline), nonce: BigNumber.from(nonce) };\n};\n","import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport invariant from 'tiny-invariant';\n\nconst cmpTokens = (tokenA: string, tokenB: string): number => (tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1);\n\nconst transposeMatrix = (matrix: unknown[][]): unknown[][] =>\n  matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));\n\nexport class AssetHelpers {\n  public readonly ETH: string = AddressZero;\n  public readonly WETH: string;\n\n  constructor(wethAddress: string) {\n    this.WETH = getAddress(wethAddress);\n  }\n\n  static isEqual = (addressA: string, addressB: string): boolean => getAddress(addressA) === getAddress(addressB);\n\n  /**\n   * Tests whether `token` is ETH (represented by `0x0000...0000`).\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isETH = (token: string): boolean => AssetHelpers.isEqual(token, this.ETH);\n\n  /**\n   * Tests whether `token` is WETH.\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isWETH = (token: string): boolean => AssetHelpers.isEqual(token, this.WETH);\n\n  /**\n   * Converts an asset to the equivalent ERC20 address.\n   *\n   * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address\n   * @param token - the address of the asset to be translated to an equivalent ERC20\n   * @returns the address of translated ERC20 asset\n   */\n  translateToERC20 = (token: string): string => (this.isETH(token) ? this.WETH : token);\n\n  /**\n   * Sorts an array of token addresses into ascending order to match the format expected by the Vault.\n   *\n   * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.\n   *\n   * The zero address (representing ETH) is sorted as if it were the WETH address.\n   * This matches the behaviour expected by the Vault when receiving an array of addresses.\n   *\n   * @param tokens - an array of token addresses to be sorted in ascending order\n   * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses\n   * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`\n   *\n   * @example\n   * const [tokens] = sortTokens([tokenB, tokenC, tokenA])\n   * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])\n   * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]\n   */\n  sortTokens(tokens: string[], ...others: unknown[][]): [string[], ...unknown[][]] {\n    others.forEach((array) => invariant(tokens.length === array.length, 'array length mismatch'));\n\n    // We want to sort ETH as if were WETH so we translate to ERC20s\n    const erc20Tokens = tokens.map(this.translateToERC20);\n\n    const transpose = transposeMatrix([erc20Tokens, ...others]) as [string, ...unknown[]][];\n    const sortedTranspose = transpose.sort(([tokenA], [tokenB]) => cmpTokens(tokenA, tokenB));\n    const [sortedErc20s, ...sortedOthers] = transposeMatrix(sortedTranspose) as [string[], ...unknown[][]];\n\n    // If one of the tokens was ETH, we need to translate back from WETH\n    const sortedTokens = tokens.includes(this.ETH)\n      ? sortedErc20s.map((token) => (this.isWETH(token) ? this.ETH : token))\n      : sortedErc20s;\n    return [sortedTokens, ...sortedOthers];\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum PoolSpecialization {\n  GeneralPool = 0,\n  MinimalSwapInfoPool,\n  TwoTokenPool,\n}\n\nexport type FundManagement = {\n  sender: string;\n  fromInternalBalance: boolean;\n  recipient: string;\n  toInternalBalance: boolean;\n};\n\n// Swaps\n\nexport enum SwapKind {\n  GivenIn = 0,\n  GivenOut,\n}\n\nexport type SingleSwap = {\n  poolId: string;\n  kind: SwapKind;\n  assetIn: string;\n  assetOut: string;\n  amount: BigNumberish;\n  userData: string;\n};\n\nexport type Swap = {\n  kind: SwapKind;\n  singleSwap: SingleSwap;\n  limit: BigNumberish;\n  deadline: BigNumberish;\n};\n\nexport type BatchSwapStep = {\n  poolId: string;\n  assetInIndex: number;\n  assetOutIndex: number;\n  amount: BigNumberish;\n  userData: string;\n};\n\nexport type BatchSwap = {\n  kind: SwapKind;\n  swaps: BatchSwapStep[];\n  assets: string[];\n  funds: FundManagement;\n  limits: BigNumberish[];\n  deadline: BigNumberish;\n};\n\nexport type SwapRequest = {\n  kind: SwapKind;\n  tokenIn: string;\n  tokenOut: string;\n  amount: BigNumberish;\n  poolId: string;\n  lastChangeBlock: BigNumberish;\n  from: string;\n  to: string;\n  userData: string;\n};\n\n// Joins\n\nexport type JoinPoolRequest = {\n  assets: string[];\n  maxAmountsIn: BigNumberish[];\n  userData: string;\n  fromInternalBalance: boolean;\n};\n\n// Exit\n\nexport type ExitPoolRequest = {\n  assets: string[];\n  minAmountsOut: BigNumberish[];\n  userData: string;\n  toInternalBalance: boolean;\n};\n\n// Balance Operations\n\nexport enum UserBalanceOpKind {\n  DepositInternal = 0,\n  WithdrawInternal,\n  TransferInternal,\n  TransferExternal,\n}\n\nexport type UserBalanceOp = {\n  kind: UserBalanceOpKind;\n  asset: string;\n  amount: BigNumberish;\n  sender: string;\n  recipient: string;\n};\n\nexport enum PoolBalanceOpKind {\n  Withdraw = 0,\n  Deposit = 1,\n  Update = 2,\n}\n\nexport type PoolBalanceOp = {\n  kind: PoolBalanceOpKind;\n  poolId: string;\n  token: string;\n  amount: BigNumberish;\n};\n"],"names":["StablePoolJoinKind","StablePoolExitKind","defaultAbiCoder","WeightedPoolJoinKind","WeightedPoolExitKind","ONE","Zero","BigNumber","BasePoolExitKind","Signer","RelayerAction","hexZeroPad","hexValue","splitSignature","MAX_DEADLINE","AddressZero","getAddress","PoolSpecialization","SwapKind","UserBalanceOpKind","PoolBalanceOpKind"],"mappings":"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"}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts balancer-js/dist/index.umd.js balancer-js/dist/index.umd.js
--- balancer-js/dist/index.umd.js	2022-10-28 09:53:21.000000000 +0200
+++ balancer-js/dist/index.umd.js	1970-01-01 01:00:00.000000000 +0100
@@ -1,726 +0,0 @@
-(function (global, factory) {
-    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@ethersproject/abi'), require('@ethersproject/constants'), require('@ethersproject/bignumber'), require('@ethersproject/bytes'), require('@ethersproject/abstract-signer'), require('@ethersproject/address')) :
-    typeof define === 'function' && define.amd ? define(['exports', '@ethersproject/abi', '@ethersproject/constants', '@ethersproject/bignumber', '@ethersproject/bytes', '@ethersproject/abstract-signer', '@ethersproject/address'], factory) :
-    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['balancer-js'] = {}, global.abi, global.constants, global.bignumber, global.bytes, global.abstractSigner, global.address));
-}(this, (function (exports, abi, constants, bignumber, bytes, abstractSigner, address) { 'use strict';
-
-    exports.StablePoolJoinKind = void 0;
-    (function (StablePoolJoinKind) {
-        StablePoolJoinKind[StablePoolJoinKind["INIT"] = 0] = "INIT";
-        StablePoolJoinKind[StablePoolJoinKind["EXACT_TOKENS_IN_FOR_BPT_OUT"] = 1] = "EXACT_TOKENS_IN_FOR_BPT_OUT";
-        StablePoolJoinKind[StablePoolJoinKind["TOKEN_IN_FOR_EXACT_BPT_OUT"] = 2] = "TOKEN_IN_FOR_EXACT_BPT_OUT";
-    })(exports.StablePoolJoinKind || (exports.StablePoolJoinKind = {}));
-    exports.StablePoolExitKind = void 0;
-    (function (StablePoolExitKind) {
-        StablePoolExitKind[StablePoolExitKind["EXACT_BPT_IN_FOR_ONE_TOKEN_OUT"] = 0] = "EXACT_BPT_IN_FOR_ONE_TOKEN_OUT";
-        StablePoolExitKind[StablePoolExitKind["BPT_IN_FOR_EXACT_TOKENS_OUT"] = 1] = "BPT_IN_FOR_EXACT_TOKENS_OUT";
-    })(exports.StablePoolExitKind || (exports.StablePoolExitKind = {}));
-    class StablePoolEncoder {
-        /**
-         * Cannot be constructed.
-         */
-        constructor() {
-            // eslint-disable-next-line @typescript-eslint/no-empty-function
-        }
-    }
-    /**
-     * Encodes the userData parameter for providing the initial liquidity to a StablePool
-     * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances
-     */
-    StablePoolEncoder.joinInit = (amountsIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]'], [exports.StablePoolJoinKind.INIT, amountsIn]);
-    /**
-     * Encodes the userData parameter for joining a StablePool with exact token inputs
-     * @param amountsIn - the amounts each of token to deposit in the pool as liquidity
-     * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens
-     */
-    StablePoolEncoder.joinExactTokensInForBPTOut = (amountsIn, minimumBPT) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [exports.StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]);
-    /**
-     * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT
-     * @param bptAmountOut - the amount of BPT to be minted
-     * @param enterTokenIndex - the index of the token to be provided as liquidity
-     */
-    StablePoolEncoder.joinTokenInForExactBPTOut = (bptAmountOut, enterTokenIndex) => abi.defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [exports.StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]);
-    /**
-     * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT
-     * @param bptAmountIn - the amount of BPT to be burned
-     * @param enterTokenIndex - the index of the token to removed from the pool
-     */
-    StablePoolEncoder.exitExactBPTInForOneTokenOut = (bptAmountIn, exitTokenIndex) => abi.defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [exports.StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]);
-    /**
-     * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens
-     * @param amountsOut - the amounts of each token to be withdrawn from the pool
-     * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens
-     */
-    StablePoolEncoder.exitBPTInForExactTokensOut = (amountsOut, maxBPTAmountIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [exports.StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]);
-
-    exports.WeightedPoolJoinKind = void 0;
-    (function (WeightedPoolJoinKind) {
-        WeightedPoolJoinKind[WeightedPoolJoinKind["INIT"] = 0] = "INIT";
-        WeightedPoolJoinKind[WeightedPoolJoinKind["EXACT_TOKENS_IN_FOR_BPT_OUT"] = 1] = "EXACT_TOKENS_IN_FOR_BPT_OUT";
-        WeightedPoolJoinKind[WeightedPoolJoinKind["TOKEN_IN_FOR_EXACT_BPT_OUT"] = 2] = "TOKEN_IN_FOR_EXACT_BPT_OUT";
-        WeightedPoolJoinKind[WeightedPoolJoinKind["ALL_TOKENS_IN_FOR_EXACT_BPT_OUT"] = 3] = "ALL_TOKENS_IN_FOR_EXACT_BPT_OUT";
-        WeightedPoolJoinKind[WeightedPoolJoinKind["ADD_TOKEN"] = 4] = "ADD_TOKEN";
-    })(exports.WeightedPoolJoinKind || (exports.WeightedPoolJoinKind = {}));
-    exports.WeightedPoolExitKind = void 0;
-    (function (WeightedPoolExitKind) {
-        WeightedPoolExitKind[WeightedPoolExitKind["EXACT_BPT_IN_FOR_ONE_TOKEN_OUT"] = 0] = "EXACT_BPT_IN_FOR_ONE_TOKEN_OUT";
-        WeightedPoolExitKind[WeightedPoolExitKind["EXACT_BPT_IN_FOR_TOKENS_OUT"] = 1] = "EXACT_BPT_IN_FOR_TOKENS_OUT";
-        WeightedPoolExitKind[WeightedPoolExitKind["BPT_IN_FOR_EXACT_TOKENS_OUT"] = 2] = "BPT_IN_FOR_EXACT_TOKENS_OUT";
-        WeightedPoolExitKind[WeightedPoolExitKind["REMOVE_TOKEN"] = 3] = "REMOVE_TOKEN";
-    })(exports.WeightedPoolExitKind || (exports.WeightedPoolExitKind = {}));
-    class WeightedPoolEncoder {
-        /**
-         * Cannot be constructed.
-         */
-        constructor() {
-            // eslint-disable-next-line @typescript-eslint/no-empty-function
-        }
-    }
-    /**
-     * Encodes the userData parameter for providing the initial liquidity to a WeightedPool
-     * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances
-     */
-    WeightedPoolEncoder.joinInit = (amountsIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]'], [exports.WeightedPoolJoinKind.INIT, amountsIn]);
-    /**
-     * Encodes the userData parameter for joining a WeightedPool with exact token inputs
-     * @param amountsIn - the amounts each of token to deposit in the pool as liquidity
-     * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens
-     */
-    WeightedPoolEncoder.joinExactTokensInForBPTOut = (amountsIn, minimumBPT) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [exports.WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]);
-    /**
-     * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT
-     * @param bptAmountOut - the amount of BPT to be minted
-     * @param enterTokenIndex - the index of the token to be provided as liquidity
-     */
-    WeightedPoolEncoder.joinTokenInForExactBPTOut = (bptAmountOut, enterTokenIndex) => abi.defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [exports.WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]);
-    /**
-     * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT
-     * @param bptAmountOut - the amount of BPT to be minted
-     */
-    WeightedPoolEncoder.joinAllTokensInForExactBPTOut = (bptAmountOut) => abi.defaultAbiCoder.encode(['uint256', 'uint256'], [exports.WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]);
-    /**
-     * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT
-     * @param bptAmountIn - the amount of BPT to be burned
-     * @param enterTokenIndex - the index of the token to removed from the pool
-     */
-    WeightedPoolEncoder.exitExactBPTInForOneTokenOut = (bptAmountIn, exitTokenIndex) => abi.defaultAbiCoder.encode(['uint256', 'uint256', 'uint256'], [exports.WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]);
-    /**
-     * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT
-     * @param bptAmountIn - the amount of BPT to be burned
-     */
-    WeightedPoolEncoder.exitExactBPTInForTokensOut = (bptAmountIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256'], [exports.WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]);
-    /**
-     * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens
-     * @param amountsOut - the amounts of each token to be withdrawn from the pool
-     * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens
-     */
-    WeightedPoolEncoder.exitBPTInForExactTokensOut = (amountsOut, maxBPTAmountIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256[]', 'uint256'], [exports.WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]);
-    class ManagedPoolEncoder {
-        /**
-         * Cannot be constructed.
-         */
-        constructor() {
-            // eslint-disable-next-line @typescript-eslint/no-empty-function
-        }
-    }
-    /**
-     * Encodes the userData parameter for exiting a ManagedPool to remove a token.
-     * This can only be done by the pool owner.
-     */
-    ManagedPoolEncoder.exitForRemoveToken = (tokenIndex) => abi.defaultAbiCoder.encode(['uint256', 'uint256'], [exports.WeightedPoolExitKind.REMOVE_TOKEN, tokenIndex]);
-
-    // Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants
-    // Including would introduce a dependency
-    const MaxWeightedTokens = 100;
-    /**
-     * Normalize an array of token weights to ensure they sum to `1e18`
-     * @param weights - an array of token weights to be normalized
-     * @returns an equivalent set of normalized weights
-     */
-    function toNormalizedWeights(weights) {
-        // When the number is exactly equal to the max, normalizing with common inputs
-        // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.
-        if (weights.length == MaxWeightedTokens) {
-            return Array(MaxWeightedTokens).fill(constants.WeiPerEther.div(MaxWeightedTokens));
-        }
-        const sum = weights.reduce((total, weight) => total.add(weight), constants.Zero);
-        if (sum.eq(constants.WeiPerEther))
-            return weights;
-        const normalizedWeights = [];
-        let normalizedSum = constants.Zero;
-        for (let index = 0; index < weights.length; index++) {
-            if (index < weights.length - 1) {
-                normalizedWeights[index] = weights[index].mul(constants.WeiPerEther).div(sum);
-                normalizedSum = normalizedSum.add(normalizedWeights[index]);
-            }
-            else {
-                normalizedWeights[index] = constants.WeiPerEther.sub(normalizedSum);
-            }
-        }
-        return normalizedWeights;
-    }
-    /**
-     * Check whether a set of weights are normalized
-     * @param weights - an array of potentially unnormalized weights
-     * @returns a boolean of whether the weights are normalized
-     */
-    const isNormalizedWeights = (weights) => {
-        const totalWeight = weights.reduce((total, weight) => total.add(weight), constants.Zero);
-        return totalWeight.eq(constants.WeiPerEther);
-    };
-
-    var isProduction = process.env.NODE_ENV === 'production';
-    var prefix = 'Invariant failed';
-    function invariant(condition, message) {
-        if (condition) {
-            return;
-        }
-        if (isProduction) {
-            throw new Error(prefix);
-        }
-        throw new Error(prefix + ": " + (message || ''));
-    }
-
-    /**
-     * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce
-     * @param poolId - a bytes32 string of the pool's ID
-     * @returns an object with the decomposed poolId
-     */
-    const splitPoolId = (poolId) => {
-        return {
-            address: getPoolAddress(poolId),
-            specialization: getPoolSpecialization(poolId),
-            nonce: getPoolNonce(poolId),
-        };
-    };
-    /**
-     * Extracts a pool's address from its poolId
-     * @param poolId - a bytes32 string of the pool's ID
-     * @returns the pool's address
-     */
-    const getPoolAddress = (poolId) => {
-        invariant(poolId.length === 66, 'Invalid poolId length');
-        return poolId.slice(0, 42);
-    };
-    /**
-     * Extracts a pool's specialization from its poolId
-     * @param poolId - a bytes32 string of the pool's ID
-     * @returns the pool's specialization
-     */
-    const getPoolSpecialization = (poolId) => {
-        invariant(poolId.length === 66, 'Invalid poolId length');
-        // Only have 3 pool specializations so we can just pull the relevant character
-        const specializationCode = parseInt(poolId[45]);
-        invariant(specializationCode < 3, 'Invalid pool specialization');
-        return specializationCode;
-    };
-    /**
-     * Extracts a pool's nonce from its poolId
-     * @param poolId - a bytes32 string of the pool's ID
-     * @returns the pool's nonce
-     */
-    const getPoolNonce = (poolId) => {
-        invariant(poolId.length === 66, 'Invalid poolId length');
-        return bignumber.BigNumber.from(`0x${poolId.slice(46)}`);
-    };
-
-    // RECOVERY_MODE must match BasePoolUserData.RECOVERY_MODE_EXIT_KIND, the value that
-    // (Legacy)BasePool uses to detect the special exit enabled in recovery mode.
-    exports.BasePoolExitKind = void 0;
-    (function (BasePoolExitKind) {
-        BasePoolExitKind[BasePoolExitKind["RECOVERY_MODE"] = 255] = "RECOVERY_MODE";
-    })(exports.BasePoolExitKind || (exports.BasePoolExitKind = {}));
-    class BasePoolEncoder {
-        /**
-         * Cannot be constructed.
-         */
-        constructor() {
-            // eslint-disable-next-line @typescript-eslint/no-empty-function
-        }
-    }
-    /**
-     * Encodes the userData parameter for exiting any Pool in recovery mode, by removing tokens in return for
-     * an exact amount of BPT
-     * @param bptAmountIn - the amount of BPT to be burned
-     */
-    BasePoolEncoder.recoveryModeExit = (bptAmountIn) => abi.defaultAbiCoder.encode(['uint256', 'uint256'], [exports.BasePoolExitKind.RECOVERY_MODE, bptAmountIn]);
-
-    const balancerErrorCodes = {
-        '000': 'ADD_OVERFLOW',
-        '001': 'SUB_OVERFLOW',
-        '002': 'SUB_UNDERFLOW',
-        '003': 'MUL_OVERFLOW',
-        '004': 'ZERO_DIVISION',
-        '005': 'DIV_INTERNAL',
-        '006': 'X_OUT_OF_BOUNDS',
-        '007': 'Y_OUT_OF_BOUNDS',
-        '008': 'PRODUCT_OUT_OF_BOUNDS',
-        '009': 'INVALID_EXPONENT',
-        '100': 'OUT_OF_BOUNDS',
-        '101': 'UNSORTED_ARRAY',
-        '102': 'UNSORTED_TOKENS',
-        '103': 'INPUT_LENGTH_MISMATCH',
-        '104': 'ZERO_TOKEN',
-        '200': 'MIN_TOKENS',
-        '201': 'MAX_TOKENS',
-        '202': 'MAX_SWAP_FEE_PERCENTAGE',
-        '203': 'MIN_SWAP_FEE_PERCENTAGE',
-        '204': 'MINIMUM_BPT',
-        '205': 'CALLER_NOT_VAULT',
-        '206': 'UNINITIALIZED',
-        '207': 'BPT_IN_MAX_AMOUNT',
-        '208': 'BPT_OUT_MIN_AMOUNT',
-        '209': 'EXPIRED_PERMIT',
-        '210': 'NOT_TWO_TOKENS',
-        '211': 'DISABLED',
-        '300': 'MIN_AMP',
-        '301': 'MAX_AMP',
-        '302': 'MIN_WEIGHT',
-        '303': 'MAX_STABLE_TOKENS',
-        '304': 'MAX_IN_RATIO',
-        '305': 'MAX_OUT_RATIO',
-        '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',
-        '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',
-        '308': 'NORMALIZED_WEIGHT_INVARIANT',
-        '309': 'INVALID_TOKEN',
-        '310': 'UNHANDLED_JOIN_KIND',
-        '311': 'ZERO_INVARIANT',
-        '312': 'ORACLE_INVALID_SECONDS_QUERY',
-        '313': 'ORACLE_NOT_INITIALIZED',
-        '314': 'ORACLE_QUERY_TOO_OLD',
-        '315': 'ORACLE_INVALID_INDEX',
-        '316': 'ORACLE_BAD_SECS',
-        '317': 'AMP_END_TIME_TOO_CLOSE',
-        '318': 'AMP_ONGOING_UPDATE',
-        '319': 'AMP_RATE_TOO_HIGH',
-        '320': 'AMP_NO_ONGOING_UPDATE',
-        '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',
-        '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',
-        '323': 'RELAYER_NOT_CONTRACT',
-        '324': 'BASE_POOL_RELAYER_NOT_CALLED',
-        '325': 'REBALANCING_RELAYER_REENTERED',
-        '326': 'GRADUAL_UPDATE_TIME_TRAVEL',
-        '327': 'SWAPS_DISABLED',
-        '328': 'CALLER_IS_NOT_LBP_OWNER',
-        '329': 'PRICE_RATE_OVERFLOW',
-        '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',
-        '331': 'WEIGHT_CHANGE_TOO_FAST',
-        '332': 'LOWER_GREATER_THAN_UPPER_TARGET',
-        '333': 'UPPER_TARGET_TOO_HIGH',
-        '334': 'UNHANDLED_BY_LINEAR_POOL',
-        '335': 'OUT_OF_TARGET_RANGE',
-        '336': 'UNHANDLED_EXIT_KIND',
-        '337': 'UNAUTHORIZED_EXIT',
-        '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',
-        '339': 'UNHANDLED_BY_MANAGED_POOL',
-        '340': 'UNHANDLED_BY_PHANTOM_POOL',
-        '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',
-        '342': 'INVALID_INITIALIZATION',
-        '343': 'OUT_OF_NEW_TARGET_RANGE',
-        '344': 'FEATURE_DISABLED',
-        '345': 'UNINITIALIZED_POOL_CONTROLLER',
-        '346': 'SET_SWAP_FEE_DURING_FEE_CHANGE',
-        '347': 'SET_SWAP_FEE_PENDING_FEE_CHANGE',
-        '348': 'CHANGE_TOKENS_DURING_WEIGHT_CHANGE',
-        '349': 'CHANGE_TOKENS_PENDING_WEIGHT_CHANGE',
-        '350': 'MAX_WEIGHT',
-        '351': 'UNAUTHORIZED_JOIN',
-        '352': 'MAX_MANAGEMENT_AUM_FEE_PERCENTAGE',
-        '353': 'FRACTIONAL_TARGET',
-        '354': 'ADD_OR_REMOVE_BPT',
-        '355': 'INVALID_CIRCUIT_BREAKER_BOUNDS',
-        '356': 'CIRCUIT_BREAKER_TRIPPED',
-        '400': 'REENTRANCY',
-        '401': 'SENDER_NOT_ALLOWED',
-        '402': 'PAUSED',
-        '403': 'PAUSE_WINDOW_EXPIRED',
-        '404': 'MAX_PAUSE_WINDOW_DURATION',
-        '405': 'MAX_BUFFER_PERIOD_DURATION',
-        '406': 'INSUFFICIENT_BALANCE',
-        '407': 'INSUFFICIENT_ALLOWANCE',
-        '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',
-        '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',
-        '410': 'ERC20_MINT_TO_ZERO_ADDRESS',
-        '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',
-        '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',
-        '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',
-        '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',
-        '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',
-        '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',
-        '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',
-        '418': 'SAFE_ERC20_CALL_FAILED',
-        '419': 'ADDRESS_INSUFFICIENT_BALANCE',
-        '420': 'ADDRESS_CANNOT_SEND_VALUE',
-        '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',
-        '422': 'GRANT_SENDER_NOT_ADMIN',
-        '423': 'REVOKE_SENDER_NOT_ADMIN',
-        '424': 'RENOUNCE_SENDER_NOT_ALLOWED',
-        '425': 'BUFFER_PERIOD_EXPIRED',
-        '426': 'CALLER_IS_NOT_OWNER',
-        '427': 'NEW_OWNER_IS_ZERO',
-        '428': 'CODE_DEPLOYMENT_FAILED',
-        '429': 'CALL_TO_NON_CONTRACT',
-        '430': 'LOW_LEVEL_CALL_FAILED',
-        '431': 'NOT_PAUSED',
-        '432': 'ADDRESS_ALREADY_ALLOWLISTED',
-        '433': 'ADDRESS_NOT_ALLOWLISTED',
-        '434': 'ERC20_BURN_EXCEEDS_BALANCE',
-        '435': 'INVALID_OPERATION',
-        '436': 'CODEC_OVERFLOW',
-        '437': 'IN_RECOVERY_MODE',
-        '438': 'NOT_IN_RECOVERY_MODE',
-        '439': 'INDUCED_FAILURE',
-        '440': 'EXPIRED_SIGNATURE',
-        '441': 'MALFORMED_SIGNATURE',
-        '442': 'SAFE_CAST_VALUE_CANT_FIT_UINT64',
-        '443': 'UNHANDLED_FEE_TYPE',
-        '444': 'BURN_FROM_ZERO',
-        '500': 'INVALID_POOL_ID',
-        '501': 'CALLER_NOT_POOL',
-        '502': 'SENDER_NOT_ASSET_MANAGER',
-        '503': 'USER_DOESNT_ALLOW_RELAYER',
-        '504': 'INVALID_SIGNATURE',
-        '505': 'EXIT_BELOW_MIN',
-        '506': 'JOIN_ABOVE_MAX',
-        '507': 'SWAP_LIMIT',
-        '508': 'SWAP_DEADLINE',
-        '509': 'CANNOT_SWAP_SAME_TOKEN',
-        '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',
-        '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',
-        '512': 'INTERNAL_BALANCE_OVERFLOW',
-        '513': 'INSUFFICIENT_INTERNAL_BALANCE',
-        '514': 'INVALID_ETH_INTERNAL_BALANCE',
-        '515': 'INVALID_POST_LOAN_BALANCE',
-        '516': 'INSUFFICIENT_ETH',
-        '517': 'UNALLOCATED_ETH',
-        '518': 'ETH_TRANSFER',
-        '519': 'CANNOT_USE_ETH_SENTINEL',
-        '520': 'TOKENS_MISMATCH',
-        '521': 'TOKEN_NOT_REGISTERED',
-        '522': 'TOKEN_ALREADY_REGISTERED',
-        '523': 'TOKENS_ALREADY_SET',
-        '524': 'TOKENS_LENGTH_MUST_BE_2',
-        '525': 'NONZERO_TOKEN_BALANCE',
-        '526': 'BALANCE_TOTAL_OVERFLOW',
-        '527': 'POOL_NO_TOKENS',
-        '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',
-        '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',
-        '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',
-        '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',
-        '603': 'AUM_FEE_PERCENTAGE_TOO_HIGH',
-        '700': 'SPLITTER_FEE_PERCENTAGE_TOO_HIGH',
-        '998': 'UNIMPLEMENTED',
-        '999': 'SHOULD_NOT_HAPPEN',
-    };
-    class BalancerErrors {
-        /**
-         * Cannot be constructed.
-         */
-        constructor() {
-            // eslint-disable-next-line @typescript-eslint/no-empty-function
-        }
-    }
-    BalancerErrors.isErrorCode = (error) => {
-        if (!error.includes('BAL#'))
-            return false;
-        const errorCode = error.replace('BAL#', '');
-        return Object.keys(balancerErrorCodes).includes(errorCode);
-    };
-    /**
-     * Decodes a Balancer error code into the corresponding reason
-     * @param error - a Balancer error code of the form `BAL#000`
-     * @returns The decoded error reason
-     */
-    BalancerErrors.parseErrorCode = (error) => {
-        if (!error.includes('BAL#'))
-            throw new Error('Error code not found');
-        const errorCode = error.replace('BAL#', '');
-        const actualError = balancerErrorCodes[errorCode];
-        if (!actualError)
-            throw new Error('Error code not found');
-        return actualError;
-    };
-    /**
-     * Decodes a Balancer error code into the corresponding reason
-     * @param error - a Balancer error code of the form `BAL#000`
-     * @returns The decoded error reason if passed a valid error code, otherwise returns passed input
-     */
-    BalancerErrors.tryParseErrorCode = (error) => {
-        try {
-            return BalancerErrors.parseErrorCode(error);
-        }
-        catch {
-            return error;
-        }
-    };
-    /**
-     * Tests whether a string is a known Balancer error message
-     * @param error - a string to be checked verified as a Balancer error message
-     */
-    BalancerErrors.isBalancerError = (error) => Object.values(balancerErrorCodes).includes(error);
-    /**
-     * Encodes an error string into the corresponding error code
-     * @param error - a Balancer error message string
-     * @returns a Balancer error code of the form `BAL#000`
-     */
-    BalancerErrors.encodeError = (error) => {
-        const encodedError = Object.entries(balancerErrorCodes).find(([, message]) => message === error);
-        if (!encodedError)
-            throw Error('Error message not found');
-        return `BAL#${encodedError[0]}`;
-    };
-
-    async function accountToAddress(account) {
-        if (typeof account == 'string')
-            return account;
-        if (abstractSigner.Signer.isSigner(account))
-            return account.getAddress();
-        if (account.address)
-            return account.address;
-        throw new Error('Could not read account address');
-    }
-    exports.RelayerAction = void 0;
-    (function (RelayerAction) {
-        RelayerAction["JoinPool"] = "JoinPool";
-        RelayerAction["ExitPool"] = "ExitPool";
-        RelayerAction["Swap"] = "Swap";
-        RelayerAction["BatchSwap"] = "BatchSwap";
-        RelayerAction["SetRelayerApproval"] = "SetRelayerApproval";
-    })(exports.RelayerAction || (exports.RelayerAction = {}));
-    class RelayerAuthorization {
-        /**
-         * Cannot be constructed.
-         */
-        constructor() {
-            // eslint-disable-next-line @typescript-eslint/no-empty-function
-        }
-    }
-    RelayerAuthorization.encodeCalldataAuthorization = (calldata, deadline, signature) => {
-        const encodedDeadline = bytes.hexZeroPad(bytes.hexValue(deadline), 32).slice(2);
-        const { v, r, s } = bytes.splitSignature(signature);
-        const encodedV = bytes.hexZeroPad(bytes.hexValue(v), 32).slice(2);
-        const encodedR = r.slice(2);
-        const encodedS = s.slice(2);
-        return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;
-    };
-    RelayerAuthorization.signJoinAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(exports.RelayerAction.JoinPool, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-    RelayerAuthorization.signExitAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(exports.RelayerAction.ExitPool, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-    RelayerAuthorization.signSwapAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(exports.RelayerAction.Swap, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-    RelayerAuthorization.signBatchSwapAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(exports.RelayerAction.BatchSwap, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-    RelayerAuthorization.signSetRelayerApprovalAuthorization = (validator, user, allowedSender, allowedCalldata, deadline, nonce) => RelayerAuthorization.signAuthorizationFor(exports.RelayerAction.SetRelayerApproval, validator, user, allowedSender, allowedCalldata, deadline, nonce);
-    RelayerAuthorization.signAuthorizationFor = async (type, validator, user, allowedSender, allowedCalldata, deadline = constants.MaxUint256, nonce) => {
-        const { chainId } = await validator.provider.getNetwork();
-        if (!nonce) {
-            const userAddress = await user.getAddress();
-            nonce = (await validator.getNextNonce(userAddress));
-        }
-        const domain = {
-            name: 'Balancer V2 Vault',
-            version: '1',
-            chainId,
-            verifyingContract: validator.address,
-        };
-        const types = {
-            [type]: [
-                { name: 'calldata', type: 'bytes' },
-                { name: 'sender', type: 'address' },
-                { name: 'nonce', type: 'uint256' },
-                { name: 'deadline', type: 'uint256' },
-            ],
-        };
-        const value = {
-            calldata: allowedCalldata,
-            sender: await accountToAddress(allowedSender),
-            nonce: nonce.toString(),
-            deadline: deadline.toString(),
-        };
-        return user._signTypedData(domain, types, value);
-    };
-    class BalancerMinterAuthorization {
-        /**
-         * Cannot be constructed.
-         */
-        constructor() {
-            // eslint-disable-next-line @typescript-eslint/no-empty-function
-        }
-    }
-    BalancerMinterAuthorization.signSetMinterApproval = async (minterContract, minter, approval, user, deadline = constants.MaxUint256, nonce) => {
-        const { chainId } = await minterContract.provider.getNetwork();
-        if (!nonce) {
-            const userAddress = await user.getAddress();
-            nonce = (await minterContract.getNextNonce(userAddress));
-        }
-        const domain = {
-            name: 'Balancer Minter',
-            version: '1',
-            chainId,
-            verifyingContract: minterContract.address,
-        };
-        const types = {
-            SetMinterApproval: [
-                { name: 'minter', type: 'address' },
-                { name: 'approval', type: 'bool' },
-                { name: 'nonce', type: 'uint256' },
-                { name: 'deadline', type: 'uint256' },
-            ],
-        };
-        const value = {
-            minter: await accountToAddress(minter),
-            approval,
-            nonce: nonce.toString(),
-            deadline: deadline.toString(),
-        };
-        const signature = await user._signTypedData(domain, types, value);
-        return { ...bytes.splitSignature(signature), deadline: bignumber.BigNumber.from(deadline) };
-    };
-
-    const signPermit = async (token, owner, spender, amount, deadline = constants.MaxUint256, nonce) => {
-        const { chainId } = await token.provider.getNetwork();
-        const ownerAddress = await owner.getAddress();
-        if (!nonce)
-            nonce = (await token.nonces(ownerAddress));
-        // Hack around some tokens not exposing a `version()` function.
-        // If they do then use it, otherwise assume that their version is "1".
-        let version = '1';
-        try {
-            if (token.version) {
-                version = await token.version();
-            }
-        }
-        catch {
-            // eslint-disable-prev-line no-empty
-        }
-        const domain = {
-            name: await token.name(),
-            version,
-            chainId,
-            verifyingContract: token.address,
-        };
-        const types = {
-            Permit: [
-                { name: 'owner', type: 'address' },
-                { name: 'spender', type: 'address' },
-                { name: 'value', type: 'uint256' },
-                { name: 'nonce', type: 'uint256' },
-                { name: 'deadline', type: 'uint256' },
-            ],
-        };
-        const value = {
-            owner: ownerAddress,
-            spender: await accountToAddress(spender),
-            value: amount,
-            nonce,
-            deadline,
-        };
-        const signature = await owner._signTypedData(domain, types, value);
-        return { ...bytes.splitSignature(signature), deadline: bignumber.BigNumber.from(deadline), nonce: bignumber.BigNumber.from(nonce) };
-    };
-
-    const cmpTokens = (tokenA, tokenB) => (tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1);
-    const transposeMatrix = (matrix) => matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));
-    class AssetHelpers {
-        constructor(wethAddress) {
-            this.ETH = constants.AddressZero;
-            /**
-             * Tests whether `token` is ETH (represented by `0x0000...0000`).
-             *
-             * @param token - the address of the asset to be checked
-             */
-            this.isETH = (token) => AssetHelpers.isEqual(token, this.ETH);
-            /**
-             * Tests whether `token` is WETH.
-             *
-             * @param token - the address of the asset to be checked
-             */
-            this.isWETH = (token) => AssetHelpers.isEqual(token, this.WETH);
-            /**
-             * Converts an asset to the equivalent ERC20 address.
-             *
-             * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address
-             * @param token - the address of the asset to be translated to an equivalent ERC20
-             * @returns the address of translated ERC20 asset
-             */
-            this.translateToERC20 = (token) => (this.isETH(token) ? this.WETH : token);
-            this.WETH = address.getAddress(wethAddress);
-        }
-        /**
-         * Sorts an array of token addresses into ascending order to match the format expected by the Vault.
-         *
-         * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.
-         *
-         * The zero address (representing ETH) is sorted as if it were the WETH address.
-         * This matches the behaviour expected by the Vault when receiving an array of addresses.
-         *
-         * @param tokens - an array of token addresses to be sorted in ascending order
-         * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses
-         * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`
-         *
-         * @example
-         * const [tokens] = sortTokens([tokenB, tokenC, tokenA])
-         * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])
-         * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]
-         */
-        sortTokens(tokens, ...others) {
-            others.forEach((array) => invariant(tokens.length === array.length, 'array length mismatch'));
-            // We want to sort ETH as if were WETH so we translate to ERC20s
-            const erc20Tokens = tokens.map(this.translateToERC20);
-            const transpose = transposeMatrix([erc20Tokens, ...others]);
-            const sortedTranspose = transpose.sort(([tokenA], [tokenB]) => cmpTokens(tokenA, tokenB));
-            const [sortedErc20s, ...sortedOthers] = transposeMatrix(sortedTranspose);
-            // If one of the tokens was ETH, we need to translate back from WETH
-            const sortedTokens = tokens.includes(this.ETH)
-                ? sortedErc20s.map((token) => (this.isWETH(token) ? this.ETH : token))
-                : sortedErc20s;
-            return [sortedTokens, ...sortedOthers];
-        }
-    }
-    AssetHelpers.isEqual = (addressA, addressB) => address.getAddress(addressA) === address.getAddress(addressB);
-
-    exports.PoolSpecialization = void 0;
-    (function (PoolSpecialization) {
-        PoolSpecialization[PoolSpecialization["GeneralPool"] = 0] = "GeneralPool";
-        PoolSpecialization[PoolSpecialization["MinimalSwapInfoPool"] = 1] = "MinimalSwapInfoPool";
-        PoolSpecialization[PoolSpecialization["TwoTokenPool"] = 2] = "TwoTokenPool";
-    })(exports.PoolSpecialization || (exports.PoolSpecialization = {}));
-    // Swaps
-    exports.SwapKind = void 0;
-    (function (SwapKind) {
-        SwapKind[SwapKind["GivenIn"] = 0] = "GivenIn";
-        SwapKind[SwapKind["GivenOut"] = 1] = "GivenOut";
-    })(exports.SwapKind || (exports.SwapKind = {}));
-    // Balance Operations
-    exports.UserBalanceOpKind = void 0;
-    (function (UserBalanceOpKind) {
-        UserBalanceOpKind[UserBalanceOpKind["DepositInternal"] = 0] = "DepositInternal";
-        UserBalanceOpKind[UserBalanceOpKind["WithdrawInternal"] = 1] = "WithdrawInternal";
-        UserBalanceOpKind[UserBalanceOpKind["TransferInternal"] = 2] = "TransferInternal";
-        UserBalanceOpKind[UserBalanceOpKind["TransferExternal"] = 3] = "TransferExternal";
-    })(exports.UserBalanceOpKind || (exports.UserBalanceOpKind = {}));
-    exports.PoolBalanceOpKind = void 0;
-    (function (PoolBalanceOpKind) {
-        PoolBalanceOpKind[PoolBalanceOpKind["Withdraw"] = 0] = "Withdraw";
-        PoolBalanceOpKind[PoolBalanceOpKind["Deposit"] = 1] = "Deposit";
-        PoolBalanceOpKind[PoolBalanceOpKind["Update"] = 2] = "Update";
-    })(exports.PoolBalanceOpKind || (exports.PoolBalanceOpKind = {}));
-
-    exports.AssetHelpers = AssetHelpers;
-    exports.BalancerErrors = BalancerErrors;
-    exports.BalancerMinterAuthorization = BalancerMinterAuthorization;
-    exports.BasePoolEncoder = BasePoolEncoder;
-    exports.ManagedPoolEncoder = ManagedPoolEncoder;
-    exports.RelayerAuthorization = RelayerAuthorization;
-    exports.StablePoolEncoder = StablePoolEncoder;
-    exports.WeightedPoolEncoder = WeightedPoolEncoder;
-    exports.accountToAddress = accountToAddress;
-    exports.getPoolAddress = getPoolAddress;
-    exports.getPoolNonce = getPoolNonce;
-    exports.getPoolSpecialization = getPoolSpecialization;
-    exports.isNormalizedWeights = isNormalizedWeights;
-    exports.signPermit = signPermit;
-    exports.splitPoolId = splitPoolId;
-    exports.toNormalizedWeights = toNormalizedWeights;
-
-    Object.defineProperty(exports, '__esModule', { value: true });
-
-})));
-//# sourceMappingURL=index.umd.js.map
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts balancer-js/dist/index.umd.js.map balancer-js/dist/index.umd.js.map
--- balancer-js/dist/index.umd.js.map	2022-10-28 09:53:21.000000000 +0200
+++ balancer-js/dist/index.umd.js.map	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-{"version":3,"file":"index.umd.js","sources":["../src/pool-stable/encoder.ts","../src/pool-weighted/encoder.ts","../src/pool-weighted/normalizedWeights.ts","../../../node_modules/tiny-invariant/dist/tiny-invariant.esm.js","../src/pool-utils/poolId.ts","../src/pool-utils/encoder.ts","../src/utils/errors.ts","../src/utils/signatures.ts","../src/utils/permit.ts","../src/utils/assetHelpers.ts","../src/types.ts"],"sourcesContent":["import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum StablePoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum StablePoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n}\n\nexport class StablePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a StablePool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256[]'], [StablePoolJoinKind.INIT, amountsIn]);\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (amountsIn: BigNumberish[], minimumBPT: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (bptAmountOut: BigNumberish, enterTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (bptAmountIn: BigNumberish, exitTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]\n    );\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum WeightedPoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n  ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n  ADD_TOKEN,\n}\n\nexport enum WeightedPoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n  REMOVE_TOKEN,\n}\n\nexport class WeightedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a WeightedPool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256[]'], [WeightedPoolJoinKind.INIT, amountsIn]);\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (amountsIn: BigNumberish[], minimumBPT: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (bptAmountOut: BigNumberish, enterTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   */\n  static joinAllTokensInForExactBPTOut = (bptAmountOut: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (bptAmountIn: BigNumberish, exitTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]);\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]\n    );\n}\n\nexport class ManagedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting a ManagedPool to remove a token.\n   * This can only be done by the pool owner.\n   */\n  static exitForRemoveToken = (tokenIndex: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolExitKind.REMOVE_TOKEN, tokenIndex]);\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther as ONE } from '@ethersproject/constants';\n\n// Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants\n// Including would introduce a dependency\nconst MaxWeightedTokens = 100;\n\n/**\n * Normalize an array of token weights to ensure they sum to `1e18`\n * @param weights - an array of token weights to be normalized\n * @returns an equivalent set of normalized weights\n */\nexport function toNormalizedWeights(weights: BigNumber[]): BigNumber[] {\n  // When the number is exactly equal to the max, normalizing with common inputs\n  // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.\n  if (weights.length == MaxWeightedTokens) {\n    return Array(MaxWeightedTokens).fill(ONE.div(MaxWeightedTokens));\n  }\n\n  const sum = weights.reduce((total, weight) => total.add(weight), Zero);\n  if (sum.eq(ONE)) return weights;\n\n  const normalizedWeights = [];\n  let normalizedSum = Zero;\n  for (let index = 0; index < weights.length; index++) {\n    if (index < weights.length - 1) {\n      normalizedWeights[index] = weights[index].mul(ONE).div(sum);\n      normalizedSum = normalizedSum.add(normalizedWeights[index]);\n    } else {\n      normalizedWeights[index] = ONE.sub(normalizedSum);\n    }\n  }\n\n  return normalizedWeights;\n}\n\n/**\n * Check whether a set of weights are normalized\n * @param weights - an array of potentially unnormalized weights\n * @returns a boolean of whether the weights are normalized\n */\nexport const isNormalizedWeights = (weights: BigNumberish[]): boolean => {\n  const totalWeight = weights.reduce((total: BigNumber, weight) => total.add(weight), Zero);\n  return totalWeight.eq(ONE);\n};\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    throw new Error(prefix + \": \" + (message || ''));\n}\n\nexport default invariant;\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { PoolSpecialization } from '../types';\nimport invariant from 'tiny-invariant';\n\n/**\n * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce\n * @param poolId - a bytes32 string of the pool's ID\n * @returns an object with the decomposed poolId\n */\nexport const splitPoolId = (\n  poolId: string\n): { address: string; specialization: PoolSpecialization; nonce: BigNumber } => {\n  return {\n    address: getPoolAddress(poolId),\n    specialization: getPoolSpecialization(poolId),\n    nonce: getPoolNonce(poolId),\n  };\n};\n\n/**\n * Extracts a pool's address from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's address\n */\nexport const getPoolAddress = (poolId: string): string => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return poolId.slice(0, 42);\n};\n\n/**\n * Extracts a pool's specialization from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's specialization\n */\nexport const getPoolSpecialization = (poolId: string): PoolSpecialization => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n\n  // Only have 3 pool specializations so we can just pull the relevant character\n  const specializationCode = parseInt(poolId[45]);\n  invariant(specializationCode < 3, 'Invalid pool specialization');\n\n  return specializationCode;\n};\n\n/**\n * Extracts a pool's nonce from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's nonce\n */\nexport const getPoolNonce = (poolId: string): BigNumber => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return BigNumber.from(`0x${poolId.slice(46)}`);\n};\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\n// RECOVERY_MODE must match BasePoolUserData.RECOVERY_MODE_EXIT_KIND, the value that\n// (Legacy)BasePool uses to detect the special exit enabled in recovery mode.\nexport enum BasePoolExitKind {\n  RECOVERY_MODE = 255,\n}\n\nexport class BasePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting any Pool in recovery mode, by removing tokens in return for\n   * an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static recoveryModeExit = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [BasePoolExitKind.RECOVERY_MODE, bptAmountIn]);\n}\n","const balancerErrorCodes: Record<string, string> = {\n  '000': 'ADD_OVERFLOW',\n  '001': 'SUB_OVERFLOW',\n  '002': 'SUB_UNDERFLOW',\n  '003': 'MUL_OVERFLOW',\n  '004': 'ZERO_DIVISION',\n  '005': 'DIV_INTERNAL',\n  '006': 'X_OUT_OF_BOUNDS',\n  '007': 'Y_OUT_OF_BOUNDS',\n  '008': 'PRODUCT_OUT_OF_BOUNDS',\n  '009': 'INVALID_EXPONENT',\n  '100': 'OUT_OF_BOUNDS',\n  '101': 'UNSORTED_ARRAY',\n  '102': 'UNSORTED_TOKENS',\n  '103': 'INPUT_LENGTH_MISMATCH',\n  '104': 'ZERO_TOKEN',\n  '200': 'MIN_TOKENS',\n  '201': 'MAX_TOKENS',\n  '202': 'MAX_SWAP_FEE_PERCENTAGE',\n  '203': 'MIN_SWAP_FEE_PERCENTAGE',\n  '204': 'MINIMUM_BPT',\n  '205': 'CALLER_NOT_VAULT',\n  '206': 'UNINITIALIZED',\n  '207': 'BPT_IN_MAX_AMOUNT',\n  '208': 'BPT_OUT_MIN_AMOUNT',\n  '209': 'EXPIRED_PERMIT',\n  '210': 'NOT_TWO_TOKENS',\n  '211': 'DISABLED',\n  '300': 'MIN_AMP',\n  '301': 'MAX_AMP',\n  '302': 'MIN_WEIGHT',\n  '303': 'MAX_STABLE_TOKENS',\n  '304': 'MAX_IN_RATIO',\n  '305': 'MAX_OUT_RATIO',\n  '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',\n  '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',\n  '308': 'NORMALIZED_WEIGHT_INVARIANT',\n  '309': 'INVALID_TOKEN',\n  '310': 'UNHANDLED_JOIN_KIND',\n  '311': 'ZERO_INVARIANT',\n  '312': 'ORACLE_INVALID_SECONDS_QUERY',\n  '313': 'ORACLE_NOT_INITIALIZED',\n  '314': 'ORACLE_QUERY_TOO_OLD',\n  '315': 'ORACLE_INVALID_INDEX',\n  '316': 'ORACLE_BAD_SECS',\n  '317': 'AMP_END_TIME_TOO_CLOSE',\n  '318': 'AMP_ONGOING_UPDATE',\n  '319': 'AMP_RATE_TOO_HIGH',\n  '320': 'AMP_NO_ONGOING_UPDATE',\n  '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',\n  '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',\n  '323': 'RELAYER_NOT_CONTRACT',\n  '324': 'BASE_POOL_RELAYER_NOT_CALLED',\n  '325': 'REBALANCING_RELAYER_REENTERED',\n  '326': 'GRADUAL_UPDATE_TIME_TRAVEL',\n  '327': 'SWAPS_DISABLED',\n  '328': 'CALLER_IS_NOT_LBP_OWNER',\n  '329': 'PRICE_RATE_OVERFLOW',\n  '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',\n  '331': 'WEIGHT_CHANGE_TOO_FAST',\n  '332': 'LOWER_GREATER_THAN_UPPER_TARGET',\n  '333': 'UPPER_TARGET_TOO_HIGH',\n  '334': 'UNHANDLED_BY_LINEAR_POOL',\n  '335': 'OUT_OF_TARGET_RANGE',\n  '336': 'UNHANDLED_EXIT_KIND',\n  '337': 'UNAUTHORIZED_EXIT',\n  '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',\n  '339': 'UNHANDLED_BY_MANAGED_POOL',\n  '340': 'UNHANDLED_BY_PHANTOM_POOL',\n  '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',\n  '342': 'INVALID_INITIALIZATION',\n  '343': 'OUT_OF_NEW_TARGET_RANGE',\n  '344': 'FEATURE_DISABLED',\n  '345': 'UNINITIALIZED_POOL_CONTROLLER',\n  '346': 'SET_SWAP_FEE_DURING_FEE_CHANGE',\n  '347': 'SET_SWAP_FEE_PENDING_FEE_CHANGE',\n  '348': 'CHANGE_TOKENS_DURING_WEIGHT_CHANGE',\n  '349': 'CHANGE_TOKENS_PENDING_WEIGHT_CHANGE',\n  '350': 'MAX_WEIGHT',\n  '351': 'UNAUTHORIZED_JOIN',\n  '352': 'MAX_MANAGEMENT_AUM_FEE_PERCENTAGE',\n  '353': 'FRACTIONAL_TARGET',\n  '354': 'ADD_OR_REMOVE_BPT',\n  '355': 'INVALID_CIRCUIT_BREAKER_BOUNDS',\n  '356': 'CIRCUIT_BREAKER_TRIPPED',\n  '400': 'REENTRANCY',\n  '401': 'SENDER_NOT_ALLOWED',\n  '402': 'PAUSED',\n  '403': 'PAUSE_WINDOW_EXPIRED',\n  '404': 'MAX_PAUSE_WINDOW_DURATION',\n  '405': 'MAX_BUFFER_PERIOD_DURATION',\n  '406': 'INSUFFICIENT_BALANCE',\n  '407': 'INSUFFICIENT_ALLOWANCE',\n  '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',\n  '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',\n  '410': 'ERC20_MINT_TO_ZERO_ADDRESS',\n  '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',\n  '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',\n  '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',\n  '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',\n  '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',\n  '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',\n  '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',\n  '418': 'SAFE_ERC20_CALL_FAILED',\n  '419': 'ADDRESS_INSUFFICIENT_BALANCE',\n  '420': 'ADDRESS_CANNOT_SEND_VALUE',\n  '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',\n  '422': 'GRANT_SENDER_NOT_ADMIN',\n  '423': 'REVOKE_SENDER_NOT_ADMIN',\n  '424': 'RENOUNCE_SENDER_NOT_ALLOWED',\n  '425': 'BUFFER_PERIOD_EXPIRED',\n  '426': 'CALLER_IS_NOT_OWNER',\n  '427': 'NEW_OWNER_IS_ZERO',\n  '428': 'CODE_DEPLOYMENT_FAILED',\n  '429': 'CALL_TO_NON_CONTRACT',\n  '430': 'LOW_LEVEL_CALL_FAILED',\n  '431': 'NOT_PAUSED',\n  '432': 'ADDRESS_ALREADY_ALLOWLISTED',\n  '433': 'ADDRESS_NOT_ALLOWLISTED',\n  '434': 'ERC20_BURN_EXCEEDS_BALANCE',\n  '435': 'INVALID_OPERATION',\n  '436': 'CODEC_OVERFLOW',\n  '437': 'IN_RECOVERY_MODE',\n  '438': 'NOT_IN_RECOVERY_MODE',\n  '439': 'INDUCED_FAILURE',\n  '440': 'EXPIRED_SIGNATURE',\n  '441': 'MALFORMED_SIGNATURE',\n  '442': 'SAFE_CAST_VALUE_CANT_FIT_UINT64',\n  '443': 'UNHANDLED_FEE_TYPE',\n  '444': 'BURN_FROM_ZERO',\n  '500': 'INVALID_POOL_ID',\n  '501': 'CALLER_NOT_POOL',\n  '502': 'SENDER_NOT_ASSET_MANAGER',\n  '503': 'USER_DOESNT_ALLOW_RELAYER',\n  '504': 'INVALID_SIGNATURE',\n  '505': 'EXIT_BELOW_MIN',\n  '506': 'JOIN_ABOVE_MAX',\n  '507': 'SWAP_LIMIT',\n  '508': 'SWAP_DEADLINE',\n  '509': 'CANNOT_SWAP_SAME_TOKEN',\n  '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',\n  '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',\n  '512': 'INTERNAL_BALANCE_OVERFLOW',\n  '513': 'INSUFFICIENT_INTERNAL_BALANCE',\n  '514': 'INVALID_ETH_INTERNAL_BALANCE',\n  '515': 'INVALID_POST_LOAN_BALANCE',\n  '516': 'INSUFFICIENT_ETH',\n  '517': 'UNALLOCATED_ETH',\n  '518': 'ETH_TRANSFER',\n  '519': 'CANNOT_USE_ETH_SENTINEL',\n  '520': 'TOKENS_MISMATCH',\n  '521': 'TOKEN_NOT_REGISTERED',\n  '522': 'TOKEN_ALREADY_REGISTERED',\n  '523': 'TOKENS_ALREADY_SET',\n  '524': 'TOKENS_LENGTH_MUST_BE_2',\n  '525': 'NONZERO_TOKEN_BALANCE',\n  '526': 'BALANCE_TOTAL_OVERFLOW',\n  '527': 'POOL_NO_TOKENS',\n  '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',\n  '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',\n  '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',\n  '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',\n  '603': 'AUM_FEE_PERCENTAGE_TOO_HIGH',\n  '700': 'SPLITTER_FEE_PERCENTAGE_TOO_HIGH',\n  '998': 'UNIMPLEMENTED',\n  '999': 'SHOULD_NOT_HAPPEN',\n};\n\nexport class BalancerErrors {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static isErrorCode = (error: string): boolean => {\n    if (!error.includes('BAL#')) return false;\n\n    const errorCode = error.replace('BAL#', '');\n    return Object.keys(balancerErrorCodes).includes(errorCode);\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason\n   */\n  static parseErrorCode = (error: string): string => {\n    if (!error.includes('BAL#')) throw new Error('Error code not found');\n    const errorCode = error.replace('BAL#', '');\n\n    const actualError = balancerErrorCodes[errorCode];\n\n    if (!actualError) throw new Error('Error code not found');\n\n    return actualError;\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason if passed a valid error code, otherwise returns passed input\n   */\n  static tryParseErrorCode = (error: string): string => {\n    try {\n      return BalancerErrors.parseErrorCode(error);\n    } catch {\n      return error;\n    }\n  };\n\n  /**\n   * Tests whether a string is a known Balancer error message\n   * @param error - a string to be checked verified as a Balancer error message\n   */\n  static isBalancerError = (error: string): boolean => Object.values(balancerErrorCodes).includes(error);\n\n  /**\n   * Encodes an error string into the corresponding error code\n   * @param error - a Balancer error message string\n   * @returns a Balancer error code of the form `BAL#000`\n   */\n  static encodeError = (error: string): string => {\n    const encodedError = Object.entries(balancerErrorCodes).find(([, message]) => message === error);\n\n    if (!encodedError) throw Error('Error message not found');\n\n    return `BAL#${encodedError[0]}`;\n  };\n}\n","import { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { hexValue, hexZeroPad, splitSignature } from '@ethersproject/bytes';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\n\nexport type Account = string | Signer | Contract;\n\nexport async function accountToAddress(account: Account): Promise<string> {\n  if (typeof account == 'string') return account;\n  if (Signer.isSigner(account)) return account.getAddress();\n  if (account.address) return account.address;\n  throw new Error('Could not read account address');\n}\n\nexport enum RelayerAction {\n  JoinPool = 'JoinPool',\n  ExitPool = 'ExitPool',\n  Swap = 'Swap',\n  BatchSwap = 'BatchSwap',\n  SetRelayerApproval = 'SetRelayerApproval',\n}\n\nexport class RelayerAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static encodeCalldataAuthorization = (calldata: string, deadline: BigNumberish, signature: string): string => {\n    const encodedDeadline = hexZeroPad(hexValue(deadline), 32).slice(2);\n    const { v, r, s } = splitSignature(signature);\n    const encodedV = hexZeroPad(hexValue(v), 32).slice(2);\n    const encodedR = r.slice(2);\n    const encodedS = s.slice(2);\n    return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;\n  };\n\n  static signJoinAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.JoinPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signExitAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.ExitPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.Swap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signBatchSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.BatchSwap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSetRelayerApprovalAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.SetRelayerApproval,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signAuthorizationFor = async (\n    type: RelayerAction,\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<string> => {\n    const { chainId } = await validator.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await validator.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer V2 Vault',\n      version: '1',\n      chainId,\n      verifyingContract: validator.address,\n    };\n\n    const types = {\n      [type]: [\n        { name: 'calldata', type: 'bytes' },\n        { name: 'sender', type: 'address' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      calldata: allowedCalldata,\n      sender: await accountToAddress(allowedSender),\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    return user._signTypedData(domain, types, value);\n  };\n}\n\nexport class BalancerMinterAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static signSetMinterApproval = async (\n    minterContract: Contract,\n    minter: Account,\n    approval: boolean,\n    user: Signer & TypedDataSigner,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<{ v: number; r: string; s: string; deadline: BigNumber }> => {\n    const { chainId } = await minterContract.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await minterContract.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer Minter',\n      version: '1',\n      chainId,\n      verifyingContract: minterContract.address,\n    };\n\n    const types = {\n      SetMinterApproval: [\n        { name: 'minter', type: 'address' },\n        { name: 'approval', type: 'bool' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      minter: await accountToAddress(minter),\n      approval,\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    const signature = await user._signTypedData(domain, types, value);\n\n    return { ...splitSignature(signature), deadline: BigNumber.from(deadline) };\n  };\n}\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { splitSignature } from '@ethersproject/bytes';\nimport { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { Account, accountToAddress } from './signatures';\n\nexport const signPermit = async (\n  token: Contract,\n  owner: Signer & TypedDataSigner,\n  spender: Account,\n  amount: BigNumberish,\n  deadline: BigNumberish = MAX_DEADLINE,\n  nonce?: BigNumberish\n): Promise<{ v: number; r: string; s: string; deadline: BigNumber; nonce: BigNumber }> => {\n  const { chainId } = await token.provider.getNetwork();\n  const ownerAddress = await owner.getAddress();\n\n  if (!nonce) nonce = (await token.nonces(ownerAddress)) as BigNumberish;\n\n  // Hack around some tokens not exposing a `version()` function.\n  // If they do then use it, otherwise assume that their version is \"1\".\n  let version = '1';\n  try {\n    if (token.version) {\n      version = await token.version();\n    }\n  } catch {\n    // eslint-disable-prev-line no-empty\n  }\n\n  const domain = {\n    name: await token.name(),\n    version,\n    chainId,\n    verifyingContract: token.address,\n  };\n\n  const types = {\n    Permit: [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ],\n  };\n\n  const value = {\n    owner: ownerAddress,\n    spender: await accountToAddress(spender),\n    value: amount,\n    nonce,\n    deadline,\n  };\n\n  const signature = await owner._signTypedData(domain, types, value);\n  return { ...splitSignature(signature), deadline: BigNumber.from(deadline), nonce: BigNumber.from(nonce) };\n};\n","import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport invariant from 'tiny-invariant';\n\nconst cmpTokens = (tokenA: string, tokenB: string): number => (tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1);\n\nconst transposeMatrix = (matrix: unknown[][]): unknown[][] =>\n  matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));\n\nexport class AssetHelpers {\n  public readonly ETH: string = AddressZero;\n  public readonly WETH: string;\n\n  constructor(wethAddress: string) {\n    this.WETH = getAddress(wethAddress);\n  }\n\n  static isEqual = (addressA: string, addressB: string): boolean => getAddress(addressA) === getAddress(addressB);\n\n  /**\n   * Tests whether `token` is ETH (represented by `0x0000...0000`).\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isETH = (token: string): boolean => AssetHelpers.isEqual(token, this.ETH);\n\n  /**\n   * Tests whether `token` is WETH.\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isWETH = (token: string): boolean => AssetHelpers.isEqual(token, this.WETH);\n\n  /**\n   * Converts an asset to the equivalent ERC20 address.\n   *\n   * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address\n   * @param token - the address of the asset to be translated to an equivalent ERC20\n   * @returns the address of translated ERC20 asset\n   */\n  translateToERC20 = (token: string): string => (this.isETH(token) ? this.WETH : token);\n\n  /**\n   * Sorts an array of token addresses into ascending order to match the format expected by the Vault.\n   *\n   * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.\n   *\n   * The zero address (representing ETH) is sorted as if it were the WETH address.\n   * This matches the behaviour expected by the Vault when receiving an array of addresses.\n   *\n   * @param tokens - an array of token addresses to be sorted in ascending order\n   * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses\n   * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`\n   *\n   * @example\n   * const [tokens] = sortTokens([tokenB, tokenC, tokenA])\n   * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])\n   * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]\n   */\n  sortTokens(tokens: string[], ...others: unknown[][]): [string[], ...unknown[][]] {\n    others.forEach((array) => invariant(tokens.length === array.length, 'array length mismatch'));\n\n    // We want to sort ETH as if were WETH so we translate to ERC20s\n    const erc20Tokens = tokens.map(this.translateToERC20);\n\n    const transpose = transposeMatrix([erc20Tokens, ...others]) as [string, ...unknown[]][];\n    const sortedTranspose = transpose.sort(([tokenA], [tokenB]) => cmpTokens(tokenA, tokenB));\n    const [sortedErc20s, ...sortedOthers] = transposeMatrix(sortedTranspose) as [string[], ...unknown[][]];\n\n    // If one of the tokens was ETH, we need to translate back from WETH\n    const sortedTokens = tokens.includes(this.ETH)\n      ? sortedErc20s.map((token) => (this.isWETH(token) ? this.ETH : token))\n      : sortedErc20s;\n    return [sortedTokens, ...sortedOthers];\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum PoolSpecialization {\n  GeneralPool = 0,\n  MinimalSwapInfoPool,\n  TwoTokenPool,\n}\n\nexport type FundManagement = {\n  sender: string;\n  fromInternalBalance: boolean;\n  recipient: string;\n  toInternalBalance: boolean;\n};\n\n// Swaps\n\nexport enum SwapKind {\n  GivenIn = 0,\n  GivenOut,\n}\n\nexport type SingleSwap = {\n  poolId: string;\n  kind: SwapKind;\n  assetIn: string;\n  assetOut: string;\n  amount: BigNumberish;\n  userData: string;\n};\n\nexport type Swap = {\n  kind: SwapKind;\n  singleSwap: SingleSwap;\n  limit: BigNumberish;\n  deadline: BigNumberish;\n};\n\nexport type BatchSwapStep = {\n  poolId: string;\n  assetInIndex: number;\n  assetOutIndex: number;\n  amount: BigNumberish;\n  userData: string;\n};\n\nexport type BatchSwap = {\n  kind: SwapKind;\n  swaps: BatchSwapStep[];\n  assets: string[];\n  funds: FundManagement;\n  limits: BigNumberish[];\n  deadline: BigNumberish;\n};\n\nexport type SwapRequest = {\n  kind: SwapKind;\n  tokenIn: string;\n  tokenOut: string;\n  amount: BigNumberish;\n  poolId: string;\n  lastChangeBlock: BigNumberish;\n  from: string;\n  to: string;\n  userData: string;\n};\n\n// Joins\n\nexport type JoinPoolRequest = {\n  assets: string[];\n  maxAmountsIn: BigNumberish[];\n  userData: string;\n  fromInternalBalance: boolean;\n};\n\n// Exit\n\nexport type ExitPoolRequest = {\n  assets: string[];\n  minAmountsOut: BigNumberish[];\n  userData: string;\n  toInternalBalance: boolean;\n};\n\n// Balance Operations\n\nexport enum UserBalanceOpKind {\n  DepositInternal = 0,\n  WithdrawInternal,\n  TransferInternal,\n  TransferExternal,\n}\n\nexport type UserBalanceOp = {\n  kind: UserBalanceOpKind;\n  asset: string;\n  amount: BigNumberish;\n  sender: string;\n  recipient: string;\n};\n\nexport enum PoolBalanceOpKind {\n  Withdraw = 0,\n  Deposit = 1,\n  Update = 2,\n}\n\nexport type PoolBalanceOp = {\n  kind: PoolBalanceOpKind;\n  poolId: string;\n  token: string;\n  amount: BigNumberish;\n};\n"],"names":["StablePoolJoinKind","StablePoolExitKind","defaultAbiCoder","WeightedPoolJoinKind","WeightedPoolExitKind","ONE","Zero","BigNumber","BasePoolExitKind","Signer","RelayerAction","hexZeroPad","hexValue","splitSignature","MAX_DEADLINE","AddressZero","getAddress","PoolSpecialization","SwapKind","UserBalanceOpKind","PoolBalanceOpKind"],"mappings":"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"}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol/IDistributorCallback.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol/IDistributorCallback.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol/IDistributorCallback.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol/IDistributorCallback.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol/IDistributorCallback.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol/IDistributorCallback.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol/IDistributorCallback.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol/IDistributorCallback.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,24 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "IDistributorCallback",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol",
-  "abi": [
-    {
-      "inputs": [
-        {
-          "internalType": "bytes",
-          "name": "callbackData",
-          "type": "bytes"
-        }
-      ],
-      "name": "distributorCallback",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol/Errors.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol/Errors.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol/Errors.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol/Errors.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol/Errors.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol/Errors.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol/Errors.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol/Errors.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,10 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "Errors",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol",
-  "abi": [],
-  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205855b69f02f727d678faee7598f73d68b1f012b52dcc02dc6217bc6ff5838edf64736f6c63430007010033",
-  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205855b69f02f727d678faee7598f73d68b1f012b52dcc02dc6217bc6ff5838edf64736f6c63430007010033",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol/IAuthentication.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol/IAuthentication.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol/IAuthentication.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol/IAuthentication.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol/IAuthentication.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol/IAuthentication.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol/IAuthentication.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol/IAuthentication.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,30 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "IAuthentication",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol",
-  "abi": [
-    {
-      "inputs": [
-        {
-          "internalType": "bytes4",
-          "name": "selector",
-          "type": "bytes4"
-        }
-      ],
-      "name": "getActionId",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol/ISignaturesValidator.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol/ISignaturesValidator.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol/ISignaturesValidator.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol/ISignaturesValidator.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol/ISignaturesValidator.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol/ISignaturesValidator.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol/ISignaturesValidator.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol/ISignaturesValidator.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,43 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "ISignaturesValidator",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol",
-  "abi": [
-    {
-      "inputs": [],
-      "name": "getDomainSeparator",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        }
-      ],
-      "name": "getNextNonce",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol/ITemporarilyPausable.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol/ITemporarilyPausable.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol/ITemporarilyPausable.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol/ITemporarilyPausable.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol/ITemporarilyPausable.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol/ITemporarilyPausable.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol/ITemporarilyPausable.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol/ITemporarilyPausable.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,47 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "ITemporarilyPausable",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol",
-  "abi": [
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": false,
-          "internalType": "bool",
-          "name": "paused",
-          "type": "bool"
-        }
-      ],
-      "name": "PausedStateChanged",
-      "type": "event"
-    },
-    {
-      "inputs": [],
-      "name": "getPausedState",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "paused",
-          "type": "bool"
-        },
-        {
-          "internalType": "uint256",
-          "name": "pauseWindowEndTime",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "bufferPeriodEndTime",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol/IWETH.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol/IWETH.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol/IWETH.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol/IWETH.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol/IWETH.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol/IWETH.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol/IWETH.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol/IWETH.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,214 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "IWETH",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol",
-  "abi": [
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "owner",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "spender",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "value",
-          "type": "uint256"
-        }
-      ],
-      "name": "Approval",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "from",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "to",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "value",
-          "type": "uint256"
-        }
-      ],
-      "name": "Transfer",
-      "type": "event"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "owner",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "spender",
-          "type": "address"
-        }
-      ],
-      "name": "allowance",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "spender",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "approve",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        }
-      ],
-      "name": "balanceOf",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "deposit",
-      "outputs": [],
-      "stateMutability": "payable",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "totalSupply",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "recipient",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "transfer",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "sender",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "recipient",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "transferFrom",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "withdraw",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol/IERC20.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol/IERC20.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol/IERC20.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol/IERC20.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol/IERC20.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol/IERC20.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol/IERC20.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol/IERC20.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,194 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "IERC20",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol",
-  "abi": [
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "owner",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "spender",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "value",
-          "type": "uint256"
-        }
-      ],
-      "name": "Approval",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "from",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "to",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "value",
-          "type": "uint256"
-        }
-      ],
-      "name": "Transfer",
-      "type": "event"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "owner",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "spender",
-          "type": "address"
-        }
-      ],
-      "name": "allowance",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "spender",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "approve",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        }
-      ],
-      "name": "balanceOf",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "totalSupply",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "recipient",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "transfer",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "sender",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "recipient",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "transferFrom",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol/IAsset.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol/IAsset.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol/IAsset.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol/IAsset.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol/IAsset.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol/IAsset.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol/IAsset.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol/IAsset.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,10 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "IAsset",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol",
-  "abi": [],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol/IAuthorizer.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol/IAuthorizer.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol/IAuthorizer.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol/IAuthorizer.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol/IAuthorizer.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol/IAuthorizer.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol/IAuthorizer.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol/IAuthorizer.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,40 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "IAuthorizer",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol",
-  "abi": [
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "actionId",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "where",
-          "type": "address"
-        }
-      ],
-      "name": "canPerform",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol/IFlashLoanRecipient.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol/IFlashLoanRecipient.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol/IFlashLoanRecipient.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol/IFlashLoanRecipient.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol/IFlashLoanRecipient.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol/IFlashLoanRecipient.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol/IFlashLoanRecipient.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol/IFlashLoanRecipient.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,39 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "IFlashLoanRecipient",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol",
-  "abi": [
-    {
-      "inputs": [
-        {
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        },
-        {
-          "internalType": "uint256[]",
-          "name": "amounts",
-          "type": "uint256[]"
-        },
-        {
-          "internalType": "uint256[]",
-          "name": "feeAmounts",
-          "type": "uint256[]"
-        },
-        {
-          "internalType": "bytes",
-          "name": "userData",
-          "type": "bytes"
-        }
-      ],
-      "name": "receiveFlashLoan",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol/IProtocolFeesCollector.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol/IProtocolFeesCollector.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol/IProtocolFeesCollector.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol/IProtocolFeesCollector.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol/IProtocolFeesCollector.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol/IProtocolFeesCollector.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol/IProtocolFeesCollector.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol/IProtocolFeesCollector.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,157 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "IProtocolFeesCollector",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol",
-  "abi": [
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "newFlashLoanFeePercentage",
-          "type": "uint256"
-        }
-      ],
-      "name": "FlashLoanFeePercentageChanged",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "newSwapFeePercentage",
-          "type": "uint256"
-        }
-      ],
-      "name": "SwapFeePercentageChanged",
-      "type": "event"
-    },
-    {
-      "inputs": [],
-      "name": "getAuthorizer",
-      "outputs": [
-        {
-          "internalType": "contract IAuthorizer",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        }
-      ],
-      "name": "getCollectedFeeAmounts",
-      "outputs": [
-        {
-          "internalType": "uint256[]",
-          "name": "feeAmounts",
-          "type": "uint256[]"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "getFlashLoanFeePercentage",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "getSwapFeePercentage",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "newFlashLoanFeePercentage",
-          "type": "uint256"
-        }
-      ],
-      "name": "setFlashLoanFeePercentage",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "newSwapFeePercentage",
-          "type": "uint256"
-        }
-      ],
-      "name": "setSwapFeePercentage",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "vault",
-      "outputs": [
-        {
-          "internalType": "contract IVault",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        },
-        {
-          "internalType": "uint256[]",
-          "name": "amounts",
-          "type": "uint256[]"
-        },
-        {
-          "internalType": "address",
-          "name": "recipient",
-          "type": "address"
-        }
-      ],
-      "name": "withdrawCollectedFees",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol/IVault.dbg.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol/IVault.dbg.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol/IVault.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol/IVault.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol/IVault.json distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol/IVault.json
--- distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol/IVault.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol/IVault.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,1158 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "IVault",
-  "sourceName": "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol",
-  "abi": [
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "contract IAuthorizer",
-          "name": "newAuthorizer",
-          "type": "address"
-        }
-      ],
-      "name": "AuthorizerChanged",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "sender",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "address",
-          "name": "recipient",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "ExternalBalanceTransfer",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "contract IFlashLoanRecipient",
-          "name": "recipient",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "feeAmount",
-          "type": "uint256"
-        }
-      ],
-      "name": "FlashLoan",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "int256",
-          "name": "delta",
-          "type": "int256"
-        }
-      ],
-      "name": "InternalBalanceChanged",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": false,
-          "internalType": "bool",
-          "name": "paused",
-          "type": "bool"
-        }
-      ],
-      "name": "PausedStateChanged",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "liquidityProvider",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        },
-        {
-          "indexed": false,
-          "internalType": "int256[]",
-          "name": "deltas",
-          "type": "int256[]"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256[]",
-          "name": "protocolFeeAmounts",
-          "type": "uint256[]"
-        }
-      ],
-      "name": "PoolBalanceChanged",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "assetManager",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "int256",
-          "name": "cashDelta",
-          "type": "int256"
-        },
-        {
-          "indexed": false,
-          "internalType": "int256",
-          "name": "managedDelta",
-          "type": "int256"
-        }
-      ],
-      "name": "PoolBalanceManaged",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "poolAddress",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "enum IVault.PoolSpecialization",
-          "name": "specialization",
-          "type": "uint8"
-        }
-      ],
-      "name": "PoolRegistered",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "relayer",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "sender",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "bool",
-          "name": "approved",
-          "type": "bool"
-        }
-      ],
-      "name": "RelayerApprovalChanged",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        },
-        {
-          "indexed": true,
-          "internalType": "contract IERC20",
-          "name": "tokenIn",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "contract IERC20",
-          "name": "tokenOut",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "amountIn",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "amountOut",
-          "type": "uint256"
-        }
-      ],
-      "name": "Swap",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        },
-        {
-          "indexed": false,
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        }
-      ],
-      "name": "TokensDeregistered",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        },
-        {
-          "indexed": false,
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        },
-        {
-          "indexed": false,
-          "internalType": "address[]",
-          "name": "assetManagers",
-          "type": "address[]"
-        }
-      ],
-      "name": "TokensRegistered",
-      "type": "event"
-    },
-    {
-      "inputs": [],
-      "name": "WETH",
-      "outputs": [
-        {
-          "internalType": "contract IWETH",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "enum IVault.SwapKind",
-          "name": "kind",
-          "type": "uint8"
-        },
-        {
-          "components": [
-            {
-              "internalType": "bytes32",
-              "name": "poolId",
-              "type": "bytes32"
-            },
-            {
-              "internalType": "uint256",
-              "name": "assetInIndex",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "assetOutIndex",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "amount",
-              "type": "uint256"
-            },
-            {
-              "internalType": "bytes",
-              "name": "userData",
-              "type": "bytes"
-            }
-          ],
-          "internalType": "struct IVault.BatchSwapStep[]",
-          "name": "swaps",
-          "type": "tuple[]"
-        },
-        {
-          "internalType": "contract IAsset[]",
-          "name": "assets",
-          "type": "address[]"
-        },
-        {
-          "components": [
-            {
-              "internalType": "address",
-              "name": "sender",
-              "type": "address"
-            },
-            {
-              "internalType": "bool",
-              "name": "fromInternalBalance",
-              "type": "bool"
-            },
-            {
-              "internalType": "address payable",
-              "name": "recipient",
-              "type": "address"
-            },
-            {
-              "internalType": "bool",
-              "name": "toInternalBalance",
-              "type": "bool"
-            }
-          ],
-          "internalType": "struct IVault.FundManagement",
-          "name": "funds",
-          "type": "tuple"
-        },
-        {
-          "internalType": "int256[]",
-          "name": "limits",
-          "type": "int256[]"
-        },
-        {
-          "internalType": "uint256",
-          "name": "deadline",
-          "type": "uint256"
-        }
-      ],
-      "name": "batchSwap",
-      "outputs": [
-        {
-          "internalType": "int256[]",
-          "name": "",
-          "type": "int256[]"
-        }
-      ],
-      "stateMutability": "payable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        }
-      ],
-      "name": "deregisterTokens",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "address",
-          "name": "sender",
-          "type": "address"
-        },
-        {
-          "internalType": "address payable",
-          "name": "recipient",
-          "type": "address"
-        },
-        {
-          "components": [
-            {
-              "internalType": "contract IAsset[]",
-              "name": "assets",
-              "type": "address[]"
-            },
-            {
-              "internalType": "uint256[]",
-              "name": "minAmountsOut",
-              "type": "uint256[]"
-            },
-            {
-              "internalType": "bytes",
-              "name": "userData",
-              "type": "bytes"
-            },
-            {
-              "internalType": "bool",
-              "name": "toInternalBalance",
-              "type": "bool"
-            }
-          ],
-          "internalType": "struct IVault.ExitPoolRequest",
-          "name": "request",
-          "type": "tuple"
-        }
-      ],
-      "name": "exitPool",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "contract IFlashLoanRecipient",
-          "name": "recipient",
-          "type": "address"
-        },
-        {
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        },
-        {
-          "internalType": "uint256[]",
-          "name": "amounts",
-          "type": "uint256[]"
-        },
-        {
-          "internalType": "bytes",
-          "name": "userData",
-          "type": "bytes"
-        }
-      ],
-      "name": "flashLoan",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes4",
-          "name": "selector",
-          "type": "bytes4"
-        }
-      ],
-      "name": "getActionId",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "getAuthorizer",
-      "outputs": [
-        {
-          "internalType": "contract IAuthorizer",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "getDomainSeparator",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        },
-        {
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        }
-      ],
-      "name": "getInternalBalance",
-      "outputs": [
-        {
-          "internalType": "uint256[]",
-          "name": "",
-          "type": "uint256[]"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        }
-      ],
-      "name": "getNextNonce",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "getPausedState",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "paused",
-          "type": "bool"
-        },
-        {
-          "internalType": "uint256",
-          "name": "pauseWindowEndTime",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "bufferPeriodEndTime",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        }
-      ],
-      "name": "getPool",
-      "outputs": [
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        },
-        {
-          "internalType": "enum IVault.PoolSpecialization",
-          "name": "",
-          "type": "uint8"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        }
-      ],
-      "name": "getPoolTokenInfo",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "cash",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "managed",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "lastChangeBlock",
-          "type": "uint256"
-        },
-        {
-          "internalType": "address",
-          "name": "assetManager",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        }
-      ],
-      "name": "getPoolTokens",
-      "outputs": [
-        {
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        },
-        {
-          "internalType": "uint256[]",
-          "name": "balances",
-          "type": "uint256[]"
-        },
-        {
-          "internalType": "uint256",
-          "name": "lastChangeBlock",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "getProtocolFeesCollector",
-      "outputs": [
-        {
-          "internalType": "contract IProtocolFeesCollector",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "relayer",
-          "type": "address"
-        }
-      ],
-      "name": "hasApprovedRelayer",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "address",
-          "name": "sender",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "recipient",
-          "type": "address"
-        },
-        {
-          "components": [
-            {
-              "internalType": "contract IAsset[]",
-              "name": "assets",
-              "type": "address[]"
-            },
-            {
-              "internalType": "uint256[]",
-              "name": "maxAmountsIn",
-              "type": "uint256[]"
-            },
-            {
-              "internalType": "bytes",
-              "name": "userData",
-              "type": "bytes"
-            },
-            {
-              "internalType": "bool",
-              "name": "fromInternalBalance",
-              "type": "bool"
-            }
-          ],
-          "internalType": "struct IVault.JoinPoolRequest",
-          "name": "request",
-          "type": "tuple"
-        }
-      ],
-      "name": "joinPool",
-      "outputs": [],
-      "stateMutability": "payable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "components": [
-            {
-              "internalType": "enum IVault.PoolBalanceOpKind",
-              "name": "kind",
-              "type": "uint8"
-            },
-            {
-              "internalType": "bytes32",
-              "name": "poolId",
-              "type": "bytes32"
-            },
-            {
-              "internalType": "contract IERC20",
-              "name": "token",
-              "type": "address"
-            },
-            {
-              "internalType": "uint256",
-              "name": "amount",
-              "type": "uint256"
-            }
-          ],
-          "internalType": "struct IVault.PoolBalanceOp[]",
-          "name": "ops",
-          "type": "tuple[]"
-        }
-      ],
-      "name": "managePoolBalance",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "components": [
-            {
-              "internalType": "enum IVault.UserBalanceOpKind",
-              "name": "kind",
-              "type": "uint8"
-            },
-            {
-              "internalType": "contract IAsset",
-              "name": "asset",
-              "type": "address"
-            },
-            {
-              "internalType": "uint256",
-              "name": "amount",
-              "type": "uint256"
-            },
-            {
-              "internalType": "address",
-              "name": "sender",
-              "type": "address"
-            },
-            {
-              "internalType": "address payable",
-              "name": "recipient",
-              "type": "address"
-            }
-          ],
-          "internalType": "struct IVault.UserBalanceOp[]",
-          "name": "ops",
-          "type": "tuple[]"
-        }
-      ],
-      "name": "manageUserBalance",
-      "outputs": [],
-      "stateMutability": "payable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "enum IVault.SwapKind",
-          "name": "kind",
-          "type": "uint8"
-        },
-        {
-          "components": [
-            {
-              "internalType": "bytes32",
-              "name": "poolId",
-              "type": "bytes32"
-            },
-            {
-              "internalType": "uint256",
-              "name": "assetInIndex",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "assetOutIndex",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "amount",
-              "type": "uint256"
-            },
-            {
-              "internalType": "bytes",
-              "name": "userData",
-              "type": "bytes"
-            }
-          ],
-          "internalType": "struct IVault.BatchSwapStep[]",
-          "name": "swaps",
-          "type": "tuple[]"
-        },
-        {
-          "internalType": "contract IAsset[]",
-          "name": "assets",
-          "type": "address[]"
-        },
-        {
-          "components": [
-            {
-              "internalType": "address",
-              "name": "sender",
-              "type": "address"
-            },
-            {
-              "internalType": "bool",
-              "name": "fromInternalBalance",
-              "type": "bool"
-            },
-            {
-              "internalType": "address payable",
-              "name": "recipient",
-              "type": "address"
-            },
-            {
-              "internalType": "bool",
-              "name": "toInternalBalance",
-              "type": "bool"
-            }
-          ],
-          "internalType": "struct IVault.FundManagement",
-          "name": "funds",
-          "type": "tuple"
-        }
-      ],
-      "name": "queryBatchSwap",
-      "outputs": [
-        {
-          "internalType": "int256[]",
-          "name": "assetDeltas",
-          "type": "int256[]"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "enum IVault.PoolSpecialization",
-          "name": "specialization",
-          "type": "uint8"
-        }
-      ],
-      "name": "registerPool",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "poolId",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        },
-        {
-          "internalType": "address[]",
-          "name": "assetManagers",
-          "type": "address[]"
-        }
-      ],
-      "name": "registerTokens",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "contract IAuthorizer",
-          "name": "newAuthorizer",
-          "type": "address"
-        }
-      ],
-      "name": "setAuthorizer",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bool",
-          "name": "paused",
-          "type": "bool"
-        }
-      ],
-      "name": "setPaused",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "sender",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "relayer",
-          "type": "address"
-        },
-        {
-          "internalType": "bool",
-          "name": "approved",
-          "type": "bool"
-        }
-      ],
-      "name": "setRelayerApproval",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "components": [
-            {
-              "internalType": "bytes32",
-              "name": "poolId",
-              "type": "bytes32"
-            },
-            {
-              "internalType": "enum IVault.SwapKind",
-              "name": "kind",
-              "type": "uint8"
-            },
-            {
-              "internalType": "contract IAsset",
-              "name": "assetIn",
-              "type": "address"
-            },
-            {
-              "internalType": "contract IAsset",
-              "name": "assetOut",
-              "type": "address"
-            },
-            {
-              "internalType": "uint256",
-              "name": "amount",
-              "type": "uint256"
-            },
-            {
-              "internalType": "bytes",
-              "name": "userData",
-              "type": "bytes"
-            }
-          ],
-          "internalType": "struct IVault.SingleSwap",
-          "name": "singleSwap",
-          "type": "tuple"
-        },
-        {
-          "components": [
-            {
-              "internalType": "address",
-              "name": "sender",
-              "type": "address"
-            },
-            {
-              "internalType": "bool",
-              "name": "fromInternalBalance",
-              "type": "bool"
-            },
-            {
-              "internalType": "address payable",
-              "name": "recipient",
-              "type": "address"
-            },
-            {
-              "internalType": "bool",
-              "name": "toInternalBalance",
-              "type": "bool"
-            }
-          ],
-          "internalType": "struct IVault.FundManagement",
-          "name": "funds",
-          "type": "tuple"
-        },
-        {
-          "internalType": "uint256",
-          "name": "limit",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "deadline",
-          "type": "uint256"
-        }
-      ],
-      "name": "swap",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "payable",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol/FixedPoint.dbg.json distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol/FixedPoint.dbg.json
--- distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol/FixedPoint.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol/FixedPoint.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol/FixedPoint.json distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol/FixedPoint.json
--- distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol/FixedPoint.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol/FixedPoint.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,10 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "FixedPoint",
-  "sourceName": "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol",
-  "abi": [],
-  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220af65969018e1f5904e9ca696ea5c211da997c0397b6b08a2ec73a44e92e8a3a964736f6c63430007010033",
-  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220af65969018e1f5904e9ca696ea5c211da997c0397b6b08a2ec73a44e92e8a3a964736f6c63430007010033",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol/LogExpMath.dbg.json distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol/LogExpMath.dbg.json
--- distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol/LogExpMath.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol/LogExpMath.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol/LogExpMath.json distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol/LogExpMath.json
--- distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol/LogExpMath.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol/LogExpMath.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,10 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "LogExpMath",
-  "sourceName": "@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol",
-  "abi": [],
-  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eaae68cb8a2652a51c355bf3a7cb10b05e01fbc262a0dd1843d59e0d2f75c0df64736f6c63430007010033",
-  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eaae68cb8a2652a51c355bf3a7cb10b05e01fbc262a0dd1843d59e0d2f75c0df64736f6c63430007010033",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol/MerkleProof.dbg.json distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol/MerkleProof.dbg.json
--- distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol/MerkleProof.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol/MerkleProof.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol/MerkleProof.json distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol/MerkleProof.json
--- distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol/MerkleProof.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol/MerkleProof.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,10 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "MerkleProof",
-  "sourceName": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol",
-  "abi": [],
-  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204cd25261afdf5e8f3937d0232faa515b0f1f77b567d36cc64ddecfd933aae0c264736f6c63430007010033",
-  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204cd25261afdf5e8f3937d0232faa515b0f1f77b567d36cc64ddecfd933aae0c264736f6c63430007010033",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol/Ownable.dbg.json distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol/Ownable.dbg.json
--- distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol/Ownable.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol/Ownable.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol/Ownable.json distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol/Ownable.json
--- distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol/Ownable.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol/Ownable.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,63 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "Ownable",
-  "sourceName": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol",
-  "abi": [
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "previousOwner",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "newOwner",
-          "type": "address"
-        }
-      ],
-      "name": "OwnershipTransferred",
-      "type": "event"
-    },
-    {
-      "inputs": [],
-      "name": "owner",
-      "outputs": [
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "renounceOwnership",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "newOwner",
-          "type": "address"
-        }
-      ],
-      "name": "transferOwnership",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol/SafeERC20.dbg.json distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol/SafeERC20.dbg.json
--- distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol/SafeERC20.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol/SafeERC20.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol/SafeERC20.json distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol/SafeERC20.json
--- distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol/SafeERC20.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol/SafeERC20.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,10 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "SafeERC20",
-  "sourceName": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol",
-  "abi": [],
-  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205801a87594692cb1dfa10218ef0a4297bff26fc3d36fe741df62a51c598d4fae64736f6c63430007010033",
-  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205801a87594692cb1dfa10218ef0a4297bff26fc3d36fe741df62a51c598d4fae64736f6c63430007010033",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/contracts/MerkleOrchard.sol/MerkleOrchard.dbg.json distributors/artifacts/contracts/MerkleOrchard.sol/MerkleOrchard.dbg.json
--- distributors/artifacts/contracts/MerkleOrchard.sol/MerkleOrchard.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/contracts/MerkleOrchard.sol/MerkleOrchard.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/contracts/MerkleOrchard.sol/MerkleOrchard.json distributors/artifacts/contracts/MerkleOrchard.sol/MerkleOrchard.json
--- distributors/artifacts/contracts/MerkleOrchard.sol/MerkleOrchard.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/contracts/MerkleOrchard.sol/MerkleOrchard.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,458 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "MerkleOrchard",
-  "sourceName": "contracts/MerkleOrchard.sol",
-  "abi": [
-    {
-      "inputs": [
-        {
-          "internalType": "contract IVault",
-          "name": "vault",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "constructor"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "distributor",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "distributionId",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "bytes32",
-          "name": "merkleRoot",
-          "type": "bytes32"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "DistributionAdded",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "distributor",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "distributionId",
-          "type": "uint256"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "claimer",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "address",
-          "name": "recipient",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "DistributionClaimed",
-      "type": "event"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "claimer",
-          "type": "address"
-        },
-        {
-          "components": [
-            {
-              "internalType": "uint256",
-              "name": "distributionId",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "balance",
-              "type": "uint256"
-            },
-            {
-              "internalType": "address",
-              "name": "distributor",
-              "type": "address"
-            },
-            {
-              "internalType": "uint256",
-              "name": "tokenIndex",
-              "type": "uint256"
-            },
-            {
-              "internalType": "bytes32[]",
-              "name": "merkleProof",
-              "type": "bytes32[]"
-            }
-          ],
-          "internalType": "struct MerkleOrchard.Claim[]",
-          "name": "claims",
-          "type": "tuple[]"
-        },
-        {
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        }
-      ],
-      "name": "claimDistributions",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "claimer",
-          "type": "address"
-        },
-        {
-          "components": [
-            {
-              "internalType": "uint256",
-              "name": "distributionId",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "balance",
-              "type": "uint256"
-            },
-            {
-              "internalType": "address",
-              "name": "distributor",
-              "type": "address"
-            },
-            {
-              "internalType": "uint256",
-              "name": "tokenIndex",
-              "type": "uint256"
-            },
-            {
-              "internalType": "bytes32[]",
-              "name": "merkleProof",
-              "type": "bytes32[]"
-            }
-          ],
-          "internalType": "struct MerkleOrchard.Claim[]",
-          "name": "claims",
-          "type": "tuple[]"
-        },
-        {
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        }
-      ],
-      "name": "claimDistributionsToInternalBalance",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "claimer",
-          "type": "address"
-        },
-        {
-          "components": [
-            {
-              "internalType": "uint256",
-              "name": "distributionId",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "balance",
-              "type": "uint256"
-            },
-            {
-              "internalType": "address",
-              "name": "distributor",
-              "type": "address"
-            },
-            {
-              "internalType": "uint256",
-              "name": "tokenIndex",
-              "type": "uint256"
-            },
-            {
-              "internalType": "bytes32[]",
-              "name": "merkleProof",
-              "type": "bytes32[]"
-            }
-          ],
-          "internalType": "struct MerkleOrchard.Claim[]",
-          "name": "claims",
-          "type": "tuple[]"
-        },
-        {
-          "internalType": "contract IERC20[]",
-          "name": "tokens",
-          "type": "address[]"
-        },
-        {
-          "internalType": "contract IDistributorCallback",
-          "name": "callbackContract",
-          "type": "address"
-        },
-        {
-          "internalType": "bytes",
-          "name": "callbackData",
-          "type": "bytes"
-        }
-      ],
-      "name": "claimDistributionsWithCallback",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "merkleRoot",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "distributionId",
-          "type": "uint256"
-        }
-      ],
-      "name": "createDistribution",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "distributor",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "distributionId",
-          "type": "uint256"
-        }
-      ],
-      "name": "getDistributionRoot",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "distributor",
-          "type": "address"
-        }
-      ],
-      "name": "getNextDistributionId",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "distributor",
-          "type": "address"
-        }
-      ],
-      "name": "getRemainingBalance",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "getVault",
-      "outputs": [
-        {
-          "internalType": "contract IVault",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "distributor",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "distributionId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "address",
-          "name": "claimer",
-          "type": "address"
-        }
-      ],
-      "name": "isClaimed",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "contract IERC20",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "distributor",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "distributionId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "address",
-          "name": "claimer",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "claimedBalance",
-          "type": "uint256"
-        },
-        {
-          "internalType": "bytes32[]",
-          "name": "merkleProof",
-          "type": "bytes32[]"
-        }
-      ],
-      "name": "verifyClaim",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x60a060405234801561001057600080fd5b50604051611ab0380380611ab083398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c611a2161008f600039806102dc5250611a216000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638d928af811610076578063ece123541161005b578063ece123541461016f578063fb97812814610182578063fea7364914610195576100be565b80638d928af814610147578063a68d1e9d1461015c576100be565b806362c8b7c9116100a757806362c8b7c91461010157806381ae8541146101145780638bf3e45714610134576100be565b80632b630140146100c3578063515ac052146100d8575b600080fd5b6100d66100d1366004611261565b6101a8565b005b6100eb6100e636600461144e565b6101bb565b6040516100f89190611785565b60405180910390f35b6100eb61010f3660046114a0565b610226565b6101276101223660046113d6565b61024e565b6040516100f89190611790565b6100d6610142366004611261565b610274565b61014f6102da565b6040516100f891906117e6565b6100d661016a3660046112d4565b6102fe565b6100d661017d366004611525565b6103e9565b6101276101903660046113d6565b610636565b6101276101a336600461140e565b61065a565b6101b683848484600061068b565b505050565b60008060006101c985610ab7565b9150915060006101d98888610ac5565b600090815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916845282528083209583529490529290922054600190911b161515915050949350505050565b6000806102338888610ac5565b90506102428187878787610af8565b98975050505050505050565b60008061025b8484610ac5565b6000908152600360205260409020549150505b92915050565b3373ffffffffffffffffffffffffffffffffffffffff8416146102cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c390611909565b60405180910390fd5b6101b683848484600161068b565b7f000000000000000000000000000000000000000000000000000000000000000090565b3373ffffffffffffffffffffffffffffffffffffffff87161461034d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c390611909565b61035b86848787600161068b565b6040517f55c524c100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906355c524c1906103af9085908590600401611799565b600060405180830381600087803b1580156103c957600080fd5b505af11580156103dd573d6000803e3d6000fd5b50505050505050505050565b3360006103f68683610ac5565b6000818152602081905260409020549091508314806104215750600081815260208190526040902054155b610457576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c390611807565b61047973ffffffffffffffffffffffffffffffffffffffff8716833087610b73565b6104a26104846102da565b73ffffffffffffffffffffffffffffffffffffffff88169086610c1c565b604080516001808252818301909252606091816020015b6104c1611025565b8152602001906001900390816104b95750506040805160a081018252600080825273ffffffffffffffffffffffffffffffffffffffff8b1660208301529181018890523060608201819052608082015282519293509183919061052057fe5b60200260200101819052506105336102da565b73ffffffffffffffffffffffffffffffffffffffff16630e8e3e84826040518263ffffffff1660e01b815260040161056b91906116ee565b600060405180830381600087803b15801561058557600080fd5b505af1158015610599573d6000803e3d6000fd5b505050600083815260036020908152604080832080548a019055600180835281842089855283528184208b9055868452918390529182902090870190555173ffffffffffffffffffffffffffffffffffffffff808a1692508516907f24a80c4e3ef74c732b163bfb2decfbe077a51aef3b708c93f8ef3dd06fc3ea7c906106259088908b908b9061196c565b60405180910390a350505050505050565b6000806106438484610ac5565b600090815260208190526040902054949350505050565b6000806106678585610ac5565b60009081526001602090815260408083208684529091529020549150509392505050565b6060825167ffffffffffffffff811180156106a557600080fd5b506040519080825280602002602001820160405280156106cf578160200160208202803683370190505b5090506000806000806106e0611055565b60005b8951811015610905578981815181106106f857fe5b602002602001015191506000806107128460000151610ab7565b9150915061073b8b85606001518151811061072957fe5b60200260200101518560400151610ac5565b88141561077d578187141561075857806001901b8617955061076f565b610764888f8989610d11565b819650806001901b95505b8360200151850194506107c0565b87156107995761078f888f8989610d11565b6107998886610dc5565b6107ac8b85606001518151811061072957fe5b9750819650806001901b9550836020015194505b505060018a51038114156107e4576107da868d8787610d11565b6107e48684610dc5565b6107fd8683600001518e85602001518660800151610af8565b610833576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c3906118d2565b81602001518783606001518151811061084857fe5b6020026020010181815101915081815250508b73ffffffffffffffffffffffffffffffffffffffff168983606001518151811061088157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff167ff3f33f2319d28d6a1402aa9e6ca0ae16d3ada035d576b3b8074b422aaa03b69885600001518f87602001516040516108f593929190611940565b60405180910390a46001016106e3565b50600087610914576001610917565b60025b90506060895167ffffffffffffffff8111801561093357600080fd5b5060405190808252806020026020018201604052801561096d57816020015b61095a611025565b8152602001906001900390816109525790505b50905060005b8a51811015610a35576040518060a0016040528084600381111561099357fe5b81526020018c83815181106109a457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018a83815181106109d357fe5b602002602001015181526020013073ffffffffffffffffffffffffffffffffffffffff1681526020018e73ffffffffffffffffffffffffffffffffffffffff16815250828281518110610a2257fe5b6020908102919091010152600101610973565b50610a3e6102da565b73ffffffffffffffffffffffffffffffffffffffff16630e8e3e84826040518263ffffffff1660e01b8152600401610a7691906116ee565b600060405180830381600087803b158015610a9057600080fd5b505af1158015610aa4573d6000803e3d6000fd5b5050505050505050505050505050505050565b61010081049160ff90911690565b60008282604051602001610ada92919061160d565b60405160208183030381529060405280519060200120905092915050565b6000808484604051602001610b0e929190611591565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152815160209283012060008a8152600184528281208a8252909352912054909150610b6890849083610e26565b979650505050505050565b610c16846323b872dd60e01b858585604051602401610b949392919061166e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610ec3565b50505050565b8015801590610ccd57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063dd62ed3e90610c7a9030908690600401611647565b60206040518083038186803b158015610c9257600080fd5b505afa158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca919061155f565b15155b15610cf257610cf28363095ea7b360e01b846000604051602401610b9492919061169f565b6101b68363095ea7b360e01b8484604051602401610b949291906116c8565b600084815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452825280832085845290915290205481811615610d83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c39061183e565b600094855260026020908152604080872073ffffffffffffffffffffffffffffffffffffffff9096168752948152848620938652929092529190922091179055565b600082815260036020526040902054811115610e0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c390611875565b6000918252600360205260409091208054919091039055565b600081815b8551811015610eb8576000868281518110610e4257fe5b60200260200101519050808311610e83578281604051602001610e669291906115c6565b604051602081830303815290604052805190602001209250610eaf565b8083604051602001610e969291906115c6565b6040516020818303038152906040528051906020012092505b50600101610e2b565b509092149392505050565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610eec91906115d4565b6000604051808303816000865af19150503d8060008114610f29576040519150601f19603f3d011682016040523d82523d6000602084013e610f2e565b606091505b50915091506000821415610f46573d6000803e3d6000fd5b610c16815160001480610f68575081806020019051810190610f6891906113af565b6101a281610f7957610f7981610f7d565b5050565b610fa7817f42414c0000000000000000000000000000000000000000000000000000000000610faa565b50565b7f08c379a000000000000000000000000000000000000000000000000000000000600090815260206004526007602452600a808404818106603090810160081b958390069590950190829004918206850160101b01602363ffffff0060e086901c160160181b0190930160c81b60445260e882901c90606490fd5b6040805160a081019091528060008152600060208201819052604082018190526060820181905260809091015290565b6040518060a001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b803561026e816119c9565b600082601f8301126110b5578081fd5b81356110c86110c3826119a9565b611982565b8181529150602080830190848101818402860182018710156110e957600080fd5b60005b84811015611108578135845292820192908201906001016110ec565b505050505092915050565b600082601f830112611123578081fd5b81356111316110c3826119a9565b81815291506020808301908481018184028601820187101561115257600080fd5b60005b84811015611108578135611168816119c9565b84529282019290820190600101611155565b600082601f83011261118a578081fd5b81356111986110c3826119a9565b818152915060208083019084810160005b84811015611108578135870160a0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c030112156111e857600080fd5b6111f181611982565b85830135815260408084013587830152606061120f8d82870161109a565b828401526080915081850135818401525082840135925067ffffffffffffffff83111561123b57600080fd5b6112498c88858701016110a5565b908201528652505092820192908201906001016111a9565b600080600060608486031215611275578283fd5b8335611280816119c9565b9250602084013567ffffffffffffffff8082111561129c578384fd5b6112a88783880161117a565b935060408601359150808211156112bd578283fd5b506112ca86828701611113565b9150509250925092565b60008060008060008060a087890312156112ec578182fd5b86356112f7816119c9565b9550602087013567ffffffffffffffff80821115611313578384fd5b61131f8a838b0161117a565b96506040890135915080821115611334578384fd5b6113408a838b01611113565b955060608901359150611352826119c9565b90935060808801359080821115611367578384fd5b818901915089601f83011261137a578384fd5b813581811115611388578485fd5b8a6020828501011115611399578485fd5b6020830194508093505050509295509295509295565b6000602082840312156113c0578081fd5b815180151581146113cf578182fd5b9392505050565b600080604083850312156113e8578182fd5b82356113f3816119c9565b91506020830135611403816119c9565b809150509250929050565b600080600060608486031215611422578283fd5b833561142d816119c9565b9250602084013561143d816119c9565b929592945050506040919091013590565b60008060008060808587031215611463578384fd5b843561146e816119c9565b9350602085013561147e816119c9565b9250604085013591506060850135611495816119c9565b939692955090935050565b60008060008060008060c087890312156114b8578182fd5b86356114c3816119c9565b955060208701356114d3816119c9565b94506040870135935060608701356114ea816119c9565b92506080870135915060a087013567ffffffffffffffff81111561150c578182fd5b61151889828a016110a5565b9150509295509295509295565b6000806000806080858703121561153a578182fd5b8435611545816119c9565b966020860135965060408601359560600135945092505050565b600060208284031215611570578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b60609290921b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168252601482015260340190565b918252602082015260400190565b60008251815b818110156115f457602081860181015185830152016115da565b818111156116025782828501525b509190910192915050565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b811682529190921b16601482015260280190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff92909216825260ff16602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b8281101561177857815180516004811061172157fe5b85528087015161173388870182611577565b50858101518686015260608082015161174e82880182611577565b50506080908101519061176386820183611577565b505060a093909301929085019060010161170b565b5091979650505050505050565b901515815260200190565b90815260200190565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60208082526017908201527f696e76616c696420646973747269627574696f6e204944000000000000000000604082015260600190565b60208082526012908201527f63616e6e6f7420636c61696d2074776963650000000000000000000000000000604082015260600190565b60208082526037908201527f6469737472696275746f72206861736e27742070726f7669646564207375666660408201527f696369656e7420746f6b656e7320666f7220636c61696d000000000000000000606082015260800190565b60208082526016908201527f696e636f7272656374206d65726b6c652070726f6f6600000000000000000000604082015260600190565b6020808252601b908201527f75736572206d75737420636c61696d206f776e2062616c616e63650000000000604082015260600190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff811182821017156119a157600080fd5b604052919050565b600067ffffffffffffffff8211156119bf578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff81168114610fa757600080fdfea26469706673582212203217d68d6815919f913ba2429f4f5786e39c735c9458c7cff11c4c5cf7f3e42c64736f6c63430007010033",
-  "deployedBytecode": "",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/contracts/MerkleRedeem.sol/MerkleRedeem.dbg.json distributors/artifacts/contracts/MerkleRedeem.sol/MerkleRedeem.dbg.json
--- distributors/artifacts/contracts/MerkleRedeem.sol/MerkleRedeem.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/contracts/MerkleRedeem.sol/MerkleRedeem.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/contracts/MerkleRedeem.sol/MerkleRedeem.json distributors/artifacts/contracts/MerkleRedeem.sol/MerkleRedeem.json
--- distributors/artifacts/contracts/MerkleRedeem.sol/MerkleRedeem.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/contracts/MerkleRedeem.sol/MerkleRedeem.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,445 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "MerkleRedeem",
-  "sourceName": "contracts/MerkleRedeem.sol",
-  "abi": [
-    {
-      "inputs": [
-        {
-          "internalType": "contract IVault",
-          "name": "_vault",
-          "type": "address"
-        },
-        {
-          "internalType": "contract IERC20",
-          "name": "_rewardToken",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "constructor"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "previousOwner",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "newOwner",
-          "type": "address"
-        }
-      ],
-      "name": "OwnershipTransferred",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "token",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "RewardAdded",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "rewardToken",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "RewardPaid",
-      "type": "event"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "liquidityProvider",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "begin",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "end",
-          "type": "uint256"
-        }
-      ],
-      "name": "claimStatus",
-      "outputs": [
-        {
-          "internalType": "bool[]",
-          "name": "",
-          "type": "bool[]"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "liquidityProvider",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "week",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "claimedBalance",
-          "type": "uint256"
-        },
-        {
-          "internalType": "bytes32[]",
-          "name": "merkleProof",
-          "type": "bytes32[]"
-        }
-      ],
-      "name": "claimWeek",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "liquidityProvider",
-          "type": "address"
-        },
-        {
-          "components": [
-            {
-              "internalType": "uint256",
-              "name": "week",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "balance",
-              "type": "uint256"
-            },
-            {
-              "internalType": "bytes32[]",
-              "name": "merkleProof",
-              "type": "bytes32[]"
-            }
-          ],
-          "internalType": "struct MerkleRedeem.Claim[]",
-          "name": "claims",
-          "type": "tuple[]"
-        }
-      ],
-      "name": "claimWeeks",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "liquidityProvider",
-          "type": "address"
-        },
-        {
-          "components": [
-            {
-              "internalType": "uint256",
-              "name": "week",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "balance",
-              "type": "uint256"
-            },
-            {
-              "internalType": "bytes32[]",
-              "name": "merkleProof",
-              "type": "bytes32[]"
-            }
-          ],
-          "internalType": "struct MerkleRedeem.Claim[]",
-          "name": "claims",
-          "type": "tuple[]"
-        }
-      ],
-      "name": "claimWeeksToInternalBalance",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "liquidityProvider",
-          "type": "address"
-        },
-        {
-          "internalType": "contract IDistributorCallback",
-          "name": "callbackContract",
-          "type": "address"
-        },
-        {
-          "internalType": "bytes",
-          "name": "callbackData",
-          "type": "bytes"
-        },
-        {
-          "components": [
-            {
-              "internalType": "uint256",
-              "name": "week",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "balance",
-              "type": "uint256"
-            },
-            {
-              "internalType": "bytes32[]",
-              "name": "merkleProof",
-              "type": "bytes32[]"
-            }
-          ],
-          "internalType": "struct MerkleRedeem.Claim[]",
-          "name": "claims",
-          "type": "tuple[]"
-        }
-      ],
-      "name": "claimWeeksWithCallback",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        },
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "name": "claimed",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "begin",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "end",
-          "type": "uint256"
-        }
-      ],
-      "name": "merkleRoots",
-      "outputs": [
-        {
-          "internalType": "bytes32[]",
-          "name": "",
-          "type": "bytes32[]"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "owner",
-      "outputs": [
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "renounceOwnership",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "rewardToken",
-      "outputs": [
-        {
-          "internalType": "contract IERC20",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "week",
-          "type": "uint256"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "_merkleRoot",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "seedAllocations",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "newOwner",
-          "type": "address"
-        }
-      ],
-      "name": "transferOwnership",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "vault",
-      "outputs": [
-        {
-          "internalType": "contract IVault",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "liquidityProvider",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "week",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "claimedBalance",
-          "type": "uint256"
-        },
-        {
-          "internalType": "bytes32[]",
-          "name": "merkleProof",
-          "type": "bytes32[]"
-        }
-      ],
-      "name": "verifyClaim",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "name": "weekMerkleRoots",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    }
-  ],
-  "bytecode": "",
-  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063eb0d07f511610066578063eb0d07f514610201578063f2fde38b14610214578063f7c618c114610227578063fbfa77cf1461022f576100f5565b8063715018a6146101b15780638da5cb5b146101b9578063c804c39a146101ce578063dd8c9c9d146101e1576100f5565b80633d421653116100d35780633d4216531461015857806347fb23c11461016b5780634cd488ab1461018b57806358b4e4b41461019e576100f5565b8063120aa877146100fa5780632f1868e41461012357806339436b0014610138575b600080fd5b61010d610108366004611457565b610237565b60405161011a9190611745565b60405180910390f35b6101366101313660046112bb565b610257565b005b61014b6101463660046114b1565b61033b565b60405161011a9190611676565b61013661016636600461126d565b6103f0565b61017e610179366004611372565b610442565b60405161011a9190611630565b610136610199366004611486565b610524565b6101366101ac3660046113a6565b610641565b610136610756565b6101c161076e565b60405161011a9190611568565b6101366101dc36600461126d565b61078a565b6101f46101ef366004611427565b6107d7565b60405161011a9190611750565b61010d61020f3660046113a6565b6107e9565b610136610222366004611251565b61083f565b6101c161087b565b6101c161089f565b600260209081526000928352604080842090915290825290205460ff1681565b3373ffffffffffffffffffffffffffffffffffffffff8616146102955760405162461bcd60e51b815260040161028c906118a8565b60405180910390fd5b60006102a18683610a3a565b90506102ad8582610b6e565b6040517f55c524c100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616906355c524c1906103019087908790600401611759565b600060405180830381600087803b15801561031b57600080fd5b505af115801561032f573d6000803e3d6000fd5b50505050505050505050565b60608183111561035d5760405162461bcd60e51b815260040161028c906117dd565b82820360010160608167ffffffffffffffff8111801561037c57600080fd5b506040519080825280602002602001820160405280156103a6578160200160208202803683370190505b50905060005b828110156103e75785810160009081526001602052604090205482518390839081106103d457fe5b60209081029190910101526001016103ac565b50949350505050565b3373ffffffffffffffffffffffffffffffffffffffff8316146104255760405162461bcd60e51b815260040161028c906118a8565b60006104318383610a3a565b905061043d8382610b6e565b505050565b6060818311156104645760405162461bcd60e51b815260040161028c906117dd565b82820360010160608167ffffffffffffffff8111801561048357600080fd5b506040519080825280602002602001820160405280156104ad578160200160208202803683370190505b50905060005b8281101561051a57858101600090815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8b168452909152902054825160ff9091169083908390811061050257fe5b911515602092830291909101909101526001016104b3565b5095945050505050565b61054f3361053061076e565b73ffffffffffffffffffffffffffffffffffffffff16146101aa610d4e565b6000838152600160205260409020541561057b5760405162461bcd60e51b815260040161028c90611871565b60008381526001602052604090208290556105ce73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333084610d5c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29826040516106349190611750565b60405180910390a2505050565b3373ffffffffffffffffffffffffffffffffffffffff8516146106765760405162461bcd60e51b815260040161028c906118a8565b600083815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816845290915290205460ff16156106c65760405162461bcd60e51b815260040161028c9061183a565b6106d2848484846107e9565b6106ee5760405162461bcd60e51b815260040161028c906117a6565b600083815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff88168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556107508483610d7d565b50505050565b6107623361053061076e565b61076c6000610e49565b565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b3373ffffffffffffffffffffffffffffffffffffffff8316146107bf5760405162461bcd60e51b815260040161028c906118a8565b60006107cb8383610a3a565b905061043d8382610d7d565b60016020526000908152604090205481565b60008085846040516020016107ff9291906114ec565b60405160208183030381529060405280519060200120905061083583600160008881526020019081526020016000205483610ebe565b9695505050505050565b61084b3361053061076e565b61086f73ffffffffffffffffffffffffffffffffffffffff821615156101ab610d4e565b61087881610e49565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b801580159061097457506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063dd62ed3e906109219030908690600401611589565b60206040518083038186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610971919061143f565b15155b15610a1b57610a1b8363095ea7b360e01b8460006040516024016109999291906115e1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f5b565b61043d8363095ea7b360e01b848460405160240161099992919061160a565b6000610a446110cb565b60005b8351811015610b6657838181518110610a5c57fe5b6020908102919091018101518051600090815260028352604080822073ffffffffffffffffffffffffffffffffffffffff8a168352909352919091205490925060ff1615610abc5760405162461bcd60e51b815260040161028c9061183a565b610ad4858360000151846020015185604001516107e9565b610af05760405162461bcd60e51b815260040161028c906117a6565b6020820151610b00908490611008565b8251600090815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8a168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915590935001610a47565b505092915050565b8015610d4a57604080516001808252818301909252606091816020015b610b936110ec565b815260200190600190039081610b8b5750506040805160a081018252600080825273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660208401529282018690523060608301529186166080820152825192935091839190610c1457fe5b60200260200101819052507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e84604051610c9c9190611750565b60405180910390a36040517f0e8e3e8400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630e8e3e8490610d169084906004016116ae565b600060405180830381600087803b158015610d3057600080fd5b505af1158015610d44573d6000803e3d6000fd5b50505050505b5050565b81610d4a57610d4a81611021565b610750846323b872dd60e01b858585604051602401610999939291906115b0565b8015610d4a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e83604051610e009190611750565b60405180910390a3610d4a73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016838361104b565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815b8551811015610f50576000868281518110610eda57fe5b60200260200101519050808311610f1b578281604051602001610efe929190611521565b604051602081830303815290604052805190602001209250610f47565b8083604051602001610f2e929190611521565b6040516020818303038152906040528051906020012092505b50600101610ec3565b509092149392505050565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610f84919061152f565b6000604051808303816000865af19150503d8060008114610fc1576040519150601f19603f3d011682016040523d82523d6000602084013e610fc6565b606091505b50915091506000821415610fde573d6000803e3d6000fd5b6107508151600014806110005750818060200190518101906110009190611407565b6101a2610d4e565b600082820161101a8482101583610d4e565b9392505050565b610878817f42414c000000000000000000000000000000000000000000000000000000000061106a565b61043d8363a9059cbb60e01b848460405160240161099992919061160a565b62461bcd60e51b600090815260206004526007602452600a808404818106603090810160081b958390069590950190829004918206850160101b01602363ffffff0060e086901c160160181b0190930160c81b60445260e882901c90606490fd5b60405180606001604052806000815260200160008152602001606081525090565b6040805160a081019091528060008152600060208201819052604082018190526060820181905260809091015290565b600082601f83011261112c578081fd5b813561113f61113a82611906565b6118df565b81815291506020808301908481018184028601820187101561116057600080fd5b60005b8481101561117f57813584529282019290820190600101611163565b505050505092915050565b600082601f83011261119a578081fd5b81356111a861113a82611906565b818152915060208083019084810160005b8481101561117f57813587016060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c030112156111f857600080fd5b611201816118df565b82860135815260408084013582880152918301359167ffffffffffffffff83111561122b57600080fd5b6112398c888587010161111c565b908201528652505092820192908201906001016111b9565b600060208284031215611262578081fd5b813561101a81611926565b6000806040838503121561127f578081fd5b823561128a81611926565b9150602083013567ffffffffffffffff8111156112a5578182fd5b6112b18582860161118a565b9150509250929050565b6000806000806000608086880312156112d2578081fd5b85356112dd81611926565b945060208601356112ed81611926565b9350604086013567ffffffffffffffff80821115611309578283fd5b818801915088601f83011261131c578283fd5b81358181111561132a578384fd5b89602082850101111561133b578384fd5b602083019550809450506060880135915080821115611358578283fd5b506113658882890161118a565b9150509295509295909350565b600080600060608486031215611386578283fd5b833561139181611926565b95602085013595506040909401359392505050565b600080600080608085870312156113bb578384fd5b84356113c681611926565b93506020850135925060408501359150606085013567ffffffffffffffff8111156113ef578182fd5b6113fb8782880161111c565b91505092959194509250565b600060208284031215611418578081fd5b8151801515811461101a578182fd5b600060208284031215611438578081fd5b5035919050565b600060208284031215611450578081fd5b5051919050565b60008060408385031215611469578182fd5b82359150602083013561147b81611926565b809150509250929050565b60008060006060848603121561149a578283fd5b505081359360208301359350604090920135919050565b600080604083850312156114c3578182fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff169052565b60609290921b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168252601482015260340190565b918252602082015260400190565b60008251815b8181101561154f5760208186018101518583015201611535565b8181111561155d5782828501525b509190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff92909216825260ff16602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561166a57835115158352928401929184019160010161164c565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561166a57835183529284019291840191600101611692565b602080825282518282018190526000919060409081850190868401855b828110156117385781518051600481106116e157fe5b8552808701516116f3888701826114d2565b50858101518686015260608082015161170e828801826114d2565b505060809081015190611723868201836114d2565b505060a09390930192908501906001016116cb565b5091979650505050505050565b901515815260200190565b90815260200190565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b60208082526016908201527f496e636f7272656374206d65726b6c652070726f6f6600000000000000000000604082015260600190565b6020808252602a908201527f7765656b73206d7573742062652073706563696669656420696e20617363656e60408201527f64696e67206f7264657200000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f63616e6e6f7420636c61696d2074776963650000000000000000000000000000604082015260600190565b6020808252601a908201527f63616e6e6f742072657772697465206d65726b6c6520726f6f74000000000000604082015260600190565b6020808252601b908201527f75736572206d75737420636c61696d206f776e2062616c616e63650000000000604082015260600190565b60405181810167ffffffffffffffff811182821017156118fe57600080fd5b604052919050565b600067ffffffffffffffff82111561191c578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff8116811461087857600080fdfea2646970667358221220670f3325ef61ed9526df87bc44efd9c676f3f02c25c81e7216984e1916aaf57a64736f6c63430007010033",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/contracts/test/MockRewardCallback.sol/MockRewardCallback.dbg.json distributors/artifacts/contracts/test/MockRewardCallback.sol/MockRewardCallback.dbg.json
--- distributors/artifacts/contracts/test/MockRewardCallback.sol/MockRewardCallback.dbg.json	2022-10-27 20:31:00.000000000 +0200
+++ distributors/artifacts/contracts/test/MockRewardCallback.sol/MockRewardCallback.dbg.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-{
-  "_format": "hh-sol-dbg-1",
-  "buildInfo": "../../../build-info/adad1bfca3a603060748c6d5bfecbe52.json"
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/artifacts/contracts/test/MockRewardCallback.sol/MockRewardCallback.json distributors/artifacts/contracts/test/MockRewardCallback.sol/MockRewardCallback.json
--- distributors/artifacts/contracts/test/MockRewardCallback.sol/MockRewardCallback.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/artifacts/contracts/test/MockRewardCallback.sol/MockRewardCallback.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,30 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "MockRewardCallback",
-  "sourceName": "contracts/test/MockRewardCallback.sol",
-  "abi": [
-    {
-      "anonymous": false,
-      "inputs": [],
-      "name": "CallbackReceived",
-      "type": "event"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes",
-          "name": "",
-          "type": "bytes"
-        }
-      ],
-      "name": "distributorCallback",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x608060405234801561001057600080fd5b50610109806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806355c524c114602d575b600080fd5b603c6038366004606b565b603e565b005b6040517f75c6df91317619d52e205eeb6356f6ac5ae7fd8cf0c2de8f22b96d5294170dda90600090a15050565b60008060208385031215607c578182fd5b823567ffffffffffffffff808211156092578384fd5b818501915085601f83011260a4578384fd5b81358181111560b1578485fd5b86602082850101111560c1578485fd5b6020929092019691955090935050505056fea26469706673582212206bdb60446ccb44347851adaec84725e282e16800dd0523fec019aad7983078fa64736f6c63430007010033",
-  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c806355c524c114602d575b600080fd5b603c6038366004606b565b603e565b005b6040517f75c6df91317619d52e205eeb6356f6ac5ae7fd8cf0c2de8f22b96d5294170dda90600090a15050565b60008060208385031215607c578182fd5b823567ffffffffffffffff808211156092578384fd5b818501915085601f83011260a4578384fd5b81358181111560b1578485fd5b86602082850101111560c1578485fd5b6020929092019691955090935050505056fea26469706673582212206bdb60446ccb44347851adaec84725e282e16800dd0523fec019aad7983078fa64736f6c63430007010033",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
\ No newline at end of file
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/cache/solidity-files-cache.json distributors/cache/solidity-files-cache.json
--- distributors/cache/solidity-files-cache.json	2022-10-28 09:53:21.000000000 +0200
+++ distributors/cache/solidity-files-cache.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,751 +0,0 @@
-{
-  "_format": "hh-sol-cache-2",
-  "files": {
-    "/Users/b/workspace/DAOISM/daoism_certodistributors/contracts/MerkleOrchard.sol": {
-      "lastModificationDate": 1666881723516,
-      "contentHash": "643cfcc9945f45ae27b0562a7420e89e",
-      "sourceName": "contracts/MerkleOrchard.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [
-        "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol",
-        "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol",
-        "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol",
-        "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol",
-        "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol",
-        "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol"
-      ],
-      "versionPragmas": [
-        "^0.7.0"
-      ],
-      "artifacts": [
-        "MerkleOrchard"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/distributors/IDistributorCallback.sol": {
-      "lastModificationDate": 1666881723524,
-      "contentHash": "97c3781593cfc00537ae96d55e24821b",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "IDistributorCallback"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certosolidity-utils/contracts/openzeppelin/SafeERC20.sol": {
-      "lastModificationDate": 1666881723568,
-      "contentHash": "b6266e2d84894799754ab69304f54366",
-      "sourceName": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [
-        "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol",
-        "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol"
-      ],
-      "versionPragmas": [
-        "^0.7.0"
-      ],
-      "artifacts": [
-        "SafeERC20"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/vault/IAsset.sol": {
-      "lastModificationDate": 1666881723533,
-      "contentHash": "20c61578e7416055512409a25576fb1a",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "IAsset"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/vault/IVault.sol": {
-      "lastModificationDate": 1666881723534,
-      "contentHash": "46a20a7701464ab9c62cb907614fd3bb",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [
-        "../solidity-utils/openzeppelin/IERC20.sol",
-        "../solidity-utils/helpers/IAuthentication.sol",
-        "../solidity-utils/helpers/ISignaturesValidator.sol",
-        "../solidity-utils/helpers/ITemporarilyPausable.sol",
-        "../solidity-utils/misc/IWETH.sol",
-        "./IAsset.sol",
-        "./IAuthorizer.sol",
-        "./IFlashLoanRecipient.sol",
-        "./IProtocolFeesCollector.sol"
-      ],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "IVault"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certosolidity-utils/contracts/openzeppelin/MerkleProof.sol": {
-      "lastModificationDate": 1664782545966,
-      "contentHash": "451ab4a5ae36e6230cd0a492aef68572",
-      "sourceName": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [],
-      "versionPragmas": [
-        "^0.7.0"
-      ],
-      "artifacts": [
-        "MerkleProof"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/solidity-utils/openzeppelin/IERC20.sol": {
-      "lastModificationDate": 1666881723531,
-      "contentHash": "028dddcf9b178b241401b1ae8126c903",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "IERC20"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/solidity-utils/helpers/BalancerErrors.sol": {
-      "lastModificationDate": 1666881723530,
-      "contentHash": "51c1e7f957bf6e5d94912bbb29964da8",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "Errors"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/vault/IAuthorizer.sol": {
-      "lastModificationDate": 1666881723533,
-      "contentHash": "03599610995051c98edd4f72102136b2",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "IAuthorizer"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol": {
-      "lastModificationDate": 1666881723530,
-      "contentHash": "48de5f36515898c9e9ddcd00f651ef86",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "ISignaturesValidator"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/solidity-utils/helpers/IAuthentication.sol": {
-      "lastModificationDate": 1666881723530,
-      "contentHash": "63f8c7b7a4ac329c8104063a025a991b",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "IAuthentication"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol": {
-      "lastModificationDate": 1666881723530,
-      "contentHash": "5a94e6420fe95c3e0fa16e78fb8f74c3",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "ITemporarilyPausable"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/vault/IFlashLoanRecipient.sol": {
-      "lastModificationDate": 1666881723533,
-      "contentHash": "31e2c769fc0ac25db2d9b46225793f01",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [
-        "../solidity-utils/openzeppelin/IERC20.sol"
-      ],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "IFlashLoanRecipient"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/vault/IProtocolFeesCollector.sol": {
-      "lastModificationDate": 1666881723534,
-      "contentHash": "26a23f2667431cfc1ea8aa5e69edef63",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [
-        "../solidity-utils/openzeppelin/IERC20.sol",
-        "./IVault.sol",
-        "./IAuthorizer.sol"
-      ],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "IProtocolFeesCollector"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certointerfaces/contracts/solidity-utils/misc/IWETH.sol": {
-      "lastModificationDate": 1666881723531,
-      "contentHash": "8347e7eef0bb47de8851ecbcf8eb590c",
-      "sourceName": "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [
-        "../openzeppelin/IERC20.sol"
-      ],
-      "versionPragmas": [
-        ">=0.7.0 <0.9.0"
-      ],
-      "artifacts": [
-        "IWETH"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certodistributors/contracts/MerkleRedeem.sol": {
-      "lastModificationDate": 1666881723516,
-      "contentHash": "0190ff6362dc842cb74e2d1e559d7434",
-      "sourceName": "contracts/MerkleRedeem.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [
-        "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol",
-        "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol",
-        "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol",
-        "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol",
-        "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol",
-        "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol",
-        "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol",
-        "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol"
-      ],
-      "versionPragmas": [
-        "^0.7.0"
-      ],
-      "artifacts": [
-        "MerkleRedeem"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certosolidity-utils/contracts/openzeppelin/Ownable.sol": {
-      "lastModificationDate": 1664782545966,
-      "contentHash": "f6de9ac7d9c592d04e66585483d4b08e",
-      "sourceName": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [
-        "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol"
-      ],
-      "versionPragmas": [
-        "^0.7.0"
-      ],
-      "artifacts": [
-        "Ownable"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certosolidity-utils/contracts/math/FixedPoint.sol": {
-      "lastModificationDate": 1666881723568,
-      "contentHash": "946e0917f90d197b206be0fa20db7be2",
-      "sourceName": "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [
-        "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol",
-        "./LogExpMath.sol"
-      ],
-      "versionPragmas": [
-        "^0.7.0"
-      ],
-      "artifacts": [
-        "FixedPoint"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certosolidity-utils/contracts/math/LogExpMath.sol": {
-      "lastModificationDate": 1664782545965,
-      "contentHash": "2fd1c0da1df3124e9d380ad9d55f701f",
-      "sourceName": "@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [
-        "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol"
-      ],
-      "versionPragmas": [
-        "^0.7.0"
-      ],
-      "artifacts": [
-        "LogExpMath"
-      ]
-    },
-    "/Users/b/workspace/DAOISM/daoism_certodistributors/contracts/test/MockRewardCallback.sol": {
-      "lastModificationDate": 1664782545931,
-      "contentHash": "b111b6a6f4c050ae1340af1d0e78cbce",
-      "sourceName": "contracts/test/MockRewardCallback.sol",
-      "solcConfig": {
-        "version": "0.7.1",
-        "settings": {
-          "optimizer": {
-            "enabled": true,
-            "runs": 9999
-          },
-          "outputSelection": {
-            "*": {
-              "*": [
-                "abi",
-                "evm.bytecode",
-                "evm.deployedBytecode",
-                "evm.methodIdentifiers",
-                "metadata"
-              ],
-              "": [
-                "ast"
-              ]
-            }
-          }
-        }
-      },
-      "imports": [
-        "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol"
-      ],
-      "versionPragmas": [
-        "^0.7.0"
-      ],
-      "artifacts": [
-        "MockRewardCallback"
-      ]
-    }
-  }
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/contracts/MerkleOrchard.sol distributors/contracts/MerkleOrchard.sol
--- distributors/contracts/MerkleOrchard.sol	2022-10-28 09:21:25.000000000 +0200
+++ distributors/contracts/MerkleOrchard.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,13 +14,13 @@
 
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IAsset.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/MerkleProof.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/contracts/MerkleRedeem.sol distributors/contracts/MerkleRedeem.sol
--- distributors/contracts/MerkleRedeem.sol	2022-10-28 09:21:25.000000000 +0200
+++ distributors/contracts/MerkleRedeem.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,15 +14,15 @@
 
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IAsset.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/MerkleProof.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/Ownable.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/contracts/test/MockRewardCallback.sol distributors/contracts/test/MockRewardCallback.sol
--- distributors/contracts/test/MockRewardCallback.sol	2022-10-03 09:35:45.000000000 +0200
+++ distributors/contracts/test/MockRewardCallback.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../interfaces/contracts/distributors/IDistributorCallback.sol";
 
 contract MockRewardCallback is IDistributorCallback {
     event CallbackReceived();
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/CHANGELOG.md interfaces/CHANGELOG.md
--- interfaces/CHANGELOG.md	2022-10-29 16:38:40.000000000 +0200
+++ interfaces/CHANGELOG.md	2022-10-29 16:41:16.000000000 +0200
@@ -2,10 +2,6 @@
 
 ## Unreleased
 
-### New Interfaces
-
-- Added `IProtocolFeeSplitter`.
-
 ### New Features
 
 - Extended the valid compiler version range to any of the 0.7.x and 0.8.x line.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IProtocolFeeSplitter.sol interfaces/contracts/standalone-utils/IProtocolFeeSplitter.sol
--- interfaces/contracts/standalone-utils/IProtocolFeeSplitter.sol	2022-10-29 16:38:40.000000000 +0200
+++ interfaces/contracts/standalone-utils/IProtocolFeeSplitter.sol	2022-10-29 16:41:16.000000000 +0200
@@ -13,9 +13,10 @@
 // along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 pragma solidity >=0.7.0 <0.9.0;
+pragma experimental ABIEncoderV2;
 
-import "../vault/IVault.sol";
-import "./IProtocolFeesWithdrawer.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol";
 
 /**
  * @title ProtocolFeeSplitter
@@ -25,6 +26,13 @@
  * otherwise all BPT tokens go to Balancer's DAO treasury
  */
 interface IProtocolFeeSplitter {
+    // Packed to use 1 storage slot
+    // 1e18 (100% - maximum fee value) can fit in uint96
+    struct RevenueShareSettings {
+        uint96 revenueSharePercentageOverride;
+        address beneficiary;
+    }
+
     event FeesCollected(
         bytes32 indexed poolId,
         address indexed beneficiary,
@@ -75,7 +83,7 @@
     /**
      * @notice Returns default revenue sharing fee percentage
      */
-    function getDefaultRevenueSharingFeePercentage() external view returns (uint256);
+    function getDefaultRevenueSharingFeePercentage() external returns (uint256);
 
     /**
      * @notice Returns amounts that can be colected
@@ -83,28 +91,25 @@
      * @return beneficiaryAmount The amount of tokens sent to pool's beneficiary
      * @return treasuryAmount The amount of tokens sent to Balancer's treasury
      */
-    function getAmounts(bytes32 poolId) external view returns (uint256 beneficiaryAmount, uint256 treasuryAmount);
+    function getAmounts(bytes32 poolId) external returns (uint256 beneficiaryAmount, uint256 treasuryAmount);
 
     /**
-     * @notice Returns Balancer's treasury address.
+     * @notice Returns Balancer's treasury address
      */
-    function getTreasury() external view returns (address);
+    function getTreasury() external returns (address);
 
     /**
-     * @notice Returns the Protocol Fees Withdrawer address.
+     * @notice Returns Protocol Fees Withdrawer
      */
-    function getProtocolFeesWithdrawer() external view returns (IProtocolFeesWithdrawer);
+    function getProtocolFeesWithdrawer() external returns (IProtocolFeesWithdrawer);
 
     /**
-     * @notice Returns Balancer's vault address.
+     * @notice Returns Balancer's vault address
      */
-    function getVault() external view returns (IVault);
+    function getVault() external returns (IVault);
 
     /**
-     * @notice Returns a Pool's settings.
+     * @notice Returns Balancer's vault address
      */
-    function getPoolSettings(bytes32 poolId)
-        external
-        view
-        returns (uint256 revenueSharePercentageOverride, address beneficiary);
+    function getPoolSettings(bytes32 poolId) external returns (RevenueShareSettings memory);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/BalancerMinter.sol liquidity-mining/contracts/BalancerMinter.sol
--- liquidity-mining/contracts/BalancerMinter.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/BalancerMinter.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,15 +14,15 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeController.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeMath.sol";
+import "../../solidity-utils/contracts/openzeppelin/EIP712.sol";
+import "../../solidity-utils/contracts/helpers/EOASignaturesValidator.sol";
 
 contract BalancerMinter is IBalancerMinter, ReentrancyGuard, EOASignaturesValidator {
     using SafeMath for uint256;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/BalancerTokenAdmin.sol liquidity-mining/contracts/BalancerTokenAdmin.sol
--- liquidity-mining/contracts/BalancerTokenAdmin.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/BalancerTokenAdmin.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // solhint-disable not-rely-on-time
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/SmartWalletChecker.sol liquidity-mining/contracts/SmartWalletChecker.sol
--- liquidity-mining/contracts/SmartWalletChecker.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/SmartWalletChecker.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 contract SmartWalletChecker is ISmartWalletChecker, SingletonAuthentication {
     using EnumerableSet for EnumerableSet.AddressSet;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/VotingEscrowDelegationProxy.sol liquidity-mining/contracts/VotingEscrowDelegationProxy.sol
--- liquidity-mining/contracts/VotingEscrowDelegationProxy.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/VotingEscrowDelegationProxy.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IVeDelegation.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IVeDelegation.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 contract VotingEscrowDelegationProxy is SingletonAuthentication {
     IERC20 private immutable _votingEscrow;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/AuthorizerAdaptor.sol liquidity-mining/contracts/admin/AuthorizerAdaptor.sol
--- liquidity-mining/contracts/admin/AuthorizerAdaptor.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/admin/AuthorizerAdaptor.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 /**
  * @title Authorizer Adaptor
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol
--- liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 /**
  * @title ChildChainGaugeTokenAdder
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/DistributionScheduler.sol liquidity-mining/contracts/admin/DistributionScheduler.sol
--- liquidity-mining/contracts/admin/DistributionScheduler.sol	2022-10-28 09:21:25.000000000 +0200
+++ liquidity-mining/contracts/admin/DistributionScheduler.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 // solhint-disable not-rely-on-time
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/GaugeAdder.sol liquidity-mining/contracts/admin/GaugeAdder.sol
--- liquidity-mining/contracts/admin/GaugeAdder.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/admin/GaugeAdder.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,14 +14,14 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeAdder.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeAdder.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 contract GaugeAdder is IGaugeAdder, SingletonAuthentication, ReentrancyGuard {
     using EnumerableSet for EnumerableSet.AddressSet;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/fee-distribution/FeeDistributor.sol liquidity-mining/contracts/fee-distribution/FeeDistributor.sol
--- liquidity-mining/contracts/fee-distribution/FeeDistributor.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/fee-distribution/FeeDistributor.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,16 +15,16 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IFeeDistributor.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IVotingEscrow.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/OptionalOnlyCaller.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../interfaces/contracts/liquidity-mining/IFeeDistributor.sol";
+import "../../interfaces/contracts/liquidity-mining/IVotingEscrow.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/OptionalOnlyCaller.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeMath.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // solhint-disable not-rely-on-time
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol
--- liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainStreamer.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainStreamer.sol";
 
 /**
  * @title ChildChainGaugeRewardHelper
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol
--- liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol	2022-10-28 09:21:25.000000000 +0200
+++ liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
 
 contract ChildChainLiquidityGaugeFactory is IChildChainLiquidityGaugeFactory {
     // RewardsOnlyGauge expects the claim function selector to be left padded with zeros.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/StakelessGauge.sol.orig liquidity-mining/contracts/gauges/StakelessGauge.sol.orig
--- liquidity-mining/contracts/gauges/StakelessGauge.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/StakelessGauge.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,195 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+
+import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakelessGauge.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+
+abstract contract StakelessGauge is IStakelessGauge, ReentrancyGuard {
+    uint256 public constant MAX_RELATIVE_WEIGHT_CAP = 1e18;
+
+    IERC20 internal immutable _balToken;
+    IBalancerTokenAdmin private immutable _tokenAdmin;
+    IBalancerMinter private immutable _minter;
+    IGaugeController private immutable _gaugeController;
+    IAuthorizerAdaptor private immutable _authorizerAdaptor;
+
+    event Checkpoint(uint256 indexed periodTime, uint256 periodEmissions);
+
+    // solhint-disable var-name-mixedcase
+    uint256 private immutable _RATE_REDUCTION_TIME;
+    uint256 private immutable _RATE_REDUCTION_COEFFICIENT;
+    uint256 private immutable _RATE_DENOMINATOR;
+    // solhint-enable var-name-mixedcase
+
+    uint256 private _rate;
+    uint256 private _period;
+    uint256 private _startEpochTime;
+
+    uint256 private _emissions;
+    bool private _isKilled;
+
+    uint256 private _relativeWeightCap;
+
+    constructor(IBalancerMinter minter) {
+        IBalancerTokenAdmin tokenAdmin = IBalancerTokenAdmin(minter.getBalancerTokenAdmin());
+        IERC20 balToken = tokenAdmin.getBalancerToken();
+        IGaugeController gaugeController = minter.getGaugeController();
+
+        _balToken = balToken;
+        _tokenAdmin = tokenAdmin;
+        _minter = minter;
+        _gaugeController = gaugeController;
+        _authorizerAdaptor = gaugeController.admin();
+
+        _RATE_REDUCTION_TIME = tokenAdmin.RATE_REDUCTION_TIME();
+        _RATE_REDUCTION_COEFFICIENT = tokenAdmin.RATE_REDUCTION_COEFFICIENT();
+        _RATE_DENOMINATOR = tokenAdmin.RATE_DENOMINATOR();
+
+        // Prevent initialisation of implementation contract
+        // Choice of `type(uint256).max` prevents implementation from being checkpointed
+        _period = type(uint256).max;
+    }
+
+    // solhint-disable-next-line func-name-mixedcase
+    function __StakelessGauge_init(uint256 relativeWeightCap) internal {
+        require(_period == 0, "Already initialized");
+
+        // Because we calculate the rate locally, this gauge cannot
+        // be used prior to the start of the first emission period
+        uint256 rate = _tokenAdmin.rate();
+        require(rate != 0, "BalancerTokenAdmin not yet activated");
+
+        _rate = rate;
+        _period = _currentPeriod();
+        _startEpochTime = _tokenAdmin.startEpochTimeWrite();
+        _setRelativeWeightCap(relativeWeightCap);
+    }
+
+    function checkpoint() external payable override nonReentrant returns (bool) {
+        require(msg.sender == address(_authorizerAdaptor), "SENDER_NOT_ALLOWED");
+        uint256 lastPeriod = _period;
+        uint256 currentPeriod = _currentPeriod();
+
+        if (lastPeriod < currentPeriod) {
+            _gaugeController.checkpoint_gauge(address(this));
+
+            uint256 rate = _rate;
+            uint256 newEmissions = 0;
+            lastPeriod += 1;
+            uint256 nextEpochTime = _startEpochTime + _RATE_REDUCTION_TIME;
+            for (uint256 i = lastPeriod; i < lastPeriod + 255; ++i) {
+                if (i > currentPeriod) break;
+
+                uint256 periodTime = i * 1 weeks;
+                uint256 periodEmission = 0;
+                uint256 gaugeWeight = getCappedRelativeWeight(periodTime);
+
+                if (nextEpochTime >= periodTime && nextEpochTime < periodTime + 1 weeks) {
+                    // If the period crosses an epoch, we calculate a reduction in the rate
+                    // using the same formula as used in `BalancerTokenAdmin`. We perform the calculation
+                    // locally instead of calling to `BalancerTokenAdmin.rate()` because we are generating
+                    // the emissions for the upcoming week, so there is a possibility the new
+                    // rate has not yet been applied.
+
+                    // Calculate emission up until the epoch change
+                    uint256 durationInCurrentEpoch = nextEpochTime - periodTime;
+                    periodEmission = (gaugeWeight * rate * durationInCurrentEpoch) / 10**18;
+                    // Action the decrease in rate
+                    rate = (rate * _RATE_DENOMINATOR) / _RATE_REDUCTION_COEFFICIENT;
+                    // Calculate emission from epoch change to end of period
+                    uint256 durationInNewEpoch = 1 weeks - durationInCurrentEpoch;
+                    periodEmission += (gaugeWeight * rate * durationInNewEpoch) / 10**18;
+
+                    _rate = rate;
+                    _startEpochTime = nextEpochTime;
+                    nextEpochTime += _RATE_REDUCTION_TIME;
+                } else {
+                    periodEmission = (gaugeWeight * rate * 1 weeks) / 10**18;
+                }
+
+                emit Checkpoint(periodTime, periodEmission);
+                newEmissions += periodEmission;
+            }
+
+            _period = currentPeriod;
+            _emissions += newEmissions;
+
+            if (newEmissions > 0 && !_isKilled) {
+                _minter.mint(address(this));
+                _postMintAction(newEmissions);
+            }
+        }
+
+        return true;
+    }
+
+    function _currentPeriod() internal view returns (uint256) {
+        // solhint-disable-next-line not-rely-on-time
+        return (block.timestamp / 1 weeks) - 1;
+    }
+
+    function _postMintAction(uint256 mintAmount) internal virtual;
+
+    // solhint-disable func-name-mixedcase
+
+    function user_checkpoint(address) external pure override returns (bool) {
+        return true;
+    }
+
+    function integrate_fraction(address user) external view override returns (uint256) {
+        require(user == address(this), "Gauge can only mint for itself");
+        return _emissions;
+    }
+
+    function is_killed() external view override returns (bool) {
+        return _isKilled;
+    }
+
+    function killGauge() external override {
+        require(msg.sender == address(_authorizerAdaptor), "SENDER_NOT_ALLOWED");
+        _isKilled = true;
+    }
+
+    function unkillGauge() external override {
+        require(msg.sender == address(_authorizerAdaptor), "SENDER_NOT_ALLOWED");
+        _isKilled = false;
+    }
+
+    function setRelativeWeightCap(uint256 relativeWeightCap) external override {
+        require(msg.sender == address(_authorizerAdaptor), "SENDER_NOT_ALLOWED");
+        _setRelativeWeightCap(relativeWeightCap);
+    }
+
+    function _setRelativeWeightCap(uint256 relativeWeightCap) internal {
+        require(relativeWeightCap <= MAX_RELATIVE_WEIGHT_CAP, "Relative weight cap exceeds allowed absolute maximum");
+        _relativeWeightCap = relativeWeightCap;
+        emit RelativeWeightCapChanged(relativeWeightCap);
+    }
+
+    function getRelativeWeightCap() external view override returns (uint256) {
+        return _relativeWeightCap;
+    }
+
+    function getCappedRelativeWeight(uint256 time) public view override returns (uint256) {
+        return Math.min(_gaugeController.gauge_relative_weight(address(this), time), _relativeWeightCap);
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/StakelessGauge.sol.rej liquidity-mining/contracts/gauges/StakelessGauge.sol.rej
--- liquidity-mining/contracts/gauges/StakelessGauge.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/StakelessGauge.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,29 @@
+***************
+*** 14,26 ****
+  
+  pragma solidity ^0.7.0;
+  
+- import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakelessGauge.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+  
+  abstract contract StakelessGauge is IStakelessGauge, ReentrancyGuard {
+      IERC20 internal immutable _balToken;
+--- 14,26 ----
+  
+  pragma solidity ^0.7.0;
+  
++ import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
++ import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
++ import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
++ import "../../interfaces/contracts/liquidity-mining/IGaugeController.sol";
++ import "../../interfaces/contracts/liquidity-mining/IStakelessGauge.sol";
+  
++ import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+  
+  abstract contract StakelessGauge is IStakelessGauge, ReentrancyGuard {
+      IERC20 internal immutable _balToken;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol.orig liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol.orig
--- liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,87 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "../StakelessGauge.sol";
+import "./IGatewayRouter.sol";
+
+contract ArbitrumRootGauge is StakelessGauge {
+    using SafeERC20 for IERC20;
+
+    address private immutable _gateway;
+    IGatewayRouter private immutable _gatewayRouter;
+    IArbitrumFeeProvider private immutable _factory;
+
+    address private _recipient;
+
+    constructor(IBalancerMinter minter, IGatewayRouter gatewayRouter) StakelessGauge(minter) {
+        _gateway = gatewayRouter.getGateway(address(minter.getBalancerToken()));
+        _gatewayRouter = gatewayRouter;
+        _factory = IArbitrumFeeProvider(msg.sender);
+    }
+
+    function initialize(address recipient, uint256 relativeWeightCap) external {
+        // This will revert in all calls except the first one
+        __StakelessGauge_init(relativeWeightCap);
+
+        _recipient = recipient;
+    }
+
+    function getRecipient() external view override returns (address) {
+        return _recipient;
+    }
+
+    function _postMintAction(uint256 mintAmount) internal override {
+        // Token needs to be approved on the gateway NOT the gateway router
+        _balToken.safeApprove(_gateway, mintAmount);
+
+        (uint256 gasLimit, uint256 gasPrice, uint256 maxSubmissionCost) = _factory.getArbitrumFees();
+        uint256 totalBridgeCost = _getTotalBridgeCost(gasLimit, gasPrice, maxSubmissionCost);
+        require(msg.value == totalBridgeCost, "Incorrect msg.value passed");
+
+        // After bridging, the BAL should arrive on Arbitrum within 10 minutes. If it
+        // does not, the L2 transaction may have failed due to an insufficient amount
+        // within `max_submission_cost + (gas_limit * gas_price)`
+        // In this case, the transaction can be manually broadcasted on Arbitrum by calling
+        // `ArbRetryableTicket(0x000000000000000000000000000000000000006e).redeem(redemption-TxID)`
+        // The calldata for this manual transaction is easily obtained by finding the reverted
+        // transaction in the tx history for 0x000000000000000000000000000000000000006e on Arbiscan.
+        // https://developer.offchainlabs.com/docs/l1_l2_messages#retryable-transaction-lifecycle
+        _gatewayRouter.outboundTransfer{ value: totalBridgeCost }(
+            _balToken,
+            _recipient,
+            mintAmount,
+            gasLimit,
+            gasPrice,
+            abi.encode(maxSubmissionCost, "")
+        );
+    }
+
+    function getTotalBridgeCost() external view returns (uint256) {
+        (uint256 gasLimit, uint256 gasPrice, uint256 maxSubmissionCost) = _factory.getArbitrumFees();
+        return _getTotalBridgeCost(gasLimit, gasPrice, maxSubmissionCost);
+    }
+
+    function _getTotalBridgeCost(
+        uint256 gasLimit,
+        uint256 gasPrice,
+        uint256 maxSubmissionCost
+    ) internal pure returns (uint256) {
+        return gasLimit * gasPrice + maxSubmissionCost;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol.rej liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol.rej
--- liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,19 @@
+***************
+*** 14,21 ****
+  
+  pragma solidity ^0.7.0;
+  
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol";
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+  
+  import "../StakelessGauge.sol";
+  import "./IGatewayRouter.sol";
+--- 14,21 ----
+  
+  pragma solidity ^0.7.0;
+  
++ import "../../interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol";
++ import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+  
+  import "../StakelessGauge.sol";
+  import "./IGatewayRouter.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol.orig liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol.orig
--- liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,91 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+
+import "../BaseGaugeFactory.sol";
+import "./ArbitrumRootGauge.sol";
+
+contract ArbitrumRootGaugeFactory is IArbitrumFeeProvider, BaseGaugeFactory, SingletonAuthentication {
+    uint64 private _gasLimit;
+    uint64 private _gasPrice;
+    uint64 private _maxSubmissionCost;
+
+    event ArbitrumFeesModified(uint256 gasLimit, uint256 gasPrice, uint256 maxSubmissionCost);
+
+    constructor(
+        IVault vault,
+        IBalancerMinter minter,
+        IGatewayRouter gatewayRouter,
+        uint64 gasLimit,
+        uint64 gasPrice,
+        uint64 maxSubmissionCost
+    ) BaseGaugeFactory(new ArbitrumRootGauge(minter, gatewayRouter)) SingletonAuthentication(vault) {
+        _gasLimit = gasLimit;
+        _gasPrice = gasPrice;
+        _maxSubmissionCost = maxSubmissionCost;
+    }
+
+    /**
+     * @notice Set the fees for the Arbitrum side of the bridging transaction
+     */
+    function getArbitrumFees()
+        external
+        view
+        override
+        returns (
+            uint256 gasLimit,
+            uint256 gasPrice,
+            uint256 maxSubmissionCost
+        )
+    {
+        gasLimit = _gasLimit;
+        gasPrice = _gasPrice;
+        maxSubmissionCost = _maxSubmissionCost;
+    }
+
+    /**
+     * @notice Deploys a new gauge which bridges all of its BAL allowance to a single recipient on Arbitrum.
+     * @dev Care must be taken to ensure that gauges deployed from this factory are
+     * suitable before they are added to the GaugeController.
+     * @param recipient The address to receive BAL minted from the gauge
+     * @param relativeWeightCap The relative weight cap for the created gauge
+     * @return The address of the deployed gauge
+     */
+    function create(address recipient, uint256 relativeWeightCap) external override returns (address) {
+        address gauge = _create();
+        ArbitrumRootGauge(gauge).initialize(recipient, relativeWeightCap);
+        return gauge;
+    }
+
+    /**
+     * @notice Set the fees for the Arbitrum side of the bridging transaction
+     */
+    function setArbitrumFees(
+        uint64 gasLimit,
+        uint64 gasPrice,
+        uint64 maxSubmissionCost
+    ) external override authenticate {
+        _gasLimit = gasLimit;
+        _gasPrice = gasPrice;
+        _maxSubmissionCost = maxSubmissionCost;
+        emit ArbitrumFeesModified(gasLimit, gasPrice, maxSubmissionCost);
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol.rej liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol.rej
--- liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,25 @@
+***************
+*** 15,25 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  import "./ArbitrumRootGauge.sol";
+  
+--- 15,25 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol";
++ import "../../interfaces/contracts/vault/IVault.sol";
+  
++ import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
++ import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  import "./ArbitrumRootGauge.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol
--- liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 interface IGatewayRouter {
     function outboundTransfer(
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol.orig liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol.orig
--- liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,48 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBaseGaugeFactory.sol";
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+
+import "../BaseGaugeFactory.sol";
+
+contract LiquidityGaugeFactory is BaseGaugeFactory {
+    constructor(IStakingLiquidityGauge gauge) BaseGaugeFactory(gauge) {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    /**
+     * @notice Deploys a new gauge for a Balancer pool.
+     * @dev As anyone can register arbitrary Balancer pools with the Vault,
+     * it's impossible to prove onchain that `pool` is a "valid" deployment.
+     *
+     * Care must be taken to ensure that gauges deployed from this factory are
+     * suitable before they are added to the GaugeController.
+     *
+     * It is possible to deploy multiple gauges for a single pool.
+     * @param pool The address of the pool for which to deploy a gauge
+     * @param relativeWeightCap The relative weight cap for the created gauge
+     * @return The address of the deployed gauge
+     */
+    function create(address pool, uint256 relativeWeightCap) external override returns (address) {
+        address gauge = _create();
+        IStakingLiquidityGauge(gauge).initialize(pool, relativeWeightCap);
+        return gauge;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol.rej liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol.rej
--- liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,23 @@
+***************
+*** 15,24 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  contract LiquidityGaugeFactory is ILiquidityGaugeFactory {
+      ILiquidityGauge private immutable _gaugeImplementation;
+--- 15,24 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
++ import "../../interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol";
+  
++ import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  contract LiquidityGaugeFactory is ILiquidityGaugeFactory {
+      ILiquidityGauge private immutable _gaugeImplementation;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol.orig liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol.orig
--- liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,44 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "../StakelessGauge.sol";
+
+contract SingleRecipientGauge is StakelessGauge {
+    using SafeERC20 for IERC20;
+
+    address private _recipient;
+
+    constructor(IBalancerMinter minter) StakelessGauge(minter) {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    function initialize(address recipient, uint256 relativeWeightCap) external {
+        // This will revert in all calls except the first one
+        __StakelessGauge_init(relativeWeightCap);
+
+        _recipient = recipient;
+    }
+
+    function getRecipient() external view override returns (address) {
+        return _recipient;
+    }
+
+    function _postMintAction(uint256 mintAmount) internal override {
+        _balToken.safeTransfer(_recipient, mintAmount);
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol.rej liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol.rej
--- liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,21 @@
+***************
+*** 14,22 ****
+  
+  pragma solidity ^0.7.0;
+  
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+  
+  import "../StakelessGauge.sol";
+  
+--- 14,22 ----
+  
+  pragma solidity ^0.7.0;
+  
++ import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+  
++ import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+  
+  import "../StakelessGauge.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol.orig liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol.orig
--- liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,43 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakelessGauge.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+
+import "../BaseGaugeFactory.sol";
+import "./SingleRecipientGauge.sol";
+
+contract SingleRecipientGaugeFactory is BaseGaugeFactory {
+    constructor(IBalancerMinter minter) BaseGaugeFactory(new SingleRecipientGauge(minter)) {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    /**
+     * @notice Deploys a new gauge which sends all of its BAL allowance to a single recipient.
+     * @dev Care must be taken to ensure that gauges deployed from this factory are
+     * suitable before they are added to the GaugeController.
+     * @param recipient The address to receive BAL minted from the gauge
+     * @param relativeWeightCap The relative weight cap for the created gauge
+     * @return The address of the deployed gauge
+     */
+    function create(address recipient, uint256 relativeWeightCap) external override returns (address) {
+        address gauge = _create();
+        SingleRecipientGauge(gauge).initialize(recipient, relativeWeightCap);
+        return gauge;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol.rej liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol.rej
--- liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,21 @@
+***************
+*** 15,23 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  import "./SingleRecipientGauge.sol";
+  
+--- 15,23 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
+  
++ import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  import "./SingleRecipientGauge.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol.orig liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol.orig
--- liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,85 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "../StakelessGauge.sol";
+
+interface IL1StandardBridge {
+    function depositERC20To(
+        address _l1Token,
+        address _l2Token,
+        address _to,
+        uint256 _amount,
+        uint32 _l2Gas,
+        bytes calldata _data
+    ) external;
+}
+
+contract OptimismRootGauge is StakelessGauge {
+    using SafeERC20 for IERC20;
+
+    IL1StandardBridge private immutable _optimismL1StandardBridge;
+    address private immutable _optimismBal;
+    IOptimismGasLimitProvider private immutable _factory;
+
+    // This value is kept in storage and not made immutable to allow for this contract to be proxyable
+    address private _recipient;
+
+    constructor(
+        IBalancerMinter minter,
+        IL1StandardBridge optimismL1StandardBridge,
+        address optimismBal
+    ) StakelessGauge(minter) {
+        _optimismL1StandardBridge = optimismL1StandardBridge;
+        _optimismBal = optimismBal;
+        _factory = IOptimismGasLimitProvider(msg.sender);
+    }
+
+    function initialize(address recipient, uint256 relativeWeightCap) external {
+        // This will revert in all calls except the first one
+        __StakelessGauge_init(relativeWeightCap);
+
+        _recipient = recipient;
+    }
+
+    function getRecipient() external view override returns (address) {
+        return _recipient;
+    }
+
+    function getOptimismBridge() external view returns (IL1StandardBridge) {
+        return _optimismL1StandardBridge;
+    }
+
+    function getOptimismBal() external view returns (address) {
+        return _optimismBal;
+    }
+
+    function _postMintAction(uint256 mintAmount) internal override {
+        _balToken.safeApprove(address(_optimismL1StandardBridge), mintAmount);
+
+        // This will transfer BAL to `_recipient` on the Optimism chain
+        _optimismL1StandardBridge.depositERC20To(
+            address(_balToken),
+            _optimismBal,
+            _recipient,
+            mintAmount,
+            _factory.getOptimismGasLimit(),
+            "0x"
+        );
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol.rej liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol.rej
--- liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,19 @@
+***************
+*** 14,21 ****
+  
+  pragma solidity ^0.7.0;
+  
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol";
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+  
+  import "../StakelessGauge.sol";
+  
+--- 14,21 ----
+  
+  pragma solidity ^0.7.0;
+  
++ import "../../interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol";
++ import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+  
+  import "../StakelessGauge.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol.orig liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol.orig
--- liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,70 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+
+import "../BaseGaugeFactory.sol";
+import "./OptimismRootGauge.sol";
+
+contract OptimismRootGaugeFactory is IOptimismGasLimitProvider, BaseGaugeFactory, SingletonAuthentication {
+    uint32 private _gasLimit;
+
+    event OptimismGasLimitModified(uint256 gasLimit);
+
+    constructor(
+        IVault vault,
+        IBalancerMinter minter,
+        IL1StandardBridge optimismL1StandardBridge,
+        address optimismBal,
+        uint32 gasLimit
+    )
+        BaseGaugeFactory(new OptimismRootGauge(minter, optimismL1StandardBridge, optimismBal))
+        SingletonAuthentication(vault)
+    {
+        _gasLimit = gasLimit;
+    }
+
+    /**
+     * @notice Returns the gas limit for the Optimism side of the bridging transaction
+     */
+    function getOptimismGasLimit() external view override returns (uint32) {
+        return _gasLimit;
+    }
+
+    /**
+     * @notice Deploys a new gauge which bridges all of its BAL allowance to a single recipient on Optimism.
+     * @dev Care must be taken to ensure that gauges deployed from this factory are
+     * suitable before they are added to the GaugeController.
+     * @param recipient The address to receive BAL minted from the gauge
+     * @param relativeWeightCap The relative weight cap for the created gauge
+     * @return The address of the deployed gauge
+     */
+    function create(address recipient, uint256 relativeWeightCap) external override returns (address) {
+        address gauge = _create();
+        OptimismRootGauge(gauge).initialize(recipient, relativeWeightCap);
+        return gauge;
+    }
+
+    /**
+     * @notice Set the gas limit for the Optimism side of the bridging transaction
+     */
+    function setOptimismGasLimit(uint32 gasLimit) external override authenticate {
+        _gasLimit = gasLimit;
+        emit OptimismGasLimitModified(gasLimit);
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol.rej liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol.rej
--- liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,23 @@
+***************
+*** 15,24 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  import "./OptimismRootGauge.sol";
+  
+--- 15,24 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
+  
++ import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
++ import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  import "./OptimismRootGauge.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol.orig liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol.orig
--- liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,73 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "../StakelessGauge.sol";
+
+interface IPolygonRootChainManager {
+    function depositFor(
+        address user,
+        IERC20 token,
+        bytes calldata depositData
+    ) external;
+}
+
+contract PolygonRootGauge is StakelessGauge {
+    using SafeERC20 for IERC20;
+
+    IPolygonRootChainManager private immutable _polygonRootChainManager;
+    address private immutable _polygonERC20Predicate;
+
+    // This value is kept in storage and not made immutable to allow for this contract to be proxyable
+    address private _recipient;
+
+    constructor(
+        IBalancerMinter minter,
+        IPolygonRootChainManager polygonRootChainManager,
+        address polygonERC20Predicate
+    ) StakelessGauge(minter) {
+        _polygonRootChainManager = polygonRootChainManager;
+        _polygonERC20Predicate = polygonERC20Predicate;
+    }
+
+    function initialize(address recipient, uint256 relativeWeightCap) external {
+        // This will revert in all calls except the first one
+        __StakelessGauge_init(relativeWeightCap);
+
+        _recipient = recipient;
+    }
+
+    function getRecipient() external view override returns (address) {
+        return _recipient;
+    }
+
+    function getPolygonBridge() external view returns (IPolygonRootChainManager) {
+        return _polygonRootChainManager;
+    }
+
+    function getPolygonERC20Predicate() external view returns (address) {
+        return _polygonERC20Predicate;
+    }
+
+    function _postMintAction(uint256 mintAmount) internal override {
+        // Token needs to be approved on the predicate NOT the main bridge contract
+        _balToken.safeApprove(_polygonERC20Predicate, mintAmount);
+
+        // This will transfer BAL to `_recipient` on the Polygon chain
+        _polygonRootChainManager.depositFor(_recipient, _balToken, abi.encode(mintAmount));
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol.rej liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol.rej
--- liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,17 @@
+***************
+*** 14,20 ****
+  
+  pragma solidity ^0.7.0;
+  
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+  
+  import "../StakelessGauge.sol";
+  
+--- 14,20 ----
+  
+  pragma solidity ^0.7.0;
+  
++ import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+  
+  import "../StakelessGauge.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol.orig liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol.orig
--- liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,45 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+
+import "../BaseGaugeFactory.sol";
+import "./PolygonRootGauge.sol";
+
+contract PolygonRootGaugeFactory is BaseGaugeFactory {
+    constructor(
+        IBalancerMinter minter,
+        IPolygonRootChainManager polygonRootChainManager,
+        address polygonERC20Predicate
+    ) BaseGaugeFactory(new PolygonRootGauge(minter, polygonRootChainManager, polygonERC20Predicate)) {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    /**
+     * @notice Deploys a new gauge which bridges all of its BAL allowance to a single recipient on Polygon.
+     * @dev Care must be taken to ensure that gauges deployed from this factory are
+     * suitable before they are added to the GaugeController.
+     * @param recipient The address to receive BAL minted from the gauge
+     * @param relativeWeightCap The relative weight cap for the created gauge
+     * @return The address of the deployed gauge
+     */
+    function create(address recipient, uint256 relativeWeightCap) external override returns (address) {
+        address gauge = _create();
+        PolygonRootGauge(gauge).initialize(recipient, relativeWeightCap);
+        return gauge;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol.rej liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol.rej
--- liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,21 @@
+***************
+*** 15,23 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  import "./PolygonRootGauge.sol";
+  
+--- 15,23 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
+  
++ import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  import "./PolygonRootGauge.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/MockGaugeController.sol liquidity-mining/contracts/test/MockGaugeController.sol
--- liquidity-mining/contracts/test/MockGaugeController.sol	2022-10-28 09:21:26.000000000 +0200
+++ liquidity-mining/contracts/test/MockGaugeController.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeController.sol";
 
 // For compatibility, we're keeping the same function names as in the original Curve code, including the mixed-case
 // naming convention.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol.orig liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol.orig
--- liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,35 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+
+import "../gauges/BaseGaugeFactory.sol";
+import "./MockLiquidityGauge.sol";
+
+contract MockLiquidityGaugeFactory is BaseGaugeFactory {
+    constructor(MockLiquidityGauge gaugeImplementation) BaseGaugeFactory(gaugeImplementation) {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    function create(address pool, uint256 relativeWeightCap) external override returns (address) {
+        address gauge = _create();
+
+        MockLiquidityGauge(gauge).initialize(pool, relativeWeightCap);
+
+        return gauge;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol.rej liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol.rej
--- liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,25 @@
+***************
+*** 15,25 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  import "./MockLiquidityGauge.sol";
+  
+--- 15,25 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol";
++ import "../../interfaces/contracts/vault/IVault.sol";
+  
++ import "../../solidity-utils/contracts/helpers/Authentication.sol";
++ import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
+  
+  import "./MockLiquidityGauge.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/MockRewardTokenDistributor.sol liquidity-mining/contracts/test/MockRewardTokenDistributor.sol
--- liquidity-mining/contracts/test/MockRewardTokenDistributor.sol	2022-10-28 09:21:26.000000000 +0200
+++ liquidity-mining/contracts/test/MockRewardTokenDistributor.sol	2022-10-29 16:41:16.000000000 +0200
@@ -17,8 +17,8 @@
 
 import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
 
 // solhint-disable func-name-mixedcase, var-name-mixedcase, not-rely-on-time
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/MockRewardTokenDistributor.sol.orig liquidity-mining/contracts/test/MockRewardTokenDistributor.sol.orig
--- liquidity-mining/contracts/test/MockRewardTokenDistributor.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ liquidity-mining/contracts/test/MockRewardTokenDistributor.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,80 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
+
+// solhint-disable func-name-mixedcase, var-name-mixedcase, not-rely-on-time
+
+/**
+ * @dev This contract is designed to mock LiquidityGaugeV5's interface for distributing external tokens.
+ */
+contract MockRewardTokenDistributor is IRewardTokenDistributor {
+    using SafeERC20 for IERC20;
+
+    uint256 private _rewardCount;
+    IERC20[8] private _rewardTokens;
+    mapping(IERC20 => Reward) private _rewardData;
+
+    function reward_tokens(uint256 index) external view override returns (IERC20) {
+        return _rewardTokens[index];
+    }
+
+    function reward_data(IERC20 token) external view override returns (Reward memory) {
+        return _rewardData[token];
+    }
+
+    function add_reward(IERC20 rewardToken, address distributor) external override {
+        _rewardTokens[_rewardCount] = rewardToken;
+        _rewardData[rewardToken] = Reward({
+            token: rewardToken,
+            distributor: distributor,
+            period_finish: 0,
+            rate: 0,
+            last_update: block.timestamp,
+            integral: 0
+        });
+
+        _rewardCount += 1;
+        require(_rewardCount < 8, "Too many reward tokens");
+    }
+
+    function set_reward_distributor(IERC20 rewardToken, address distributor) external override {
+        _rewardData[rewardToken].distributor = distributor;
+    }
+
+    function deposit_reward_token(IERC20 rewardToken, uint256 amount) external override {
+        require(_rewardData[rewardToken].distributor == msg.sender, "Only callable by reward distributor");
+        rewardToken.safeTransferFrom(msg.sender, address(this), amount);
+
+        // We don't care about the rest of the update.
+    }
+
+    function claim_rewards(address user) external override {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    function claimable_reward(address, address) external pure override returns (uint256) {
+        return 0;
+    }
+
+    function claimable_reward_write(address, address) external pure override returns (uint256) {
+        return 0;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/TestAccessControl.sol liquidity-mining/contracts/test/TestAccessControl.sol
--- liquidity-mining/contracts/test/TestAccessControl.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/test/TestAccessControl.sol	2022-10-29 16:41:16.000000000 +0200
@@ -2,8 +2,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 // This contract maintains the old AccessControl behaviour which is used by BalancerGovernanceToken in production
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/TestBalancerToken.sol liquidity-mining/contracts/test/TestBalancerToken.sol
--- liquidity-mining/contracts/test/TestBalancerToken.sol	2022-10-03 09:35:45.000000000 +0200
+++ liquidity-mining/contracts/test/TestBalancerToken.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Burnable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20Burnable.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
 
 import "./TestAccessControl.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/LinearMath.sol pool-linear/contracts/LinearMath.sol
--- pool-linear/contracts/LinearMath.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-linear/contracts/LinearMath.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // These functions start with an underscore, as if they were part of a contract and not a library. At some point this
 // should be fixed.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/LinearPool.sol.orig pool-linear/contracts/LinearPool.sol.orig
--- pool-linear/contracts/LinearPool.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ pool-linear/contracts/LinearPool.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,708 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol";
+import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+import "@balancer-labs/v2-interfaces/contracts/pool-linear/ILinearPool.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
+
+import "@balancer-labs/v2-pool-utils/contracts/BasePool.sol";
+import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+
+import "./LinearMath.sol";
+
+/**
+ * @dev Linear Pools are designed to hold two assets: "main" and "wrapped" tokens that have an equal value underlying
+ * token (e.g., DAI and waDAI). There must be an external feed available to provide an exact, non-manipulable exchange
+ * rate between the tokens. In particular, any reversible manipulation (e.g. causing the rate to increase and then
+ * decrease) can lead to severe issues and loss of funds.
+ *
+ * The Pool will register three tokens in the Vault however: the two assets and the BPT itself,
+ * so that BPT can be exchanged (effectively joining and exiting) via swaps.
+ *
+ * Despite inheriting from BasePool, much of the basic behavior changes. This Pool does not support regular joins and
+ * exits, as the initial BPT supply is 'preminted' during initialization. No further BPT can be minted, and BPT can
+ * only be burned if governance enables Recovery Mode and LPs use it to exit proportionally.
+ *
+ * Unlike most other Pools, this one does not attempt to create revenue by charging fees: value is derived by holding
+ * the wrapped, yield-bearing asset. However, the 'swap fee percentage' value is still used, albeit with a different
+ * meaning. This Pool attempts to hold a certain amount of "main" tokens, between a lower and upper target value.
+ * The pool charges fees on trades that move the balance outside that range, which are then paid back as incentives to
+ * traders whose swaps return the balance to the desired region.
+ *
+ * The net revenue via fees is expected to be zero: all collected fees are used to pay for this 'rebalancing'.
+ * Accordingly, this Pool does not pay any protocol fees.
+ */
+abstract contract LinearPool is ILinearPool, IGeneralPool, IRateProvider, BasePool {
+    using WordCodec for bytes32;
+    using FixedPoint for uint256;
+    using PriceRateCache for bytes32;
+    using BasePoolUserData for bytes;
+
+    uint256 private constant _TOTAL_TOKENS = 3; // Main token, wrapped token, BPT
+
+    // This is the maximum token amount the Vault can hold. In regular operation, the total BPT supply remains constant
+    // and equal to _INITIAL_BPT_SUPPLY, but most of it remains in the Pool, waiting to be exchanged for tokens. The
+    // actual amount of BPT in circulation is the total supply minus the amount held by the Pool, and is known as the
+    // 'virtual supply'.
+    // The total supply can only change if recovery mode is enabled and recovery mode exits are processed, resulting in
+    // BPT being burned. This BPT can never be minted again, so it is technically possible for the preminted supply to
+    // run out, but a) this process is controlled by Governance via enabling and disabling recovery mode, and b) the
+    // initial supply is so large that it would take a huge number of interactions to acquire sufficient tokens to join
+    // the Pool, and then burn the acquired BPT, resulting in prohibitively large gas costs.
+    uint256 private constant _INITIAL_BPT_SUPPLY = 2**(112) - 1;
+
+    IERC20 private immutable _mainToken;
+    IERC20 private immutable _wrappedToken;
+
+    // The indices of each token when registered, which can then be used to access the balances array.
+    uint256 private immutable _bptIndex;
+    uint256 private immutable _mainIndex;
+    uint256 private immutable _wrappedIndex;
+
+    // Both BPT and the main token have a regular, constant scaling factor (equal to FixedPoint.ONE for BPT, and
+    // dependent on the number of decimals for the main token). However, the wrapped token's scaling factor has two
+    // components: the usual token decimal scaling factor, and an externally provided rate used to convert wrapped
+    // tokens to an equivalent main token amount. This external rate is expected to be ever increasing, reflecting the
+    // fact that the wrapped token appreciates in value over time (e.g. because it is accruing interest).
+    uint256 private immutable _scalingFactorMainToken;
+    uint256 private immutable _scalingFactorWrappedToken;
+
+    // The lower and upper targets are in BasePool's misc data field, which has 192 bits available (as it shares the
+    // same storage slot as the swap fee percentage and recovery mode flag, which together take up 64 bits).
+    // We use 64 of these 192 for the targets (32 for each).
+    //
+    // The targets are already scaled by the main token's scaling factor (which makes the token behave as if it had 18
+    // decimals), but we only store the integer part: the targets must be multiplied by 1e18 before being used.
+    // This means the targets' resolution does not include decimal places in the main token (so e.g. a target of 500.1
+    // DAI is impossible). Since targets are expected to be relatively large, this is a non-issue. With 32 bits per
+    // target, we can represent values as high as ~4 billion (2^32).
+    // [        64 bits       |    32 bits   |    32 bits    | 128 bits ]
+    // [       reserved       | upper target |  lower target | reserved ]
+    // [  base pool swap fee  |                  misc data              ]
+    // [ MSB                                                        LSB ]
+
+    uint256 private constant _TARGET_SCALING = 1e18;
+
+    uint256 private constant _TARGET_BITS = 32;
+
+    uint256 private constant _LOWER_TARGET_OFFSET = 32;
+    uint256 private constant _UPPER_TARGET_OFFSET = 64;
+
+    uint256 private constant _MAX_UPPER_TARGET = (2**(32) - 1) * _TARGET_SCALING;
+
+    event TargetsSet(IERC20 indexed token, uint256 lowerTarget, uint256 upperTarget);
+
+    constructor(
+        IVault vault,
+        string memory name,
+        string memory symbol,
+        IERC20 mainToken,
+        IERC20 wrappedToken,
+        uint256 upperTarget,
+        address[] memory assetManagers,
+        uint256 swapFeePercentage,
+        uint256 pauseWindowDuration,
+        uint256 bufferPeriodDuration,
+        address owner
+    )
+        BasePool(
+            vault,
+            IVault.PoolSpecialization.GENERAL,
+            name,
+            symbol,
+            _sortTokens(mainToken, wrappedToken, this),
+            _insertNullBptAssetManager(mainToken, wrappedToken, assetManagers),
+            swapFeePercentage,
+            pauseWindowDuration,
+            bufferPeriodDuration,
+            owner
+        )
+    {
+        // Set tokens
+        _mainToken = mainToken;
+        _wrappedToken = wrappedToken;
+
+        // Set token indexes
+        (uint256 mainIndex, uint256 wrappedIndex, uint256 bptIndex) = _getSortedTokenIndexes(
+            mainToken,
+            wrappedToken,
+            this
+        );
+        _bptIndex = bptIndex;
+        _mainIndex = mainIndex;
+        _wrappedIndex = wrappedIndex;
+
+        // Set scaling factors
+        _scalingFactorMainToken = _computeScalingFactor(mainToken);
+        _scalingFactorWrappedToken = _computeScalingFactor(wrappedToken);
+
+        // Set initial targets. The lower target must be set to zero because initially there are no accumulated fees.
+        // Otherwise the pool would owe fees from the start, which would make the rate manipulable.
+        uint256 lowerTarget = 0;
+        _setTargets(mainToken, lowerTarget, upperTarget);
+    }
+
+    /**
+     * @dev Inserts a zero-valued entry in the `assetManagers` array at the BPT token index, ensuring that BPT is not
+     * managed even if the main or wrapped tokens are.
+     */
+    function _insertNullBptAssetManager(
+        IERC20 mainToken,
+        IERC20 wrappedToken,
+        address[] memory assetManagers
+    ) private view returns (address[] memory) {
+        (, , uint256 bptIndex) = _getSortedTokenIndexes(mainToken, wrappedToken, this);
+
+        address[] memory extendedAssetManagers = new address[](assetManagers.length + 1);
+        for (uint256 i = 0; i < extendedAssetManagers.length; ++i) {
+            if (i < bptIndex) {
+                extendedAssetManagers[i] = assetManagers[i];
+            } else if (i > bptIndex) {
+                extendedAssetManagers[i] = assetManagers[i - 1];
+            } else {
+                extendedAssetManagers[i] = address(0);
+            }
+        }
+
+        return extendedAssetManagers;
+    }
+
+    /**
+     * @notice Return the main token address as an IERC20.
+     */
+    function getMainToken() public view override returns (IERC20) {
+        return _mainToken;
+    }
+
+    /**
+     * @notice Return the wrapped token address as an IERC20.
+     */
+    function getWrappedToken() public view override returns (IERC20) {
+        return _wrappedToken;
+    }
+
+    /**
+     * @notice Return the index of the BPT token.
+     * @dev Note that this is an index into the registered token list (with 3 tokens).
+     */
+    function getBptIndex() public view override returns (uint256) {
+        return _bptIndex;
+    }
+
+    /**
+     * @notice Return the index of the main token.
+     * @dev Note that this is an index into the registered token list, which includes the BPT token.
+     */
+    function getMainIndex() external view override returns (uint256) {
+        return _mainIndex;
+    }
+
+    /**
+     * @notice Return the index of the wrapped token.
+     * @dev Note that this is an index into the registered token list, which includes the BPT token.
+     */
+    function getWrappedIndex() external view override returns (uint256) {
+        return _wrappedIndex;
+    }
+
+    /**
+     * @dev Finishes initialization of the Linear Pool: it is unusable before calling this function as no BPT will have
+     * been minted.
+     *
+     * Since Linear Pools have preminted BPT stored in the Vault, they require an initial join to deposit said BPT as
+     * their balance. Unfortunately, this cannot be performed during construction, as a join involves calling the
+     * `onJoinPool` function on the Pool, and the Pool will not have any code until construction finishes. Therefore,
+     * this must happen in a separate call.
+     *
+     * It is highly recommended to create Linear pools using the LinearPoolFactory, which calls `initialize`
+     * automatically.
+     */
+    function initialize() external {
+        bytes32 poolId = getPoolId();
+        (IERC20[] memory tokens, , ) = getVault().getPoolTokens(poolId);
+
+        // Joins typically involve the Pool receiving tokens in exchange for newly-minted BPT. In this case however, the
+        // Pool will mint the entire BPT supply to itself, and join itself with it.
+        uint256[] memory maxAmountsIn = new uint256[](_TOTAL_TOKENS);
+        maxAmountsIn[_bptIndex] = _INITIAL_BPT_SUPPLY;
+
+        // The first time this executes, it will call `_onInitializePool` (as the BPT supply will be zero). Future calls
+        // will be routed to `_onJoinPool`, which always reverts, meaning `initialize` will only execute once.
+        IVault.JoinPoolRequest memory request = IVault.JoinPoolRequest({
+            assets: _asIAsset(tokens),
+            maxAmountsIn: maxAmountsIn,
+            userData: "",
+            fromInternalBalance: false
+        });
+
+        getVault().joinPool(poolId, address(this), address(this), request);
+    }
+
+    /**
+     * @dev Implementation of onSwap, from IGeneralPool.
+     */
+    function onSwap(
+        SwapRequest memory request,
+        uint256[] memory balances,
+        uint256 indexIn,
+        uint256 indexOut
+    ) external override onlyVault(request.poolId) returns (uint256) {
+        _beforeSwapJoinExit();
+
+        // In most Pools, swaps involve exchanging one token held by the Pool for another. In this case however, since
+        // one of the three tokens is the BPT itself, a swap might also be a join (main/wrapped for BPT) or an exit
+        // (BPT for main/wrapped).
+        // All three swap types (swaps, joins and exits) are fully disabled if the emergency pause is enabled. Under
+        // these circumstances, the Pool should be exited using the regular Vault.exitPool function.
+
+        // Sanity check: this is not entirely necessary as the Vault's interface enforces the indices to be valid, but
+        // the check is cheap to perform.
+        _require(indexIn < _TOTAL_TOKENS && indexOut < _TOTAL_TOKENS, Errors.OUT_OF_BOUNDS);
+
+        // Note that we already know the indices of the main token, wrapped token and BPT, so there is no need to pass
+        // these indices to the inner functions.
+
+        // Upscale balances by the scaling factors (taking into account the wrapped token rate)
+        uint256[] memory scalingFactors = _scalingFactors();
+        _upscaleArray(balances, scalingFactors);
+
+        (uint256 lowerTarget, uint256 upperTarget) = getTargets();
+        LinearMath.Params memory params = LinearMath.Params({
+            fee: getSwapFeePercentage(),
+            lowerTarget: lowerTarget,
+            upperTarget: upperTarget
+        });
+
+        if (request.kind == IVault.SwapKind.GIVEN_IN) {
+            // The amount given is for token in, the amount calculated is for token out
+            request.amount = _upscale(request.amount, scalingFactors[indexIn]);
+            uint256 amountOut = _onSwapGivenIn(request, balances, params);
+
+            // amountOut tokens are exiting the Pool, so we round down.
+            return _downscaleDown(amountOut, scalingFactors[indexOut]);
+        } else {
+            // The amount given is for token out, the amount calculated is for token in
+            request.amount = _upscale(request.amount, scalingFactors[indexOut]);
+            uint256 amountIn = _onSwapGivenOut(request, balances, params);
+
+            // amountIn tokens are entering the Pool, so we round up.
+            return _downscaleUp(amountIn, scalingFactors[indexIn]);
+        }
+    }
+
+    function _onSwapGivenIn(
+        SwapRequest memory request,
+        uint256[] memory balances,
+        LinearMath.Params memory params
+    ) internal view returns (uint256) {
+        if (request.tokenIn == this) {
+            return _swapGivenBptIn(request, balances, params);
+        } else if (request.tokenIn == _mainToken) {
+            return _swapGivenMainIn(request, balances, params);
+        } else if (request.tokenIn == _wrappedToken) {
+            return _swapGivenWrappedIn(request, balances, params);
+        } else {
+            _revert(Errors.INVALID_TOKEN);
+        }
+    }
+
+    function _swapGivenBptIn(
+        SwapRequest memory request,
+        uint256[] memory balances,
+        LinearMath.Params memory params
+    ) internal view returns (uint256) {
+        _require(request.tokenOut == _mainToken || request.tokenOut == _wrappedToken, Errors.INVALID_TOKEN);
+        return
+            (request.tokenOut == _mainToken ? LinearMath._calcMainOutPerBptIn : LinearMath._calcWrappedOutPerBptIn)(
+                request.amount,
+                balances[_mainIndex],
+                balances[_wrappedIndex],
+                _getVirtualSupply(balances[_bptIndex]),
+                params
+            );
+    }
+
+    function _swapGivenMainIn(
+        SwapRequest memory request,
+        uint256[] memory balances,
+        LinearMath.Params memory params
+    ) internal view returns (uint256) {
+        _require(request.tokenOut == _wrappedToken || request.tokenOut == this, Errors.INVALID_TOKEN);
+        return
+            request.tokenOut == this
+                ? LinearMath._calcBptOutPerMainIn(
+                    request.amount,
+                    balances[_mainIndex],
+                    balances[_wrappedIndex],
+                    _getVirtualSupply(balances[_bptIndex]),
+                    params
+                )
+                : LinearMath._calcWrappedOutPerMainIn(request.amount, balances[_mainIndex], params);
+    }
+
+    function _swapGivenWrappedIn(
+        SwapRequest memory request,
+        uint256[] memory balances,
+        LinearMath.Params memory params
+    ) internal view returns (uint256) {
+        _require(request.tokenOut == _mainToken || request.tokenOut == this, Errors.INVALID_TOKEN);
+        return
+            request.tokenOut == this
+                ? LinearMath._calcBptOutPerWrappedIn(
+                    request.amount,
+                    balances[_mainIndex],
+                    balances[_wrappedIndex],
+                    _getVirtualSupply(balances[_bptIndex]),
+                    params
+                )
+                : LinearMath._calcMainOutPerWrappedIn(request.amount, balances[_mainIndex], params);
+    }
+
+    function _onSwapGivenOut(
+        SwapRequest memory request,
+        uint256[] memory balances,
+        LinearMath.Params memory params
+    ) internal view returns (uint256) {
+        if (request.tokenOut == this) {
+            return _swapGivenBptOut(request, balances, params);
+        } else if (request.tokenOut == _mainToken) {
+            return _swapGivenMainOut(request, balances, params);
+        } else if (request.tokenOut == _wrappedToken) {
+            return _swapGivenWrappedOut(request, balances, params);
+        } else {
+            _revert(Errors.INVALID_TOKEN);
+        }
+    }
+
+    function _swapGivenBptOut(
+        SwapRequest memory request,
+        uint256[] memory balances,
+        LinearMath.Params memory params
+    ) internal view returns (uint256) {
+        _require(request.tokenIn == _mainToken || request.tokenIn == _wrappedToken, Errors.INVALID_TOKEN);
+        return
+            (request.tokenIn == _mainToken ? LinearMath._calcMainInPerBptOut : LinearMath._calcWrappedInPerBptOut)(
+                request.amount,
+                balances[_mainIndex],
+                balances[_wrappedIndex],
+                _getVirtualSupply(balances[_bptIndex]),
+                params
+            );
+    }
+
+    function _swapGivenMainOut(
+        SwapRequest memory request,
+        uint256[] memory balances,
+        LinearMath.Params memory params
+    ) internal view returns (uint256) {
+        _require(request.tokenIn == _wrappedToken || request.tokenIn == this, Errors.INVALID_TOKEN);
+        return
+            request.tokenIn == this
+                ? LinearMath._calcBptInPerMainOut(
+                    request.amount,
+                    balances[_mainIndex],
+                    balances[_wrappedIndex],
+                    _getVirtualSupply(balances[_bptIndex]),
+                    params
+                )
+                : LinearMath._calcWrappedInPerMainOut(request.amount, balances[_mainIndex], params);
+    }
+
+    function _swapGivenWrappedOut(
+        SwapRequest memory request,
+        uint256[] memory balances,
+        LinearMath.Params memory params
+    ) internal view returns (uint256) {
+        _require(request.tokenIn == _mainToken || request.tokenIn == this, Errors.INVALID_TOKEN);
+        return
+            request.tokenIn == this
+                ? LinearMath._calcBptInPerWrappedOut(
+                    request.amount,
+                    balances[_mainIndex],
+                    balances[_wrappedIndex],
+                    _getVirtualSupply(balances[_bptIndex]),
+                    params
+                )
+                : LinearMath._calcMainInPerWrappedOut(request.amount, balances[_mainIndex], params);
+    }
+
+    function _onInitializePool(
+        bytes32,
+        address sender,
+        address recipient,
+        uint256[] memory,
+        bytes memory
+    ) internal view override returns (uint256, uint256[] memory) {
+        // Linear Pools can only be initialized by the Pool performing the initial join via the `initialize` function.
+        _require(sender == address(this), Errors.INVALID_INITIALIZATION);
+        _require(recipient == address(this), Errors.INVALID_INITIALIZATION);
+
+        // The full BPT supply will be minted and deposited in the Pool. Note that there is no need to approve the Vault
+        // as it already has infinite BPT allowance.
+        uint256 bptAmountOut = _INITIAL_BPT_SUPPLY;
+
+        uint256[] memory amountsIn = new uint256[](_TOTAL_TOKENS);
+        amountsIn[_bptIndex] = _INITIAL_BPT_SUPPLY;
+
+        return (bptAmountOut, amountsIn);
+    }
+
+    function _onJoinPool(
+        bytes32,
+        address,
+        address,
+        uint256[] memory,
+        uint256,
+        uint256,
+        uint256[] memory,
+        bytes memory
+    ) internal pure override returns (uint256, uint256[] memory) {
+        _revert(Errors.UNHANDLED_BY_LINEAR_POOL);
+    }
+
+    function _onExitPool(
+        bytes32,
+        address,
+        address,
+        uint256[] memory,
+        uint256,
+        uint256,
+        uint256[] memory,
+        bytes memory
+    ) internal pure override returns (uint256, uint256[] memory) {
+        _revert(Errors.UNHANDLED_BY_LINEAR_POOL);
+    }
+
+    function _doRecoveryModeExit(
+        uint256[] memory registeredBalances,
+        uint256,
+        bytes memory userData
+    ) internal view override returns (uint256, uint256[] memory) {
+        uint256 bptAmountIn = userData.recoveryModeExit();
+        uint256[] memory amountsOut = new uint256[](registeredBalances.length);
+
+        uint256 bptIndex = getBptIndex();
+
+        uint256 virtualSupply = _getVirtualSupply(registeredBalances[bptIndex]);
+        uint256 bptRatio = bptAmountIn.divDown(virtualSupply);
+
+        for (uint256 i = 0; i < registeredBalances.length; i++) {
+            amountsOut[i] = i != bptIndex ? registeredBalances[i].mulDown(bptRatio) : 0;
+        }
+
+        return (bptAmountIn, amountsOut);
+    }
+
+    function _getMaxTokens() internal pure override returns (uint256) {
+        return _TOTAL_TOKENS;
+    }
+
+    function _getMinimumBpt() internal pure override returns (uint256) {
+        // Linear Pools don't lock any BPT, as the total supply will already be forever non-zero due to the preminting
+        // mechanism, ensuring initialization only occurs once.
+        return 0;
+    }
+
+    function _getTotalTokens() internal view virtual override returns (uint256) {
+        return _TOTAL_TOKENS;
+    }
+
+    function _scalingFactor(IERC20 token) internal view virtual override returns (uint256) {
+        if (token == _mainToken) {
+            return _scalingFactorMainToken;
+        } else if (token == _wrappedToken) {
+            // The wrapped token's scaling factor is not constant, but increases over time as the wrapped token
+            // increases in value.
+            return _scalingFactorWrappedToken.mulDown(_getWrappedTokenRate());
+        } else if (token == this) {
+            return FixedPoint.ONE;
+        } else {
+            _revert(Errors.INVALID_TOKEN);
+        }
+    }
+
+    function _scalingFactors() internal view virtual override returns (uint256[] memory) {
+        uint256[] memory scalingFactors = new uint256[](_TOTAL_TOKENS);
+
+        // The wrapped token's scaling factor is not constant, but increases over time as the wrapped token increases in
+        // value.
+        scalingFactors[_mainIndex] = _scalingFactorMainToken;
+        scalingFactors[_wrappedIndex] = _scalingFactorWrappedToken.mulDown(_getWrappedTokenRate());
+        scalingFactors[_bptIndex] = FixedPoint.ONE;
+
+        return scalingFactors;
+    }
+
+    // Price rates
+
+    /**
+     * @dev For a Linear Pool, the rate represents the appreciation of BPT with respect to the underlying tokens. This
+     * rate increases slowly as the wrapped token appreciates in value.
+     */
+    function getRate() external view override returns (uint256) {
+        bytes32 poolId = getPoolId();
+        (, uint256[] memory balances, ) = getVault().getPoolTokens(poolId);
+        _upscaleArray(balances, _scalingFactors());
+
+        (uint256 lowerTarget, uint256 upperTarget) = getTargets();
+        LinearMath.Params memory params = LinearMath.Params({
+            fee: getSwapFeePercentage(),
+            lowerTarget: lowerTarget,
+            upperTarget: upperTarget
+        });
+
+        uint256 totalBalance = LinearMath._calcInvariant(
+            LinearMath._toNominal(balances[_mainIndex], params),
+            balances[_wrappedIndex]
+        );
+
+        // Note that we're dividing by the virtual supply, which may be zero (causing this call to revert). However, the
+        // only way for that to happen would be for all LPs to exit the Pool, and nothing prevents new LPs from
+        // joining it later on.
+        return totalBalance.divUp(_getVirtualSupply(balances[_bptIndex]));
+    }
+
+    /**
+     * @notice Return the conversion rate between the wrapped and main tokens.
+     * @dev This is an 18-decimal fixed point value.
+     */
+    function getWrappedTokenRate() external view returns (uint256) {
+        return _getWrappedTokenRate();
+    }
+
+    /**
+     * @dev Should be an 18-decimal fixed point value that represents the value of the wrapped token in terms of the
+     * main token. The final wrapped token scaling factor is this value multiplied by the wrapped token's decimal
+     * scaling factor.
+     */
+    function _getWrappedTokenRate() internal view virtual returns (uint256);
+
+    /**
+     * @notice Return the lower and upper bounds of the zero-fee trading range for the main token balance.
+     */
+    function getTargets() public view override returns (uint256 lowerTarget, uint256 upperTarget) {
+        bytes32 miscData = _getMiscData();
+
+        // Since targets are stored downscaled by _TARGET_SCALING, we undo that when reading them.
+        lowerTarget = miscData.decodeUint(_LOWER_TARGET_OFFSET, _TARGET_BITS) * _TARGET_SCALING;
+        upperTarget = miscData.decodeUint(_UPPER_TARGET_OFFSET, _TARGET_BITS) * _TARGET_SCALING;
+    }
+
+    function _setTargets(
+        IERC20 mainToken,
+        uint256 lowerTarget,
+        uint256 upperTarget
+    ) private {
+        _require(lowerTarget <= upperTarget, Errors.LOWER_GREATER_THAN_UPPER_TARGET);
+        _require(upperTarget <= _MAX_UPPER_TARGET, Errors.UPPER_TARGET_TOO_HIGH);
+
+        // Targets are stored downscaled by _TARGET_SCALING to make them fit in _TARGET_BITS at the cost of some
+        // resolution. We check that said resolution is not being used before downscaling.
+
+        _require(upperTarget % _TARGET_SCALING == 0, Errors.FRACTIONAL_TARGET);
+        _require(lowerTarget % _TARGET_SCALING == 0, Errors.FRACTIONAL_TARGET);
+
+        _setMiscData(
+            WordCodec.encodeUint(lowerTarget / _TARGET_SCALING, _LOWER_TARGET_OFFSET, _TARGET_BITS) |
+                WordCodec.encodeUint(upperTarget / _TARGET_SCALING, _UPPER_TARGET_OFFSET, _TARGET_BITS)
+        );
+
+        emit TargetsSet(mainToken, lowerTarget, upperTarget);
+    }
+
+    /**
+     * @notice Set the lower and upper bounds of the zero-fee trading range for the main token balance.
+     * @dev For a new target range to be valid:
+     *      - the current balance must be between the current targets (meaning no fees are currently pending)
+     *      - the current balance must be between the new targets (meaning setting them does not create pending fees)
+     *
+     * The first requirement could be relaxed, as the LPs actually benefit from the pending fees not being paid out,
+     * but being stricter makes analysis easier at little expense.
+     */
+    function setTargets(uint256 newLowerTarget, uint256 newUpperTarget) external authenticate {
+        (uint256 currentLowerTarget, uint256 currentUpperTarget) = getTargets();
+        _require(_isMainBalanceWithinTargets(currentLowerTarget, currentUpperTarget), Errors.OUT_OF_TARGET_RANGE);
+        _require(_isMainBalanceWithinTargets(newLowerTarget, newUpperTarget), Errors.OUT_OF_NEW_TARGET_RANGE);
+
+        _setTargets(_mainToken, newLowerTarget, newUpperTarget);
+    }
+
+    /**
+     * @notice Set the swap fee percentage.
+     * @dev This is a permissioned function, and disabled if the pool is paused.
+     * Note that we override the public version of setSwapFeePercentage instead of the internal one
+     * (_setSwapFeePercentage) as the internal one is called during construction, and therefore cannot access immutable
+     * state variables, which we use below.
+     */
+    function setSwapFeePercentage(uint256 swapFeePercentage) public override {
+        // For the swap fee percentage to be changeable:
+        //  - the pool must currently be between the current targets (meaning no fees are currently pending)
+        //
+        // As the amount of accrued fees is not explicitly stored but rather derived from the main token balance and the
+        // current swap fee percentage, requiring for no fees to be pending prevents the fee setter from changing the
+        // amount of pending fees, which they could use to e.g. drain Pool funds in the form of inflated fees.
+
+        (uint256 lowerTarget, uint256 upperTarget) = getTargets();
+        _require(_isMainBalanceWithinTargets(lowerTarget, upperTarget), Errors.OUT_OF_TARGET_RANGE);
+
+        super.setSwapFeePercentage(swapFeePercentage);
+    }
+
+    function _isMainBalanceWithinTargets(uint256 lowerTarget, uint256 upperTarget) private view returns (bool) {
+        (uint256 cash, uint256 managed, , ) = getVault().getPoolTokenInfo(getPoolId(), _mainToken);
+
+        uint256 mainTokenBalance = _upscale(cash + managed, _scalingFactor(_mainToken));
+
+        return mainTokenBalance >= lowerTarget && mainTokenBalance <= upperTarget;
+    }
+
+    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {
+        return actionId == getActionId(this.setTargets.selector) || super._isOwnerOnlyAction(actionId);
+    }
+
+    /**
+     * @notice Returns the number of tokens in circulation.
+     *
+     * @dev In other pools, this would be the same as `totalSupply`, but since this pool pre-mints BPT and holds it in
+     * the Vault as a token, we need to subtract the Vault's balance to get the total "circulating supply". Both the
+     * totalSupply and Vault balance can change. If users join or exit using swaps, some of the preminted BPT are
+     * exchanged, so the Vault's balance increases after joins and decreases after exits. If users call the recovery
+     * mode exit function, the totalSupply can change as BPT are burned.
+     */
+    function getVirtualSupply() external view returns (uint256) {
+        // For a 3 token General Pool, it is cheaper to query the balance for a single token than to read all balances,
+        // as getPoolTokenInfo will check for token existence, token balance and Asset Manager (3 reads), while
+        // getPoolTokens will read the number of tokens, their addresses and balances (7 reads).
+        (uint256 cash, uint256 managed, , ) = getVault().getPoolTokenInfo(getPoolId(), IERC20(this));
+
+        // Note that unlike all other balances, the Vault's BPT balance does not need scaling as its scaling factor is
+        // ONE. This addition cannot overflow due to the Vault's balance limits.
+        return _getVirtualSupply(cash + managed);
+    }
+
+    // The initial amount of BPT pre-minted is _PREMINTED_TOKEN_BALANCE, and it goes entirely to the pool balance in the
+    // vault. So the virtualSupply (the actual supply in circulation) is defined as:
+    // virtualSupply = totalSupply() - _balances[_bptIndex]
+    function _getVirtualSupply(uint256 bptBalance) internal view returns (uint256) {
+        return totalSupply().sub(bptBalance);
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/LinearPool.sol.rej pool-linear/contracts/LinearPool.sol.rej
--- pool-linear/contracts/LinearPool.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ pool-linear/contracts/LinearPool.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,37 @@
+***************
+*** 15,31 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+- import "@balancer-labs/v2-interfaces/contracts/pool-linear/LinearPoolUserData.sol";
+- import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+- import "@balancer-labs/v2-interfaces/contracts/pool-linear/ILinearPool.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
+  
+- import "@balancer-labs/v2-pool-utils/contracts/BasePool.sol";
+- import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+  
+  import "./LinearMath.sol";
+  
+--- 15,31 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
++ import "../../interfaces/contracts/pool-linear/LinearPoolUserData.sol";
++ import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
++ import "../../interfaces/contracts/pool-linear/ILinearPool.sol";
++ import "../../interfaces/contracts/vault/IGeneralPool.sol";
+  
++ import "../../pool-utils/contracts/BasePool.sol";
++ import "../../pool-utils/contracts/rates/PriceRateCache.sol";
+  
++ import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
++ import "../../solidity-utils/contracts/math/FixedPoint.sol";
+  
+  import "./LinearMath.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/LinearPoolRebalancer.sol pool-linear/contracts/LinearPoolRebalancer.sol
--- pool-linear/contracts/LinearPoolRebalancer.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-linear/contracts/LinearPoolRebalancer.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/ILinearPool.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "../../interfaces/contracts/pool-linear/ILinearPool.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 abstract contract LinearPoolRebalancer {
     using SafeERC20 for IERC20;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/aave/AaveLinearPool.sol pool-linear/contracts/aave/AaveLinearPool.sol
--- pool-linear/contracts/aave/AaveLinearPool.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-linear/contracts/aave/AaveLinearPool.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
 
 import "../LinearPool.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/aave/AaveLinearPoolFactory.sol.orig pool-linear/contracts/aave/AaveLinearPoolFactory.sol.orig
--- pool-linear/contracts/aave/AaveLinearPoolFactory.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ pool-linear/contracts/aave/AaveLinearPoolFactory.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,123 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "@balancer-labs/v2-interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
+
+import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
+import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Create2.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+
+import "./AaveLinearPool.sol";
+import "./AaveLinearPoolRebalancer.sol";
+
+contract AaveLinearPoolFactory is ILastCreatedPoolFactory, BasePoolFactory, ReentrancyGuard, FactoryWidePauseWindow {
+    // Used for create2 deployments
+    uint256 private _nextRebalancerSalt;
+
+    IBalancerQueries private immutable _queries;
+
+    address private _lastCreatedPool;
+
+    constructor(
+        IVault vault,
+        IProtocolFeePercentagesProvider protocolFeeProvider,
+        IBalancerQueries queries
+    ) BasePoolFactory(vault, protocolFeeProvider, type(AaveLinearPool).creationCode) {
+        _queries = queries;
+    }
+
+    function getLastCreatedPool() external view override returns (address) {
+        return _lastCreatedPool;
+    }
+
+    function _create(bytes memory constructorArgs) internal virtual override returns (address) {
+        address pool = super._create(constructorArgs);
+        _lastCreatedPool = pool;
+
+        return pool;
+    }
+
+    /**
+     * @dev Deploys a new `AaveLinearPool`.
+     */
+    function create(
+        string memory name,
+        string memory symbol,
+        IERC20 mainToken,
+        IERC20 wrappedToken,
+        uint256 upperTarget,
+        uint256 swapFeePercentage,
+        address owner
+    ) external nonReentrant returns (AaveLinearPool) {
+        // We are going to deploy both an AaveLinearPool and an AaveLinearPoolRebalancer set as its Asset Manager, but
+        // this creates a circular dependency problem: the Pool must know the Asset Manager's address in order to call
+        // `IVault.registerTokens` with it, and the Asset Manager must know about the Pool in order to store its Pool
+        // ID, wrapped and main tokens, etc., as immutable variables.
+        // We could forego immutable storage in the Rebalancer and simply have a two-step initialization process that
+        // uses storage, but we can keep those gas savings by instead making the deployment a bit more complicated.
+        //
+        // Note that the Pool does not interact with the Asset Manager: it only needs to know about its address.
+        // We therefore use create2 to deploy the Asset Manager, first computing the address where it will be deployed.
+        // With that knowledge, we can then create the Pool, and finally the Asset Manager. The only issue with this
+        // approach is that create2 requires the full creation code, including constructor arguments, and among those is
+        // the Pool's address. To work around this, we have the Rebalancer fetch this address from `getLastCreatedPool`,
+        // which will hold the Pool's address after we call `_create`.
+
+        bytes32 rebalancerSalt = bytes32(_nextRebalancerSalt);
+        _nextRebalancerSalt += 1;
+
+        bytes memory rebalancerCreationCode = abi.encodePacked(
+            type(AaveLinearPoolRebalancer).creationCode,
+            abi.encode(getVault(), _queries)
+        );
+        address expectedRebalancerAddress = Create2.computeAddress(rebalancerSalt, keccak256(rebalancerCreationCode));
+
+        (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) = getPauseConfiguration();
+
+        AaveLinearPool.ConstructorArgs memory args = AaveLinearPool.ConstructorArgs({
+            vault: getVault(),
+            name: name,
+            symbol: symbol,
+            mainToken: mainToken,
+            wrappedToken: wrappedToken,
+            assetManager: expectedRebalancerAddress,
+            upperTarget: upperTarget,
+            swapFeePercentage: swapFeePercentage,
+            pauseWindowDuration: pauseWindowDuration,
+            bufferPeriodDuration: bufferPeriodDuration,
+            owner: owner
+        });
+
+        AaveLinearPool pool = AaveLinearPool(_create(abi.encode(args)));
+
+        // LinearPools have a separate post-construction initialization step: we perform it here to
+        // ensure deployment and initialization are atomic.
+        pool.initialize();
+
+        // Not that the Linear Pool's deployment is complete, we can deploy the Rebalancer, verifying that we correctly
+        // predicted its deployment address.
+        address actualRebalancerAddress = Create2.deploy(0, rebalancerSalt, rebalancerCreationCode);
+        require(expectedRebalancerAddress == actualRebalancerAddress, "Rebalancer deployment failed");
+
+        // We don't return the Rebalancer's address, but that can be queried in the Vault by calling `getPoolTokenInfo`.
+        return pool;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/aave/AaveLinearPoolFactory.sol.rej pool-linear/contracts/aave/AaveLinearPoolFactory.sol.rej
--- pool-linear/contracts/aave/AaveLinearPoolFactory.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ pool-linear/contracts/aave/AaveLinearPoolFactory.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,23 @@
+***************
+*** 15,24 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+  
+- import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+- import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+  
+  import "./AaveLinearPool.sol";
+  
+--- 15,24 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/vault/IVault.sol";
+  
++ import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
++ import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+  
+  import "./AaveLinearPool.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol.orig pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol.orig
--- pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,56 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "@balancer-labs/v2-interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "../LinearPoolRebalancer.sol";
+
+contract AaveLinearPoolRebalancer is LinearPoolRebalancer {
+    using SafeERC20 for IERC20;
+
+    // These Rebalancers can only be deployed from a factory to work around a circular dependency: the Pool must know
+    // the address of the Rebalancer in order to register it, and the Rebalancer must know the address of the Pool
+    // during construction.
+    constructor(IVault vault, IBalancerQueries queries)
+        LinearPoolRebalancer(ILinearPool(ILastCreatedPoolFactory(msg.sender).getLastCreatedPool()), vault, queries)
+    {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    function _wrapTokens(uint256 amount) internal override {
+        // No referral code, depositing from underlying (i.e. DAI, USDC, etc. instead of aDAI or aUSDC). Before we can
+        // deposit however, we need to approve the wrapper in the underlying token.
+        _mainToken.safeApprove(address(_wrappedToken), amount);
+        IStaticAToken(address(_wrappedToken)).deposit(address(this), amount, 0, true);
+    }
+
+    function _unwrapTokens(uint256 amount) internal override {
+        // Withdrawing into underlying (i.e. DAI, USDC, etc. instead of aDAI or aUSDC). Approvals are not necessary here
+        // as the wrapped token is simply burnt.
+        IStaticAToken(address(_wrappedToken)).withdraw(address(this), amount, true);
+    }
+
+    function _getRequiredTokensToWrap(uint256 wrappedAmount) internal view override returns (uint256) {
+        // staticToDynamic returns how many main tokens will be returned when unwrapping. Since there's fixed point
+        // divisions and multiplications with rounding involved, this value might be off by one. We add one to ensure
+        // the returned value will always be enough to get `wrappedAmount` when unwrapping. This might result in some
+        // dust being left in the Rebalancer.
+        return IStaticAToken(address(_wrappedToken)).staticToDynamicAmount(wrappedAmount) + 1;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol.rej pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol.rej
--- pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,17 @@
+***************
+*** 15,21 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
+  
+  import "../LinearPoolRebalancer.sol";
+  
+--- 15,21 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
+  
+  import "../LinearPoolRebalancer.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol
--- pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IUnbuttonToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IAToken.sol";
+import "../../interfaces/contracts/pool-linear/IUnbuttonToken.sol";
+import "../../interfaces/contracts/pool-linear/IAToken.sol";
 
 import "../LinearPool.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol.orig pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol.orig
--- pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,69 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+
+import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
+import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+
+import "./UnbuttonAaveLinearPool.sol";
+
+contract UnbuttonAaveLinearPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
+    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
+        BasePoolFactory(vault, protocolFeeProvider, type(UnbuttonAaveLinearPool).creationCode)
+    {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    /**
+     * @dev Deploys a new `UnbuttonAaveLinearPool`.
+     */
+    function create(
+        string memory name,
+        string memory symbol,
+        IUnbuttonToken mainToken,
+        IUnbuttonToken wrappedToken,
+        uint256 upperTarget,
+        uint256 swapFeePercentage,
+        address owner
+    ) external returns (LinearPool) {
+        (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) = getPauseConfiguration();
+
+        LinearPool pool = UnbuttonAaveLinearPool(
+            _create(
+                abi.encode(
+                    getVault(),
+                    name,
+                    symbol,
+                    mainToken,
+                    wrappedToken,
+                    upperTarget,
+                    swapFeePercentage,
+                    pauseWindowDuration,
+                    bufferPeriodDuration,
+                    owner
+                )
+            )
+        );
+
+        // LinearPools have a separate post-construction initialization step: we perform it here to
+        // ensure deployment and initialization are atomic.
+        pool.initialize();
+
+        return pool;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol.rej pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol.rej
--- pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,23 @@
+***************
+*** 15,24 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+  
+- import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+- import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+  
+  import "./UnbuttonAaveLinearPool.sol";
+  
+--- 15,24 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/vault/IVault.sol";
+  
++ import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
++ import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+  
+  import "./UnbuttonAaveLinearPool.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/erc4626/ERC4626LinearPool.sol pool-linear/contracts/erc4626/ERC4626LinearPool.sol
--- pool-linear/contracts/erc4626/ERC4626LinearPool.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-linear/contracts/erc4626/ERC4626LinearPool.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "../LinearPool.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol.orig pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol.orig
--- pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,69 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+
+import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
+import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+
+import "./ERC4626LinearPool.sol";
+
+contract ERC4626LinearPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
+    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
+        BasePoolFactory(vault, protocolFeeProvider, type(ERC4626LinearPool).creationCode)
+    {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    /**
+     * @dev Deploys a new `ERC4626LinearPool`.
+     */
+    function create(
+        string memory name,
+        string memory symbol,
+        IERC20 mainToken,
+        IERC4626 wrappedToken,
+        uint256 upperTarget,
+        uint256 swapFeePercentage,
+        address owner
+    ) external returns (LinearPool) {
+        (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) = getPauseConfiguration();
+
+        LinearPool pool = ERC4626LinearPool(
+            _create(
+                abi.encode(
+                    getVault(),
+                    name,
+                    symbol,
+                    mainToken,
+                    wrappedToken,
+                    upperTarget,
+                    swapFeePercentage,
+                    pauseWindowDuration,
+                    bufferPeriodDuration,
+                    owner
+                )
+            )
+        );
+
+        // LinearPools have a separate post-construction initialization step: we perform it here to
+        // ensure deployment and initialization are atomic.
+        pool.initialize();
+
+        return pool;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol.rej pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol.rej
--- pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,23 @@
+***************
+*** 15,24 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+  
+- import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+- import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+  
+  import "./ERC4626LinearPool.sol";
+  
+--- 15,24 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/vault/IVault.sol";
+  
++ import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
++ import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+  
+  import "./ERC4626LinearPool.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/test/MockAaveAMPLToken.sol pool-linear/contracts/test/MockAaveAMPLToken.sol
--- pool-linear/contracts/test/MockAaveAMPLToken.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-linear/contracts/test/MockAaveAMPLToken.sol	2022-10-29 16:41:16.000000000 +0200
@@ -16,7 +16,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IAToken.sol";
+import "../../interfaces/contracts/pool-linear/IAToken.sol";
 
 import "./MockUnbuttonERC20.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/test/MockERC4626Token.sol pool-linear/contracts/test/MockERC4626Token.sol
--- pool-linear/contracts/test/MockERC4626Token.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-linear/contracts/test/MockERC4626Token.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 contract MockERC4626Token is TestToken, IERC4626 {
     using FixedPoint for uint256;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/test/MockStaticAToken.sol pool-linear/contracts/test/MockStaticAToken.sol
--- pool-linear/contracts/test/MockStaticAToken.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-linear/contracts/test/MockStaticAToken.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
 
 contract MockStaticAToken is TestToken, IStaticAToken, ILendingPool {
     uint256 private _rate = 1e27;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/test/MockUnbuttonERC20.sol pool-linear/contracts/test/MockUnbuttonERC20.sol
--- pool-linear/contracts/test/MockUnbuttonERC20.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-linear/contracts/test/MockUnbuttonERC20.sol	2022-10-29 16:41:16.000000000 +0200
@@ -16,10 +16,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IButtonWrapper.sol";
+import "../../interfaces/contracts/pool-linear/IButtonWrapper.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 contract MockUnbuttonERC20 is ERC20, IButtonWrapper {
     using SafeERC20 for IERC20;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/BalancerPoolToken.sol pool-utils/contracts/BalancerPoolToken.sol
--- pool-utils/contracts/BalancerPoolToken.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-utils/contracts/BalancerPoolToken.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
 
 /**
  * @title Highly opinionated token implementation
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/BaseGeneralPool.sol pool-utils/contracts/BaseGeneralPool.sol
--- pool-utils/contracts/BaseGeneralPool.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-utils/contracts/BaseGeneralPool.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
 
 import "./BasePool.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/BaseMinimalSwapInfoPool.sol pool-utils/contracts/BaseMinimalSwapInfoPool.sol
--- pool-utils/contracts/BaseMinimalSwapInfoPool.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-utils/contracts/BaseMinimalSwapInfoPool.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
 import "./BasePool.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/BasePool.sol.orig pool-utils/contracts/BasePool.sol.orig
--- pool-utils/contracts/BasePool.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ pool-utils/contracts/BasePool.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,786 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/ScalingHelpers.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+
+import "./lib/PoolRegistrationLib.sol";
+
+import "./BalancerPoolToken.sol";
+import "./BasePoolAuthorization.sol";
+import "./RecoveryMode.sol";
+
+// solhint-disable max-states-count
+
+/**
+ * @notice Reference implementation for the base layer of a Pool contract.
+ * @dev Reference implementation for the base layer of a Pool contract that manages a single Pool with optional
+ * Asset Managers, an admin-controlled swap fee percentage, and an emergency pause mechanism.
+ *
+ * This Pool pays protocol fees by minting BPT directly to the ProtocolFeeCollector instead of using the
+ * `dueProtocolFees` return value. This results in the underlying tokens continuing to provide liquidity
+ * for traders, while still keeping gas usage to a minimum since only a single token (the BPT) is transferred.
+ *
+ * Note that neither swap fees nor the pause mechanism are used by this contract. They are passed through so that
+ * derived contracts can use them via the `_addSwapFeeAmount` and `_subtractSwapFeeAmount` functions, and the
+ * `whenNotPaused` modifier.
+ *
+ * No admin permissions are checked here: instead, this contract delegates that to the Vault's own Authorizer.
+ *
+ * Because this contract doesn't implement the swap hooks, derived contracts should generally inherit from
+ * BaseGeneralPool or BaseMinimalSwapInfoPool. Otherwise, subclasses must inherit from the corresponding interfaces
+ * and implement the swap callbacks themselves.
+ */
+abstract contract BasePool is
+    IBasePool,
+    IControlledPool,
+    BasePoolAuthorization,
+    BalancerPoolToken,
+    TemporarilyPausable,
+    RecoveryMode
+{
+    using WordCodec for bytes32;
+    using FixedPoint for uint256;
+    using BasePoolUserData for bytes;
+
+    uint256 private constant _MIN_TOKENS = 2;
+
+    uint256 private constant _DEFAULT_MINIMUM_BPT = 1e6;
+
+    // 1e18 corresponds to 1.0, or a 100% fee
+    uint256 private constant _MIN_SWAP_FEE_PERCENTAGE = 1e12; // 0.0001%
+    uint256 private constant _MAX_SWAP_FEE_PERCENTAGE = 1e17; // 10% - this fits in 64 bits
+
+    // `_miscData` is a storage slot that can be used to store unrelated pieces of information. All pools store the
+    // recovery mode flag and swap fee percentage, but `miscData` can be extended to store more pieces of information.
+    // The most signficant bit is reserved for the recovery mode flag, and the swap fee percentage is stored in
+    // the next most significant 63 bits, leaving the remaining 192 bits free to store any other information derived
+    // pools might need.
+    //
+    // This slot is preferred for gas-sensitive operations as it is read in all joins, swaps and exits,
+    // and therefore warm.
+
+    // [ recovery | swap  fee | available ]
+    // [   1 bit  |  63 bits  |  192 bits ]
+    // [ MSB                          LSB ]
+    bytes32 private _miscData;
+
+    uint256 private constant _SWAP_FEE_PERCENTAGE_OFFSET = 192;
+    uint256 private constant _RECOVERY_MODE_BIT_OFFSET = 255;
+
+    // A fee can never be larger than FixedPoint.ONE, which fits in 60 bits, so 63 is more than enough.
+    uint256 private constant _SWAP_FEE_PERCENTAGE_BIT_LENGTH = 63;
+
+    bytes32 private immutable _poolId;
+
+    // Note that this value is immutable in the Vault, so we can make it immutable here and save gas
+    IProtocolFeesCollector private immutable _protocolFeesCollector;
+
+    event SwapFeePercentageChanged(uint256 swapFeePercentage);
+
+    constructor(
+        IVault vault,
+        IVault.PoolSpecialization specialization,
+        string memory name,
+        string memory symbol,
+        IERC20[] memory tokens,
+        address[] memory assetManagers,
+        uint256 swapFeePercentage,
+        uint256 pauseWindowDuration,
+        uint256 bufferPeriodDuration,
+        address owner
+    )
+        // Base Pools are expected to be deployed using factories. By using the factory address as the action
+        // disambiguator, we make all Pools deployed by the same factory share action identifiers. This allows for
+        // simpler management of permissions (such as being able to manage granting the 'set fee percentage' action in
+        // any Pool created by the same factory), while still making action identifiers unique among different factories
+        // if the selectors match, preventing accidental errors.
+        Authentication(bytes32(uint256(msg.sender)))
+        BalancerPoolToken(name, symbol, vault)
+        BasePoolAuthorization(owner)
+        TemporarilyPausable(pauseWindowDuration, bufferPeriodDuration)
+    {
+        _require(tokens.length >= _MIN_TOKENS, Errors.MIN_TOKENS);
+        _require(tokens.length <= _getMaxTokens(), Errors.MAX_TOKENS);
+
+        _setSwapFeePercentage(swapFeePercentage);
+
+        bytes32 poolId = PoolRegistrationLib.registerPoolWithAssetManagers(
+            vault,
+            specialization,
+            tokens,
+            assetManagers
+        );
+
+        // Set immutable state variables - these cannot be read from during construction
+        _poolId = poolId;
+        _protocolFeesCollector = vault.getProtocolFeesCollector();
+    }
+
+    // Getters / Setters
+
+    /**
+     * @notice Return the pool id.
+     */
+    function getPoolId() public view override returns (bytes32) {
+        return _poolId;
+    }
+
+    function _getTotalTokens() internal view virtual returns (uint256);
+
+    function _getMaxTokens() internal pure virtual returns (uint256);
+
+    /**
+     * @dev Returns the minimum BPT supply. This amount is minted to the zero address during initialization, effectively
+     * locking it.
+     *
+     * This is useful to make sure Pool initialization happens only once, but derived Pools can change this value (even
+     * to zero) by overriding this function.
+     */
+    function _getMinimumBpt() internal pure virtual returns (uint256) {
+        return _DEFAULT_MINIMUM_BPT;
+    }
+
+    /**
+     * @notice Return the current value of the swap fee percentage.
+     * @dev This is stored in `_miscData`.
+     */
+    function getSwapFeePercentage() public view virtual override returns (uint256) {
+        return _miscData.decodeUint(_SWAP_FEE_PERCENTAGE_OFFSET, _SWAP_FEE_PERCENTAGE_BIT_LENGTH);
+    }
+
+    /**
+     * @notice Return the ProtocolFeesCollector contract.
+     * @dev This is immutable, and retrieved from the Vault on construction. (It is also immutable in the Vault.)
+     */
+    function getProtocolFeesCollector() public view returns (IProtocolFeesCollector) {
+        return _protocolFeesCollector;
+    }
+
+    /**
+     * @notice Set the swap fee percentage.
+     * @dev This is a permissioned function, and disabled if the pool is paused. The swap fee must be within the
+     * bounds set by MIN_SWAP_FEE_PERCENTAGE/MAX_SWAP_FEE_PERCENTAGE. Emits the SwapFeePercentageChanged event.
+     */
+    function setSwapFeePercentage(uint256 swapFeePercentage) public virtual override authenticate whenNotPaused {
+        _setSwapFeePercentage(swapFeePercentage);
+    }
+
+    function _setSwapFeePercentage(uint256 swapFeePercentage) internal virtual {
+        _require(swapFeePercentage >= _getMinSwapFeePercentage(), Errors.MIN_SWAP_FEE_PERCENTAGE);
+        _require(swapFeePercentage <= _getMaxSwapFeePercentage(), Errors.MAX_SWAP_FEE_PERCENTAGE);
+
+        _miscData = _miscData.insertUint(
+            swapFeePercentage,
+            _SWAP_FEE_PERCENTAGE_OFFSET,
+            _SWAP_FEE_PERCENTAGE_BIT_LENGTH
+        );
+
+        emit SwapFeePercentageChanged(swapFeePercentage);
+    }
+
+    function _getMinSwapFeePercentage() internal pure virtual returns (uint256) {
+        return _MIN_SWAP_FEE_PERCENTAGE;
+    }
+
+    function _getMaxSwapFeePercentage() internal pure virtual returns (uint256) {
+        return _MAX_SWAP_FEE_PERCENTAGE;
+    }
+
+    /**
+     * @notice Returns whether the pool is in Recovery Mode.
+     */
+    function inRecoveryMode() public view override returns (bool) {
+        return _miscData.decodeBool(_RECOVERY_MODE_BIT_OFFSET);
+    }
+
+    /**
+     * @dev Sets the recoveryMode state, and emits the corresponding event.
+     */
+    function _setRecoveryMode(bool enabled) internal virtual override {
+        _miscData = _miscData.insertBool(enabled, _RECOVERY_MODE_BIT_OFFSET);
+
+        emit RecoveryModeStateChanged(enabled);
+
+        // Some pools need to update their state when leaving recovery mode to ensure proper functioning of the Pool.
+        // We do not allow an `_onEnableRecoveryMode()` hook as this may jeopardize the ability to enable Recovery mode.
+        if (!enabled) _onDisableRecoveryMode();
+    }
+
+    /**
+     * @dev Performs any necessary actions on the disabling of Recovery Mode.
+     * This is usually to reset any fee collection mechanisms to ensure that they operate correctly going forward.
+     */
+    function _onDisableRecoveryMode() internal virtual {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    /**
+     * @notice Pause the pool: an emergency action which disables all pool functions.
+     * @dev This is a permissioned function that will only work during the Pause Window set during pool factory
+     * deployment (see `TemporarilyPausable`).
+     */
+    function pause() external authenticate {
+        _setPaused(true);
+    }
+
+    /**
+     * @notice Reverse a `pause` operation, and restore a pool to normal functionality.
+     * @dev This is a permissioned function that will only work on a paused pool within the Buffer Period set during
+     * pool factory deployment (see `TemporarilyPausable`). Note that any paused pools will automatically unpause
+     * after the Buffer Period expires.
+     */
+    function unpause() external authenticate {
+        _setPaused(false);
+    }
+
+    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {
+        return (actionId == getActionId(this.setSwapFeePercentage.selector)) || super._isOwnerOnlyAction(actionId);
+    }
+
+    function _getMiscData() internal view returns (bytes32) {
+        return _miscData;
+    }
+
+    /**
+     * @dev Inserts data into the least-significant 192 bits of the misc data storage slot.
+     * Note that the remaining 64 bits are used for the swap fee percentage and cannot be overloaded.
+     */
+    function _setMiscData(bytes32 newData) internal {
+        _miscData = _miscData.insertBits192(newData, 0);
+    }
+
+    // Join / Exit Hooks
+
+    modifier onlyVault(bytes32 poolId) {
+        _require(msg.sender == address(getVault()), Errors.CALLER_NOT_VAULT);
+        _require(poolId == getPoolId(), Errors.INVALID_POOL_ID);
+        _;
+    }
+
+    /**
+     * @notice Vault hook for adding liquidity to a pool (including the first time, "initializing" the pool).
+     * @dev This function can only be called from the Vault, from `joinPool`.
+     */
+    function onJoinPool(
+        bytes32 poolId,
+        address sender,
+        address recipient,
+        uint256[] memory balances,
+        uint256 lastChangeBlock,
+        uint256 protocolSwapFeePercentage,
+        bytes memory userData
+    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {
+        _beforeSwapJoinExit();
+
+        uint256[] memory scalingFactors = _scalingFactors();
+
+        if (totalSupply() == 0) {
+            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onInitializePool(
+                poolId,
+                sender,
+                recipient,
+                scalingFactors,
+                userData
+            );
+
+            // On initialization, we lock _getMinimumBpt() by minting it for the zero address. This BPT acts as a
+            // minimum as it will never be burned, which reduces potential issues with rounding, and also prevents the
+            // Pool from ever being fully drained.
+            _require(bptAmountOut >= _getMinimumBpt(), Errors.MINIMUM_BPT);
+            _mintPoolTokens(address(0), _getMinimumBpt());
+            _mintPoolTokens(recipient, bptAmountOut - _getMinimumBpt());
+
+            // amountsIn are amounts entering the Pool, so we round up.
+            _downscaleUpArray(amountsIn, scalingFactors);
+
+            return (amountsIn, new uint256[](balances.length));
+        } else {
+            _upscaleArray(balances, scalingFactors);
+            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onJoinPool(
+                poolId,
+                sender,
+                recipient,
+                balances,
+                lastChangeBlock,
+                inRecoveryMode() ? 0 : protocolSwapFeePercentage, // Protocol fees are disabled while in recovery mode
+                scalingFactors,
+                userData
+            );
+
+            // Note we no longer use `balances` after calling `_onJoinPool`, which may mutate it.
+
+            _mintPoolTokens(recipient, bptAmountOut);
+
+            // amountsIn are amounts entering the Pool, so we round up.
+            _downscaleUpArray(amountsIn, scalingFactors);
+
+            // This Pool ignores the `dueProtocolFees` return value, so we simply return a zeroed-out array.
+            return (amountsIn, new uint256[](balances.length));
+        }
+    }
+
+    /**
+     * @notice Vault hook for removing liquidity from a pool.
+     * @dev This function can only be called from the Vault, from `exitPool`.
+     */
+    function onExitPool(
+        bytes32 poolId,
+        address sender,
+        address recipient,
+        uint256[] memory balances,
+        uint256 lastChangeBlock,
+        uint256 protocolSwapFeePercentage,
+        bytes memory userData
+    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {
+        uint256[] memory amountsOut;
+        uint256 bptAmountIn;
+
+        // When a user calls `exitPool`, this is the first point of entry from the Vault.
+        // We first check whether this is a Recovery Mode exit - if so, we proceed using this special lightweight exit
+        // mechanism which avoids computing any complex values, interacting with external contracts, etc., and generally
+        // should always work, even if the Pool's mathematics or a dependency break down.
+        if (userData.isRecoveryModeExitKind()) {
+            // This exit kind is only available in Recovery Mode.
+            _ensureInRecoveryMode();
+
+            // Note that we don't upscale balances nor downscale amountsOut - we don't care about scaling factors during
+            // a recovery mode exit.
+            (bptAmountIn, amountsOut) = _doRecoveryModeExit(balances, totalSupply(), userData);
+        } else {
+            // Note that we only call this if we're not in a recovery mode exit.
+            _beforeSwapJoinExit();
+
+            uint256[] memory scalingFactors = _scalingFactors();
+            _upscaleArray(balances, scalingFactors);
+
+            (bptAmountIn, amountsOut) = _onExitPool(
+                poolId,
+                sender,
+                recipient,
+                balances,
+                lastChangeBlock,
+                inRecoveryMode() ? 0 : protocolSwapFeePercentage, // Protocol fees are disabled while in recovery mode
+                scalingFactors,
+                userData
+            );
+
+            // amountsOut are amounts exiting the Pool, so we round down.
+            _downscaleDownArray(amountsOut, scalingFactors);
+        }
+
+        // Note we no longer use `balances` after calling `_onExitPool`, which may mutate it.
+
+        _burnPoolTokens(sender, bptAmountIn);
+
+        // This Pool ignores the `dueProtocolFees` return value, so we simply return a zeroed-out array.
+        return (amountsOut, new uint256[](balances.length));
+    }
+
+    // Query functions
+
+    /**
+     * @notice "Dry run" `onJoinPool`.
+     * @dev Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the
+     * Vault with the same arguments, along with the number of tokens `sender` would have to supply.
+     *
+     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault
+     * data, such as the protocol swap fee percentage and Pool balances.
+     *
+     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must
+     * explicitly use eth_call instead of eth_sendTransaction.
+     */
+    function queryJoin(
+        bytes32 poolId,
+        address sender,
+        address recipient,
+        uint256[] memory balances,
+        uint256 lastChangeBlock,
+        uint256 protocolSwapFeePercentage,
+        bytes memory userData
+    ) external override returns (uint256 bptOut, uint256[] memory amountsIn) {
+        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());
+
+        _queryAction(
+            poolId,
+            sender,
+            recipient,
+            balances,
+            lastChangeBlock,
+            protocolSwapFeePercentage,
+            userData,
+            _onJoinPool,
+            _downscaleUpArray
+        );
+
+        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,
+        // and we don't need to return anything here - it just silences compiler warnings.
+        return (bptOut, amountsIn);
+    }
+
+    /**
+     * @notice "Dry run" `onExitPool`.
+     * @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the
+     * Vault with the same arguments, along with the number of tokens `recipient` would receive.
+     *
+     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault
+     * data, such as the protocol swap fee percentage and Pool balances.
+     *
+     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must
+     * explicitly use eth_call instead of eth_sendTransaction.
+     */
+    function queryExit(
+        bytes32 poolId,
+        address sender,
+        address recipient,
+        uint256[] memory balances,
+        uint256 lastChangeBlock,
+        uint256 protocolSwapFeePercentage,
+        bytes memory userData
+    ) external override returns (uint256 bptIn, uint256[] memory amountsOut) {
+        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());
+
+        _queryAction(
+            poolId,
+            sender,
+            recipient,
+            balances,
+            lastChangeBlock,
+            protocolSwapFeePercentage,
+            userData,
+            _onExitPool,
+            _downscaleDownArray
+        );
+
+        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,
+        // and we don't need to return anything here - it just silences compiler warnings.
+        return (bptIn, amountsOut);
+    }
+
+    // Internal hooks to be overridden by derived contracts - all token amounts (except BPT) in these interfaces are
+    // upscaled.
+
+    /**
+     * @dev Called when the Pool is joined for the first time; that is, when the BPT total supply is zero.
+     *
+     * Returns the amount of BPT to mint, and the token amounts the Pool will receive in return.
+     *
+     * Minted BPT will be sent to `recipient`, except for _getMinimumBpt(), which will be deducted from this amount and
+     * sent to the zero address instead. This will cause that BPT to remain forever locked there, preventing total BTP
+     * from ever dropping below that value, and ensuring `_onInitializePool` can only be called once in the entire
+     * Pool's lifetime.
+     *
+     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will
+     * be downscaled (rounding up) before being returned to the Vault.
+     */
+    function _onInitializePool(
+        bytes32 poolId,
+        address sender,
+        address recipient,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal virtual returns (uint256 bptAmountOut, uint256[] memory amountsIn);
+
+    /**
+     * @dev Called whenever the Pool is joined after the first initialization join (see `_onInitializePool`).
+     *
+     * Returns the amount of BPT to mint, the token amounts that the Pool will receive in return, and the number of
+     * tokens to pay in protocol swap fees.
+     *
+     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when
+     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.
+     *
+     * Minted BPT will be sent to `recipient`.
+     *
+     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will
+     * be downscaled (rounding up) before being returned to the Vault.
+     *
+     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onJoinPool`). These
+     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.
+     */
+    function _onJoinPool(
+        bytes32 poolId,
+        address sender,
+        address recipient,
+        uint256[] memory balances,
+        uint256 lastChangeBlock,
+        uint256 protocolSwapFeePercentage,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal virtual returns (uint256 bptAmountOut, uint256[] memory amountsIn);
+
+    /**
+     * @dev Called whenever the Pool is exited.
+     *
+     * Returns the amount of BPT to burn, the token amounts for each Pool token that the Pool will grant in return, and
+     * the number of tokens to pay in protocol swap fees.
+     *
+     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when
+     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.
+     *
+     * BPT will be burnt from `sender`.
+     *
+     * The Pool will grant tokens to `recipient`. These amounts are considered upscaled and will be downscaled
+     * (rounding down) before being returned to the Vault.
+     *
+     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onExitPool`). These
+     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.
+     */
+    function _onExitPool(
+        bytes32 poolId,
+        address sender,
+        address recipient,
+        uint256[] memory balances,
+        uint256 lastChangeBlock,
+        uint256 protocolSwapFeePercentage,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal virtual returns (uint256 bptAmountIn, uint256[] memory amountsOut);
+
+    /**
+     * @dev Called at the very beginning of swaps, joins and exits, even before the scaling factors are read. Derived
+     * contracts can extend this implementation to perform any state-changing operations they might need (including e.g.
+     * updating the scaling factors),
+     *
+     * The only scenario in which this function is not called is during a recovery mode exit. This makes it safe to
+     * perform non-trivial computations or interact with external dependencies here, as recovery mode will not be
+     * affected.
+     *
+     * Since this contract does not implement swaps, derived contracts must also make sure this function is called on
+     * swap handlers.
+     */
+    function _beforeSwapJoinExit() internal virtual {
+        // All joins, exits and swaps are disabled (except recovery mode exits).
+        _ensureNotPaused();
+    }
+
+    // Internal functions
+
+    /**
+     * @dev Pays protocol fees by minting `bptAmount` to the Protocol Fee Collector.
+     */
+    function _payProtocolFees(uint256 bptAmount) internal {
+        if (bptAmount > 0) {
+            _mintPoolTokens(address(getProtocolFeesCollector()), bptAmount);
+        }
+    }
+
+    /**
+     * @dev Adds swap fee amount to `amount`, returning a higher value.
+     */
+    function _addSwapFeeAmount(uint256 amount) internal view returns (uint256) {
+        // This returns amount + fee amount, so we round up (favoring a higher fee amount).
+        return amount.divUp(getSwapFeePercentage().complement());
+    }
+
+    /**
+     * @dev Subtracts swap fee amount from `amount`, returning a lower value.
+     */
+    function _subtractSwapFeeAmount(uint256 amount) internal view returns (uint256) {
+        // This returns amount - fee amount, so we round up (favoring a higher fee amount).
+        uint256 feeAmount = amount.mulUp(getSwapFeePercentage());
+        return amount.sub(feeAmount);
+    }
+
+    // Scaling
+
+    /**
+     * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if
+     * it had 18 decimals.
+     */
+    function _computeScalingFactor(IERC20 token) internal view returns (uint256) {
+        if (address(token) == address(this)) {
+            return FixedPoint.ONE;
+        }
+
+        // Tokens that don't implement the `decimals` method are not supported.
+        uint256 tokenDecimals = ERC20(address(token)).decimals();
+
+        // Tokens with more than 18 decimals are not supported.
+        uint256 decimalsDifference = Math.sub(18, tokenDecimals);
+        return FixedPoint.ONE * 10**decimalsDifference;
+    }
+
+    /**
+     * @dev Returns the scaling factor for one of the Pool's tokens. Reverts if `token` is not a token registered by the
+     * Pool.
+     *
+     * All scaling factors are fixed-point values with 18 decimals, to allow for this function to be overridden by
+     * derived contracts that need to apply further scaling, making these factors potentially non-integer.
+     *
+     * The largest 'base' scaling factor (i.e. in tokens with less than 18 decimals) is 10**18, which in fixed-point is
+     * 10**36. This value can be multiplied with a 112 bit Vault balance with no overflow by a factor of ~1e7, making
+     * even relatively 'large' factors safe to use.
+     *
+     * The 1e7 figure is the result of 2**256 / (1e18 * 1e18 * 2**112).
+     */
+    function _scalingFactor(IERC20 token) internal view virtual returns (uint256);
+
+    /**
+     * @dev Same as `_scalingFactor()`, except for all registered tokens (in the same order as registered). The Vault
+     * will always pass balances in this order when calling any of the Pool hooks.
+     */
+    function _scalingFactors() internal view virtual returns (uint256[] memory);
+
+    function getScalingFactors() external view override returns (uint256[] memory) {
+        return _scalingFactors();
+    }
+
+    function _getAuthorizer() internal view override returns (IAuthorizer) {
+        // Access control management is delegated to the Vault's Authorizer. This lets Balancer Governance manage which
+        // accounts can call permissioned functions: for example, to perform emergency pauses.
+        // If the owner is delegated, then *all* permissioned functions, including `setSwapFeePercentage`, will be under
+        // Governance control.
+        return getVault().getAuthorizer();
+    }
+
+    function _queryAction(
+        bytes32 poolId,
+        address sender,
+        address recipient,
+        uint256[] memory balances,
+        uint256 lastChangeBlock,
+        uint256 protocolSwapFeePercentage,
+        bytes memory userData,
+        function(bytes32, address, address, uint256[] memory, uint256, uint256, uint256[] memory, bytes memory)
+            internal
+            returns (uint256, uint256[] memory) _action,
+        function(uint256[] memory, uint256[] memory) internal view _downscaleArray
+    ) private {
+        // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed
+        // explanation.
+
+        if (msg.sender != address(this)) {
+            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of
+            // the preceding if statement will be executed instead.
+
+            // solhint-disable-next-line avoid-low-level-calls
+            (bool success, ) = address(this).call(msg.data);
+
+            // solhint-disable-next-line no-inline-assembly
+            assembly {
+                // This call should always revert to decode the bpt and token amounts from the revert reason
+                switch success
+                    case 0 {
+                        // Note we are manually writing the memory slot 0. We can safely overwrite whatever is
+                        // stored there as we take full control of the execution and then immediately return.
+
+                        // We copy the first 4 bytes to check if it matches with the expected signature, otherwise
+                        // there was another revert reason and we should forward it.
+                        returndatacopy(0, 0, 0x04)
+                        let error := and(mload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)
+
+                        // If the first 4 bytes don't match with the expected signature, we forward the revert reason.
+                        if eq(eq(error, 0x43adbafb00000000000000000000000000000000000000000000000000000000), 0) {
+                            returndatacopy(0, 0, returndatasize())
+                            revert(0, returndatasize())
+                        }
+
+                        // The returndata contains the signature, followed by the raw memory representation of the
+                        // `bptAmount` and `tokenAmounts` (array: length + data). We need to return an ABI-encoded
+                        // representation of these.
+                        // An ABI-encoded response will include one additional field to indicate the starting offset of
+                        // the `tokenAmounts` array. The `bptAmount` will be laid out in the first word of the
+                        // returndata.
+                        //
+                        // In returndata:
+                        // [ signature ][ bptAmount ][ tokenAmounts length ][ tokenAmounts values ]
+                        // [  4 bytes  ][  32 bytes ][       32 bytes      ][ (32 * length) bytes ]
+                        //
+                        // We now need to return (ABI-encoded values):
+                        // [ bptAmount ][ tokeAmounts offset ][ tokenAmounts length ][ tokenAmounts values ]
+                        // [  32 bytes ][       32 bytes     ][       32 bytes      ][ (32 * length) bytes ]
+
+                        // We copy 32 bytes for the `bptAmount` from returndata into memory.
+                        // Note that we skip the first 4 bytes for the error signature
+                        returndatacopy(0, 0x04, 32)
+
+                        // The offsets are 32-bytes long, so the array of `tokenAmounts` will start after
+                        // the initial 64 bytes.
+                        mstore(0x20, 64)
+
+                        // We now copy the raw memory array for the `tokenAmounts` from returndata into memory.
+                        // Since bpt amount and offset take up 64 bytes, we start copying at address 0x40. We also
+                        // skip the first 36 bytes from returndata, which correspond to the signature plus bpt amount.
+                        returndatacopy(0x40, 0x24, sub(returndatasize(), 36))
+
+                        // We finally return the ABI-encoded uint256 and the array, which has a total length equal to
+                        // the size of returndata, plus the 32 bytes of the offset but without the 4 bytes of the
+                        // error signature.
+                        return(0, add(returndatasize(), 28))
+                    }
+                    default {
+                        // This call should always revert, but we fail nonetheless if that didn't happen
+                        invalid()
+                    }
+            }
+        } else {
+            // This imitates the relevant parts of the bodies of onJoin and onExit. Since they're not virtual, we know
+            // that their implementations will match this regardless of what derived contracts might do.
+
+            _beforeSwapJoinExit();
+
+            uint256[] memory scalingFactors = _scalingFactors();
+            _upscaleArray(balances, scalingFactors);
+
+            (uint256 bptAmount, uint256[] memory tokenAmounts) = _action(
+                poolId,
+                sender,
+                recipient,
+                balances,
+                lastChangeBlock,
+                protocolSwapFeePercentage,
+                scalingFactors,
+                userData
+            );
+
+            _downscaleArray(tokenAmounts, scalingFactors);
+
+            // solhint-disable-next-line no-inline-assembly
+            assembly {
+                // We will return a raw representation of `bptAmount` and `tokenAmounts` in memory, which is composed of
+                // a 32-byte uint256, followed by a 32-byte for the array length, and finally the 32-byte uint256 values
+                // Because revert expects a size in bytes, we multiply the array length (stored at `tokenAmounts`) by 32
+                let size := mul(mload(tokenAmounts), 32)
+
+                // We store the `bptAmount` in the previous slot to the `tokenAmounts` array. We can make sure there
+                // will be at least one available slot due to how the memory scratch space works.
+                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.
+                let start := sub(tokenAmounts, 0x20)
+                mstore(start, bptAmount)
+
+                // We send one extra value for the error signature "QueryError(uint256,uint256[])" which is 0x43adbafb
+                // We use the previous slot to `bptAmount`.
+                mstore(sub(start, 0x20), 0x0000000000000000000000000000000000000000000000000000000043adbafb)
+                start := sub(start, 0x04)
+
+                // When copying from `tokenAmounts` into returndata, we copy the additional 68 bytes to also return
+                // the `bptAmount`, the array 's length, and the error signature.
+                revert(start, add(size, 68))
+            }
+        }
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/BasePool.sol.rej pool-utils/contracts/BasePool.sol.rej
--- pool-utils/contracts/BasePool.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ pool-utils/contracts/BasePool.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,35 @@
+***************
+*** 15,30 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+  
+  import "./BalancerPoolToken.sol";
+  import "./BasePoolAuthorization.sol";
+--- 15,30 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/pool-utils/IAssetManager.sol";
++ import "../../interfaces/contracts/vault/IVault.sol";
++ import "../../interfaces/contracts/vault/IBasePool.sol";
+  
++ import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
++ import "../../solidity-utils/contracts/helpers/WordCodec.sol";
++ import "../../solidity-utils/contracts/helpers/TemporarilyPausable.sol";
++ import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
++ import "../../solidity-utils/contracts/math/FixedPoint.sol";
++ import "../../solidity-utils/contracts/math/Math.sol";
+  
+  import "./BalancerPoolToken.sol";
+  import "./BasePoolAuthorization.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/BasePoolAuthorization.sol pool-utils/contracts/BasePoolAuthorization.sol
--- pool-utils/contracts/BasePoolAuthorization.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-utils/contracts/BasePoolAuthorization.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 /**
  * @dev Base authorization layer implementation for Pools.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/RecoveryMode.sol pool-utils/contracts/RecoveryMode.sol
--- pool-utils/contracts/RecoveryMode.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-utils/contracts/RecoveryMode.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/pool-utils/BasePoolUserData.sol";
+import "../../interfaces/contracts/pool-utils/IRecoveryMode.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 import "./BasePoolAuthorization.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/controllers/BasePoolController.sol pool-utils/contracts/controllers/BasePoolController.sol
--- pool-utils/contracts/controllers/BasePoolController.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-utils/contracts/controllers/BasePoolController.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolController.sol";
+import "../../interfaces/contracts/pool-utils/IBasePoolController.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
 
 import "../BasePoolAuthorization.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/controllers/ManagedPoolController.sol.orig pool-utils/contracts/controllers/ManagedPoolController.sol.orig
--- pool-utils/contracts/controllers/ManagedPoolController.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ pool-utils/contracts/controllers/ManagedPoolController.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,229 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "@balancer-labs/v2-interfaces/contracts/pool-utils/IManagedPool.sol";
+
+import "./BasePoolController.sol";
+
+/**
+ * @dev Pool controller that serves as the "owner" of a Managed pool, and is in turn owned by
+ * an account empowered to make calls on this contract, which are forwarded to the underlyling pool.
+ *
+ * This contract can place limits on whether and how these calls can be made. For instance,
+ * imposing a minimum gradual weight change duration.
+ *
+ * While Balancer pool owners are immutable, ownership of this pool controller can be transferrable,
+ * if the corresponding permission is set.
+ */
+contract ManagedPoolController is BasePoolController {
+    using SafeERC20 for IERC20;
+    using WordCodec for bytes32;
+
+    // There are six managed pool rights: all corresponding to permissioned functions of ManagedPool.
+    struct ManagedPoolRights {
+        bool canChangeWeights;
+        bool canDisableSwaps;
+        bool canSetMustAllowlistLPs;
+        bool canSetCircuitBreakers;
+        bool canChangeTokens;
+        bool canChangeMgmtFees;
+    }
+
+    // The minimum weight change duration could be replaced with more sophisticated rate-limiting.
+    uint256 internal immutable _minWeightChangeDuration;
+
+    // Immutable controller state - the first 16 bits are reserved as a bitmap for permission flags
+    // (3 used in the base class; 6 used here), and the remaining 240 bits can be used by derived classes
+    // to store any other immutable data.
+    //
+    //               Managed Pool Controller Permissions             |   Base Controller Permissions  ]
+    // [  240 | 7 bits |   1 bit  |  1 bit |  1 bit   | 1 bit | 1 bit |  1 bit  |  1 bit   |  1 bit   |   1 bit  ]
+    // [unused|reserved| mgmt fee | tokens | breakers |  LPs  | swaps | weights | metadata | swap fee | transfer ]
+    // |MSB                                                                                                   LSB|
+
+    uint256 private constant _CHANGE_WEIGHTS_OFFSET = 3;
+    uint256 private constant _DISABLE_SWAPS_OFFSET = 4;
+    uint256 private constant _MUST_ALLOWLIST_LPS_OFFSET = 5;
+    uint256 private constant _CIRCUIT_BREAKERS_OFFSET = 6;
+    uint256 private constant _CHANGE_TOKENS_OFFSET = 7;
+    uint256 private constant _CHANGE_MGMT_FEES_OFFSET = 8;
+
+    /**
+     * @dev Pass in the `BasePoolRights` and `ManagedPoolRights` structures, to form the complete set of
+     * immutable rights. Then pass any parameters related to restrictions on those rights. For instance,
+     * a minimum duration if changing weights is enabled.
+     */
+    constructor(
+        BasePoolRights memory baseRights,
+        ManagedPoolRights memory managedRights,
+        uint256 minWeightChangeDuration,
+        address manager
+    ) BasePoolController(encodePermissions(baseRights, managedRights), manager) {
+        _minWeightChangeDuration = minWeightChangeDuration;
+    }
+
+    function encodePermissions(BasePoolRights memory baseRights, ManagedPoolRights memory managedRights)
+        public
+        pure
+        returns (bytes32)
+    {
+        bytes32 permissions = super
+            .encodePermissions(baseRights)
+            .insertBool(managedRights.canChangeWeights, _CHANGE_WEIGHTS_OFFSET)
+            .insertBool(managedRights.canDisableSwaps, _DISABLE_SWAPS_OFFSET)
+            .insertBool(managedRights.canSetMustAllowlistLPs, _MUST_ALLOWLIST_LPS_OFFSET);
+
+        // Needed to avoid "stack too deep"
+        return
+            permissions
+                .insertBool(managedRights.canChangeMgmtFees, _CHANGE_MGMT_FEES_OFFSET)
+                .insertBool(managedRights.canChangeTokens, _CHANGE_TOKENS_OFFSET)
+                .insertBool(managedRights.canSetCircuitBreakers, _CIRCUIT_BREAKERS_OFFSET);
+    }
+
+    /**
+     * @dev Getter for the canChangeWeights permission.
+     */
+    function canChangeWeights() public view returns (bool) {
+        return _controllerState.decodeBool(_CHANGE_WEIGHTS_OFFSET);
+    }
+
+    /**
+     * @dev Getter for the canDisableSwaps permission.
+     */
+    function canDisableSwaps() public view returns (bool) {
+        return _controllerState.decodeBool(_DISABLE_SWAPS_OFFSET);
+    }
+
+    /**
+     * @dev Getter for the mustAllowlistLPs permission.
+     */
+    function canSetMustAllowlistLPs() public view returns (bool) {
+        return _controllerState.decodeBool(_MUST_ALLOWLIST_LPS_OFFSET);
+    }
+
+    /**
+     * @dev Getter for the canSetCircuitBreakers permission.
+     */
+    function canSetCircuitBreakers() public view returns (bool) {
+        return _controllerState.decodeBool(_CIRCUIT_BREAKERS_OFFSET);
+    }
+
+    /**
+     * @dev Getter for the canChangeTokens permission.
+     */
+    function canChangeTokens() public view returns (bool) {
+        return _controllerState.decodeBool(_CHANGE_TOKENS_OFFSET);
+    }
+
+    /**
+     * @dev Getter for the canChangeManagementFees permission.
+     */
+    function canChangeManagementFees() public view returns (bool) {
+        return _controllerState.decodeBool(_CHANGE_MGMT_FEES_OFFSET);
+    }
+
+    /**
+     * @dev Getter for the minimum weight change duration.
+     */
+    function getMinWeightChangeDuration() external view returns (uint256) {
+        return _minWeightChangeDuration;
+    }
+
+    /**
+     * @dev Update weights linearly from the current values to the given end weights, between startTime
+     * and endTime.
+     */
+    function updateWeightsGradually(
+        uint256 startTime,
+        uint256 endTime,
+        IERC20[] calldata tokens,
+        uint256[] calldata endWeights
+    ) external virtual onlyManager withBoundPool {
+        _require(canChangeWeights(), Errors.FEATURE_DISABLED);
+        _require(
+            endTime >= startTime && endTime - startTime >= _minWeightChangeDuration,
+            Errors.WEIGHT_CHANGE_TOO_FAST
+        );
+
+        IManagedPool(pool).updateWeightsGradually(startTime, endTime, tokens, endWeights);
+    }
+
+    /**
+     * @dev Pass a call to ManagedPool's setSwapEnabled through to the underlying pool.
+     */
+    function setSwapEnabled(bool swapEnabled) external virtual onlyManager withBoundPool {
+        _require(canDisableSwaps(), Errors.FEATURE_DISABLED);
+
+        IManagedPool(pool).setSwapEnabled(swapEnabled);
+    }
+
+    /**
+     * @dev Pass a call to ManagedPool's setMustAllowlistLPs through to the underlying pool. This could
+     * be restricted in various ways. For instance, we could allow it to change state only once, or only
+     * in one direction, but there seems to be no compelling reason to do so in the reference controller.
+     *
+     * Deploying a Managed Pool with an empty allowlist could function like an LBP, or a smart treasury.
+     * Adding a set of addresses to the allowlist enables multiple seed funding sources. Disabling the
+     * allowlist, or re-enabling it after allowing public LPs, can impose or remove a "cap" on the total supply.
+     */
+    function setMustAllowlistLPs(bool mustAllowlistLPs) external virtual onlyManager withBoundPool {
+        _require(canSetMustAllowlistLPs(), Errors.FEATURE_DISABLED);
+
+        IManagedPool(pool).setMustAllowlistLPs(mustAllowlistLPs);
+    }
+
+    /**
+     * @dev Pass a call to ManagedPool's addAllowedAddress through to the underlying pool.
+     * The underlying pool handles all state/permission checks. It will revert if the LP allowlist is off.
+     */
+    function addAllowedAddress(address member) external virtual onlyManager withBoundPool {
+        IManagedPool(pool).addAllowedAddress(member);
+    }
+
+    /**
+     * @dev Pass a call to ManagedPool's removeAllowedAddress through to the underlying pool.
+     * The underlying pool handles all state/permission checks. It will revert if the address was not
+     * previouslly added to the allowlist.
+     */
+    function removeAllowedAddress(address member) external virtual onlyManager withBoundPool {
+        IManagedPool(pool).removeAllowedAddress(member);
+    }
+
+    /**
+     * @dev Transfer any BPT management fees from this contract to the recipient.
+     */
+    function withdrawCollectedManagementFees(address recipient) external virtual onlyManager withBoundPool {
+        IERC20(pool).safeTransfer(recipient, IERC20(pool).balanceOf(address(this)));
+    }
+
+    /**
+     * @dev Pass a call to ManagedPool's setManagementAumFeePercentage through to the underlying pool.
+     */
+    function setManagementAumFeePercentage(uint256 managementAumFeePercentage)
+        external
+        virtual
+        onlyManager
+        withBoundPool
+        returns (uint256)
+    {
+        _require(canChangeManagementFees(), Errors.FEATURE_DISABLED);
+
+        return IManagedPool(pool).setManagementAumFeePercentage(managementAumFeePercentage);
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/controllers/ManagedPoolController.sol.rej pool-utils/contracts/controllers/ManagedPoolController.sol.rej
--- pool-utils/contracts/controllers/ManagedPoolController.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ pool-utils/contracts/controllers/ManagedPoolController.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,17 @@
+***************
+*** 15,21 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledManagedPool.sol";
+  
+  import "./BasePoolController.sol";
+  
+--- 15,21 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/pool-utils/IControlledManagedPool.sol";
+  
+  import "./BasePoolController.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/rates/PriceRateCache.sol pool-utils/contracts/rates/PriceRateCache.sol
--- pool-utils/contracts/rates/PriceRateCache.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-utils/contracts/rates/PriceRateCache.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
 
 /**
  * Price rate caches are used to avoid querying the price rate for a token every time we need to work with it. It is
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockBalancerPoolToken.sol pool-utils/contracts/test/MockBalancerPoolToken.sol
--- pool-utils/contracts/test/MockBalancerPoolToken.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-utils/contracts/test/MockBalancerPoolToken.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "../BalancerPoolToken.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockBasePool.sol pool-utils/contracts/test/MockBasePool.sol
--- pool-utils/contracts/test/MockBasePool.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-utils/contracts/test/MockBasePool.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
 
 import "../BasePool.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockFailureModes.sol pool-utils/contracts/test/MockFailureModes.sol
--- pool-utils/contracts/test/MockFailureModes.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-utils/contracts/test/MockFailureModes.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 abstract contract MockFailureModes {
     enum FailureMode { INVARIANT, PRICE_RATE }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockRateProvider.sol pool-utils/contracts/test/MockRateProvider.sol
--- pool-utils/contracts/test/MockRateProvider.sol	2022-10-03 09:35:45.000000000 +0200
+++ pool-utils/contracts/test/MockRateProvider.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 contract MockRateProvider is IRateProvider {
     uint256 internal _rate;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockVault.sol pool-utils/contracts/test/MockVault.sol
--- pool-utils/contracts/test/MockVault.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-utils/contracts/test/MockVault.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IPoolSwapStructs.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
-import "@balancer-labs/v2-vault/contracts/ProtocolFeesCollector.sol";
+import "../../vault/contracts/ProtocolFeesCollector.sol";
 
 contract MockVault is IPoolSwapStructs {
     struct Pool {
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/BaseWeightedPool.sol pool-weighted/contracts/BaseWeightedPool.sol
--- pool-weighted/contracts/BaseWeightedPool.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-weighted/contracts/BaseWeightedPool.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol";
+import "../../pool-utils/contracts/BaseMinimalSwapInfoPool.sol";
 
 import "./WeightedMath.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/WeightedMath.sol pool-weighted/contracts/WeightedMath.sol
--- pool-weighted/contracts/WeightedMath.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-weighted/contracts/WeightedMath.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // These functions start with an underscore, as if they were part of a contract and not a library. At some point this
 // should be fixed.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/WeightedPoolFactory.sol.orig pool-weighted/contracts/WeightedPoolFactory.sol.orig
--- pool-weighted/contracts/WeightedPoolFactory.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ pool-weighted/contracts/WeightedPoolFactory.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,66 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+
+import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
+import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+
+import "./WeightedPool.sol";
+
+contract WeightedPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
+    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
+        BasePoolFactory(vault, protocolFeeProvider, type(WeightedPool).creationCode)
+    {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    /**
+     * @dev Deploys a new `WeightedPool`.
+     */
+    function create(
+        string memory name,
+        string memory symbol,
+        IERC20[] memory tokens,
+        uint256[] memory normalizedWeights,
+        IRateProvider[] memory rateProviders,
+        uint256 swapFeePercentage,
+        address owner
+    ) external returns (address) {
+        (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) = getPauseConfiguration();
+
+        return
+            _create(
+                abi.encode(
+                    WeightedPool.NewPoolParams({
+                        name: name,
+                        symbol: symbol,
+                        tokens: tokens,
+                        normalizedWeights: normalizedWeights,
+                        rateProviders: rateProviders,
+                        assetManagers: new address[](tokens.length), // Don't allow asset managers,
+                        swapFeePercentage: swapFeePercentage
+                    }),
+                    getVault(),
+                    getProtocolFeePercentagesProvider(),
+                    pauseWindowDuration,
+                    bufferPeriodDuration,
+                    owner
+                )
+            );
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/WeightedPoolFactory.sol.rej pool-weighted/contracts/WeightedPoolFactory.sol.rej
--- pool-weighted/contracts/WeightedPoolFactory.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ pool-weighted/contracts/WeightedPoolFactory.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,23 @@
+***************
+*** 15,24 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+  
+- import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+- import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+  
+  import "./WeightedPool.sol";
+  
+--- 15,24 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/vault/IVault.sol";
+  
++ import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
++ import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+  
+  import "./WeightedPool.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/lib/GradualValueChange.sol pool-weighted/contracts/lib/GradualValueChange.sol
--- pool-weighted/contracts/lib/GradualValueChange.sol	2022-10-28 09:21:26.000000000 +0200
+++ pool-weighted/contracts/lib/GradualValueChange.sol	2022-10-29 16:41:16.000000000 +0200
@@ -12,8 +12,8 @@
 // You should have received a copy of the GNU General Public License
 // along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/Authentication.sol solidity-utils/contracts/helpers/Authentication.sol
--- solidity-utils/contracts/helpers/Authentication.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/helpers/Authentication.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,8 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+
+// import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+// import "../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
 
 /**
  * @dev Building block for performing access control on external functions.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/BalancerErrors.sol solidity-utils/contracts/helpers/BalancerErrors.sol
--- solidity-utils/contracts/helpers/BalancerErrors.sol	1970-01-01 01:00:00.000000000 +0100
+++ solidity-utils/contracts/helpers/BalancerErrors.sol	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,290 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity >=0.7.0 <0.9.0;
+
+// solhint-disable
+
+/**
+ * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are
+ * supported.
+ * Uses the default 'BAL' prefix for the error code
+ */
+function _require(bool condition, uint256 errorCode) pure {
+    if (!condition) _revert(errorCode);
+}
+
+/**
+ * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are
+ * supported.
+ */
+function _require(
+    bool condition,
+    uint256 errorCode,
+    bytes3 prefix
+) pure {
+    if (!condition) _revert(errorCode, prefix);
+}
+
+/**
+ * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.
+ * Uses the default 'BAL' prefix for the error code
+ */
+function _revert(uint256 errorCode) pure {
+    _revert(errorCode, 0x42414c); // This is the raw byte representation of "BAL"
+}
+
+/**
+ * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.
+ */
+function _revert(uint256 errorCode, bytes3 prefix) pure {
+    uint256 prefixUint = uint256(uint24(prefix));
+    // We're going to dynamically create a revert string based on the error code, with the following format:
+    // 'BAL#{errorCode}'
+    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).
+    //
+    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a
+    // number (8 to 16 bits) than the individual string characters.
+    //
+    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a
+    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a
+    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.
+    assembly {
+        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999
+        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for
+        // the '0' character.
+
+        let units := add(mod(errorCode, 10), 0x30)
+
+        errorCode := div(errorCode, 10)
+        let tenths := add(mod(errorCode, 10), 0x30)
+
+        errorCode := div(errorCode, 10)
+        let hundreds := add(mod(errorCode, 10), 0x30)
+
+        // With the individual characters, we can now construct the full string.
+        // We first append the '#' character (0x23) to the prefix. In the case of 'BAL', it results in 0x42414c23 ('BAL#')
+        // Then, we shift this by 24 (to provide space for the 3 bytes of the error code), and add the
+        // characters to it, each shifted by a multiple of 8.
+        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits
+        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte
+        // array).
+        let formattedPrefix := shl(24, add(0x23, shl(8, prefixUint)))
+
+        let revertReason := shl(200, add(formattedPrefix, add(add(units, shl(8, tenths)), shl(16, hundreds))))
+
+        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded
+        // message will have the following layout:
+        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]
+
+        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We
+        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.
+        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)
+        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).
+        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)
+        // The string length is fixed: 7 characters.
+        mstore(0x24, 7)
+        // Finally, the string itself is stored.
+        mstore(0x44, revertReason)
+
+        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of
+        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.
+        revert(0, 100)
+    }
+}
+
+library Errors {
+    // Math
+    uint256 internal constant ADD_OVERFLOW = 0;
+    uint256 internal constant SUB_OVERFLOW = 1;
+    uint256 internal constant SUB_UNDERFLOW = 2;
+    uint256 internal constant MUL_OVERFLOW = 3;
+    uint256 internal constant ZERO_DIVISION = 4;
+    uint256 internal constant DIV_INTERNAL = 5;
+    uint256 internal constant X_OUT_OF_BOUNDS = 6;
+    uint256 internal constant Y_OUT_OF_BOUNDS = 7;
+    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;
+    uint256 internal constant INVALID_EXPONENT = 9;
+
+    // Input
+    uint256 internal constant OUT_OF_BOUNDS = 100;
+    uint256 internal constant UNSORTED_ARRAY = 101;
+    uint256 internal constant UNSORTED_TOKENS = 102;
+    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;
+    uint256 internal constant ZERO_TOKEN = 104;
+
+    // Shared pools
+    uint256 internal constant MIN_TOKENS = 200;
+    uint256 internal constant MAX_TOKENS = 201;
+    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;
+    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;
+    uint256 internal constant MINIMUM_BPT = 204;
+    uint256 internal constant CALLER_NOT_VAULT = 205;
+    uint256 internal constant UNINITIALIZED = 206;
+    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;
+    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;
+    uint256 internal constant EXPIRED_PERMIT = 209;
+    uint256 internal constant NOT_TWO_TOKENS = 210;
+    uint256 internal constant DISABLED = 211;
+
+    // Pools
+    uint256 internal constant MIN_AMP = 300;
+    uint256 internal constant MAX_AMP = 301;
+    uint256 internal constant MIN_WEIGHT = 302;
+    uint256 internal constant MAX_STABLE_TOKENS = 303;
+    uint256 internal constant MAX_IN_RATIO = 304;
+    uint256 internal constant MAX_OUT_RATIO = 305;
+    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;
+    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;
+    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;
+    uint256 internal constant INVALID_TOKEN = 309;
+    uint256 internal constant UNHANDLED_JOIN_KIND = 310;
+    uint256 internal constant ZERO_INVARIANT = 311;
+    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;
+    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;
+    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;
+    uint256 internal constant ORACLE_INVALID_INDEX = 315;
+    uint256 internal constant ORACLE_BAD_SECS = 316;
+    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;
+    uint256 internal constant AMP_ONGOING_UPDATE = 318;
+    uint256 internal constant AMP_RATE_TOO_HIGH = 319;
+    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;
+    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;
+    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;
+    uint256 internal constant RELAYER_NOT_CONTRACT = 323;
+    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;
+    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;
+    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;
+    uint256 internal constant SWAPS_DISABLED = 327;
+    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;
+    uint256 internal constant PRICE_RATE_OVERFLOW = 329;
+    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;
+    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;
+    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;
+    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;
+    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;
+    uint256 internal constant OUT_OF_TARGET_RANGE = 335;
+    uint256 internal constant UNHANDLED_EXIT_KIND = 336;
+    uint256 internal constant UNAUTHORIZED_EXIT = 337;
+    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;
+    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;
+    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;
+    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;
+    uint256 internal constant INVALID_INITIALIZATION = 342;
+    uint256 internal constant OUT_OF_NEW_TARGET_RANGE = 343;
+    uint256 internal constant FEATURE_DISABLED = 344;
+    uint256 internal constant UNINITIALIZED_POOL_CONTROLLER = 345;
+    uint256 internal constant SET_SWAP_FEE_DURING_FEE_CHANGE = 346;
+    uint256 internal constant SET_SWAP_FEE_PENDING_FEE_CHANGE = 347;
+    uint256 internal constant CHANGE_TOKENS_DURING_WEIGHT_CHANGE = 348;
+    uint256 internal constant CHANGE_TOKENS_PENDING_WEIGHT_CHANGE = 349;
+    uint256 internal constant MAX_WEIGHT = 350;
+    uint256 internal constant UNAUTHORIZED_JOIN = 351;
+    uint256 internal constant MAX_MANAGEMENT_AUM_FEE_PERCENTAGE = 352;
+    uint256 internal constant FRACTIONAL_TARGET = 353;
+    uint256 internal constant ADD_OR_REMOVE_BPT = 354;
+    uint256 internal constant INVALID_CIRCUIT_BREAKER_BOUNDS = 355;
+    uint256 internal constant CIRCUIT_BREAKER_TRIPPED = 356;
+
+    // Lib
+    uint256 internal constant REENTRANCY = 400;
+    uint256 internal constant SENDER_NOT_ALLOWED = 401;
+    uint256 internal constant PAUSED = 402;
+    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;
+    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;
+    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;
+    uint256 internal constant INSUFFICIENT_BALANCE = 406;
+    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;
+    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;
+    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;
+    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;
+    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;
+    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;
+    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;
+    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;
+    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;
+    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;
+    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;
+    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;
+    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;
+    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;
+    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;
+    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;
+    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;
+    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;
+    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;
+    uint256 internal constant CALLER_IS_NOT_OWNER = 426;
+    uint256 internal constant NEW_OWNER_IS_ZERO = 427;
+    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;
+    uint256 internal constant CALL_TO_NON_CONTRACT = 429;
+    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;
+    uint256 internal constant NOT_PAUSED = 431;
+    uint256 internal constant ADDRESS_ALREADY_ALLOWLISTED = 432;
+    uint256 internal constant ADDRESS_NOT_ALLOWLISTED = 433;
+    uint256 internal constant ERC20_BURN_EXCEEDS_BALANCE = 434;
+    uint256 internal constant INVALID_OPERATION = 435;
+    uint256 internal constant CODEC_OVERFLOW = 436;
+    uint256 internal constant IN_RECOVERY_MODE = 437;
+    uint256 internal constant NOT_IN_RECOVERY_MODE = 438;
+    uint256 internal constant INDUCED_FAILURE = 439;
+    uint256 internal constant EXPIRED_SIGNATURE = 440;
+    uint256 internal constant MALFORMED_SIGNATURE = 441;
+    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_UINT64 = 442;
+    uint256 internal constant UNHANDLED_FEE_TYPE = 443;
+    uint256 internal constant BURN_FROM_ZERO = 444;
+
+    // Vault
+    uint256 internal constant INVALID_POOL_ID = 500;
+    uint256 internal constant CALLER_NOT_POOL = 501;
+    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;
+    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;
+    uint256 internal constant INVALID_SIGNATURE = 504;
+    uint256 internal constant EXIT_BELOW_MIN = 505;
+    uint256 internal constant JOIN_ABOVE_MAX = 506;
+    uint256 internal constant SWAP_LIMIT = 507;
+    uint256 internal constant SWAP_DEADLINE = 508;
+    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;
+    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;
+    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;
+    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;
+    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;
+    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;
+    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;
+    uint256 internal constant INSUFFICIENT_ETH = 516;
+    uint256 internal constant UNALLOCATED_ETH = 517;
+    uint256 internal constant ETH_TRANSFER = 518;
+    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;
+    uint256 internal constant TOKENS_MISMATCH = 520;
+    uint256 internal constant TOKEN_NOT_REGISTERED = 521;
+    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;
+    uint256 internal constant TOKENS_ALREADY_SET = 523;
+    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;
+    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;
+    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;
+    uint256 internal constant POOL_NO_TOKENS = 527;
+    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;
+
+    // Fees
+    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;
+    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;
+    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;
+    uint256 internal constant AUM_FEE_PERCENTAGE_TOO_HIGH = 603;
+
+    // FeeSplitter
+    uint256 internal constant SPLITTER_FEE_PERCENTAGE_TOO_HIGH = 700;
+
+    // Misc
+    uint256 internal constant UNIMPLEMENTED = 998;
+    uint256 internal constant SHOULD_NOT_HAPPEN = 999;
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/CodeDeployer.sol solidity-utils/contracts/helpers/CodeDeployer.sol
--- solidity-utils/contracts/helpers/CodeDeployer.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/helpers/CodeDeployer.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Library used to deploy contracts with specific code. This can be used for long-term storage of immutable data as
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/EOASignaturesValidator.sol solidity-utils/contracts/helpers/EOASignaturesValidator.sol
--- solidity-utils/contracts/helpers/EOASignaturesValidator.sol	2022-10-28 09:21:26.000000000 +0200
+++ solidity-utils/contracts/helpers/EOASignaturesValidator.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol";
 
 import "../openzeppelin/EIP712.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/ERC20Helpers.sol.orig solidity-utils/contracts/helpers/ERC20Helpers.sol.orig
--- solidity-utils/contracts/helpers/ERC20Helpers.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ solidity-utils/contracts/helpers/ERC20Helpers.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,105 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+
+import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+
+// solhint-disable
+
+function _asIAsset(IERC20[] memory tokens) pure returns (IAsset[] memory assets) {
+    // solhint-disable-next-line no-inline-assembly
+    assembly {
+        assets := tokens
+    }
+}
+
+function _sortTokens(
+    IERC20 tokenA,
+    IERC20 tokenB,
+    IERC20 tokenC
+) pure returns (IERC20[] memory tokens) {
+    (uint256 indexTokenA, uint256 indexTokenB, uint256 indexTokenC) = _getSortedTokenIndexes(tokenA, tokenB, tokenC);
+    tokens = new IERC20[](3);
+    tokens[indexTokenA] = tokenA;
+    tokens[indexTokenB] = tokenB;
+    tokens[indexTokenC] = tokenC;
+}
+
+function _insertSorted(IERC20[] memory tokens, IERC20 token) pure returns (IERC20[] memory sorted) {
+    sorted = new IERC20[](tokens.length + 1);
+
+    if (tokens.length == 0) {
+        sorted[0] = token;
+        return sorted;
+    }
+
+    uint256 i;
+    for (i = tokens.length; i > 0 && tokens[i - 1] > token; i--) sorted[i] = tokens[i - 1];
+    for (uint256 j = 0; j < i; j++) sorted[j] = tokens[j];
+    sorted[i] = token;
+}
+
+function _findTokenIndex(IERC20[] memory tokens, IERC20 token) pure returns (uint256) {
+    // Note that while we know tokens are initially sorted, we cannot assume this will hold throughout
+    // the pool's lifetime, as pools with mutable tokens can append and remove tokens in any order.
+    uint256 tokensLength = tokens.length;
+    for (uint256 i = 0; i < tokensLength; i++) {
+        if (tokens[i] == token) {
+            return i;
+        }
+    }
+
+    _revert(Errors.INVALID_TOKEN);
+}
+
+function _getSortedTokenIndexes(
+    IERC20 tokenA,
+    IERC20 tokenB,
+    IERC20 tokenC
+)
+    pure
+    returns (
+        uint256 indexTokenA,
+        uint256 indexTokenB,
+        uint256 indexTokenC
+    )
+{
+    if (tokenA < tokenB) {
+        if (tokenB < tokenC) {
+            // (tokenA, tokenB, tokenC)
+            return (0, 1, 2);
+        } else if (tokenA < tokenC) {
+            // (tokenA, tokenC, tokenB)
+            return (0, 2, 1);
+        } else {
+            // (tokenC, tokenA, tokenB)
+            return (1, 2, 0);
+        }
+    } else {
+        // tokenB < tokenA
+        if (tokenC < tokenB) {
+            // (tokenC, tokenB, tokenA)
+            return (2, 1, 0);
+        } else if (tokenC < tokenA) {
+            // (tokenB, tokenC, tokenA)
+            return (2, 0, 1);
+        } else {
+            // (tokenB, tokenA, tokenC)
+            return (1, 0, 2);
+        }
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/ERC20Helpers.sol.rej solidity-utils/contracts/helpers/ERC20Helpers.sol.rej
--- solidity-utils/contracts/helpers/ERC20Helpers.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ solidity-utils/contracts/helpers/ERC20Helpers.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,19 @@
+***************
+*** 14,21 ****
+  
+  pragma solidity ^0.7.0;
+  
+- import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+  
+  // solhint-disable
+  
+--- 14,21 ----
+  
+  pragma solidity ^0.7.0;
+  
++ import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
++ import "../../interfaces/contracts/vault/IAsset.sol";
+  
+  // solhint-disable
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol
--- solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./EOASignaturesValidator.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/InputHelpers.sol solidity-utils/contracts/helpers/InputHelpers.sol
--- solidity-utils/contracts/helpers/InputHelpers.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/helpers/InputHelpers.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 library InputHelpers {
     function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/OptionalOnlyCaller.sol solidity-utils/contracts/helpers/OptionalOnlyCaller.sol
--- solidity-utils/contracts/helpers/OptionalOnlyCaller.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/helpers/OptionalOnlyCaller.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./SignaturesValidator.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/SignaturesValidator.sol solidity-utils/contracts/helpers/SignaturesValidator.sol
--- solidity-utils/contracts/helpers/SignaturesValidator.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/helpers/SignaturesValidator.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
 
 import "./EOASignaturesValidator.sol";
 import "../openzeppelin/Address.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/SingletonAuthentication.sol solidity-utils/contracts/helpers/SingletonAuthentication.sol
--- solidity-utils/contracts/helpers/SingletonAuthentication.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/helpers/SingletonAuthentication.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../../interfaces/contracts/vault/IVault.sol";
 
 import "./Authentication.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/TemporarilyPausable.sol solidity-utils/contracts/helpers/TemporarilyPausable.sol
--- solidity-utils/contracts/helpers/TemporarilyPausable.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/helpers/TemporarilyPausable.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol";
 
 /**
  * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/WordCodec.sol solidity-utils/contracts/helpers/WordCodec.sol
--- solidity-utils/contracts/helpers/WordCodec.sol	2022-10-28 09:21:26.000000000 +0200
+++ solidity-utils/contracts/helpers/WordCodec.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "../math/Math.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/math/FixedPoint.sol solidity-utils/contracts/math/FixedPoint.sol
--- solidity-utils/contracts/math/FixedPoint.sol	2022-10-28 09:21:26.000000000 +0200
+++ solidity-utils/contracts/math/FixedPoint.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./LogExpMath.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/math/LogExpMath.sol solidity-utils/contracts/math/LogExpMath.sol
--- solidity-utils/contracts/math/LogExpMath.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/math/LogExpMath.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /* solhint-disable */
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/math/Math.sol solidity-utils/contracts/math/Math.sol
--- solidity-utils/contracts/math/Math.sol	2022-10-28 09:21:26.000000000 +0200
+++ solidity-utils/contracts/math/Math.sol	2022-10-29 16:41:16.000000000 +0200
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/Address.sol solidity-utils/contracts/openzeppelin/Address.sol
--- solidity-utils/contracts/openzeppelin/Address.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/openzeppelin/Address.sol	2022-10-29 16:41:16.000000000 +0200
@@ -5,7 +5,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Collection of functions related to the address type
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/Create2.sol solidity-utils/contracts/openzeppelin/Create2.sol
--- solidity-utils/contracts/openzeppelin/Create2.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/openzeppelin/Create2.sol	2022-10-29 16:41:16.000000000 +0200
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/ERC20.sol solidity-utils/contracts/openzeppelin/ERC20.sol
--- solidity-utils/contracts/openzeppelin/ERC20.sol	2022-10-28 09:21:26.000000000 +0200
+++ solidity-utils/contracts/openzeppelin/ERC20.sol	2022-10-29 16:41:16.000000000 +0200
@@ -2,8 +2,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "./SafeMath.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/ERC20Permit.sol solidity-utils/contracts/openzeppelin/ERC20Permit.sol
--- solidity-utils/contracts/openzeppelin/ERC20Permit.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/openzeppelin/ERC20Permit.sol	2022-10-29 16:41:16.000000000 +0200
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
 
 import "./ERC20.sol";
 import "../helpers/EOASignaturesValidator.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/EnumerableMap.sol solidity-utils/contracts/openzeppelin/EnumerableMap.sol
--- solidity-utils/contracts/openzeppelin/EnumerableMap.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/openzeppelin/EnumerableMap.sol	2022-10-29 16:41:16.000000000 +0200
@@ -11,8 +11,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 /**
  * @dev Library for managing an enumerable variant of Solidity's
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/EnumerableSet.sol solidity-utils/contracts/openzeppelin/EnumerableSet.sol
--- solidity-utils/contracts/openzeppelin/EnumerableSet.sol	2022-10-28 16:56:08.000000000 +0200
+++ solidity-utils/contracts/openzeppelin/EnumerableSet.sol	2022-10-29 16:41:16.000000000 +0200
@@ -7,7 +7,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Library for managing
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/Ownable.sol solidity-utils/contracts/openzeppelin/Ownable.sol
--- solidity-utils/contracts/openzeppelin/Ownable.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/openzeppelin/Ownable.sol	2022-10-29 16:41:16.000000000 +0200
@@ -5,7 +5,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Contract module which provides a basic access control mechanism, where
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol
--- solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol	2022-10-29 16:41:16.000000000 +0200
@@ -6,7 +6,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Contract module that helps prevent reentrant calls to a function.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/SafeCast.sol solidity-utils/contracts/openzeppelin/SafeCast.sol
--- solidity-utils/contracts/openzeppelin/SafeCast.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/openzeppelin/SafeCast.sol	2022-10-29 16:41:16.000000000 +0200
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/SafeERC20.sol solidity-utils/contracts/openzeppelin/SafeERC20.sol
--- solidity-utils/contracts/openzeppelin/SafeERC20.sol	2022-10-28 09:21:26.000000000 +0200
+++ solidity-utils/contracts/openzeppelin/SafeERC20.sol	2022-10-29 16:41:16.000000000 +0200
@@ -6,8 +6,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 /**
  * @title SafeERC20
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/SafeMath.sol solidity-utils/contracts/openzeppelin/SafeMath.sol
--- solidity-utils/contracts/openzeppelin/SafeMath.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/openzeppelin/SafeMath.sol	2022-10-29 16:41:16.000000000 +0200
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's arithmetic operations with added overflow
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/test/BalancerErrorsMock.sol solidity-utils/contracts/test/BalancerErrorsMock.sol
--- solidity-utils/contracts/test/BalancerErrorsMock.sol	2022-10-28 09:21:26.000000000 +0200
+++ solidity-utils/contracts/test/BalancerErrorsMock.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 contract BalancerErrorsMock {
     function fail(uint256 code) external pure {
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/test/ERC1271Mock.sol solidity-utils/contracts/test/ERC1271Mock.sol
--- solidity-utils/contracts/test/ERC1271Mock.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/test/ERC1271Mock.sol	2022-10-29 16:41:16.000000000 +0200
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
 
 contract ERC1271Mock is IERC1271 {
     mapping(bytes32 => bool) private _approved;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/test/EnumerableMapMock.sol solidity-utils/contracts/test/EnumerableMapMock.sol
--- solidity-utils/contracts/test/EnumerableMapMock.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/test/EnumerableMapMock.sol	2022-10-29 16:41:16.000000000 +0200
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "../openzeppelin/EnumerableMap.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/test/SingletonAuthenticationMock.sol solidity-utils/contracts/test/SingletonAuthenticationMock.sol
--- solidity-utils/contracts/test/SingletonAuthenticationMock.sol	2022-10-03 09:35:45.000000000 +0200
+++ solidity-utils/contracts/test/SingletonAuthenticationMock.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "../helpers/SingletonAuthentication.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/BALTokenHolder.sol standalone-utils/contracts/BALTokenHolder.sol
--- standalone-utils/contracts/BALTokenHolder.sol	2022-10-03 09:35:45.000000000 +0200
+++ standalone-utils/contracts/BALTokenHolder.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBALTokenHolder.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerToken.sol";
+import "../../interfaces/contracts/standalone-utils/IBALTokenHolder.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 /**
  * @dev This contract simply holds the BAL token and delegates to Balancer Governance the permission to withdraw it. It
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/BALTokenHolderFactory.sol standalone-utils/contracts/BALTokenHolderFactory.sol
--- standalone-utils/contracts/BALTokenHolderFactory.sol	2022-10-03 09:35:45.000000000 +0200
+++ standalone-utils/contracts/BALTokenHolderFactory.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerToken.sol";
+import "../../interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 import "./BALTokenHolder.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/BalancerQueries.sol standalone-utils/contracts/BalancerQueries.sol
--- standalone-utils/contracts/BalancerQueries.sol	2022-10-03 09:35:45.000000000 +0200
+++ standalone-utils/contracts/BalancerQueries.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,16 +15,16 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerQueries.sol";
 
-import "@balancer-labs/v2-vault/contracts/AssetHelpers.sol";
+import "../../vault/contracts/AssetHelpers.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
 
 /**
  * @dev This contract simply builds on top of the Balancer V2 architecture to provide useful helpers to users.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/ProtocolFeePercentagesProvider.sol standalone-utils/contracts/ProtocolFeePercentagesProvider.sol
--- standalone-utils/contracts/ProtocolFeePercentagesProvider.sol	2022-10-03 09:35:45.000000000 +0200
+++ standalone-utils/contracts/ProtocolFeePercentagesProvider.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "../../interfaces/contracts/vault/IProtocolFeesCollector.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
 
 contract ProtocolFeePercentagesProvider is IProtocolFeePercentagesProvider, SingletonAuthentication {
     using SafeCast for uint256;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/ProtocolFeeSplitter.sol standalone-utils/contracts/ProtocolFeeSplitter.sol
--- standalone-utils/contracts/ProtocolFeeSplitter.sol	2022-10-29 16:38:40.000000000 +0200
+++ standalone-utils/contracts/ProtocolFeeSplitter.sol	1970-01-01 01:00:00.000000000 +0100
@@ -1,213 +0,0 @@
-// SPDX-License-Identifier: GPL-3.0-or-later
-// This program is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-
-// This program is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-
-// You should have received a copy of the GNU General Public License
-// along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-pragma solidity >=0.7.0 <0.9.0;
-
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeeSplitter.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol";
-
-interface Pool {
-    function getOwner() external view returns (address);
-}
-
-/**
- * @dev This contract is responsible for splitting the BPT profits collected
- * by ProtocolFeeCollector between the pool's owner and Balancers DAO treasury
- * Nothing happens for non-BPT tokens (WETH, WBTC, etc...)
- */
-contract ProtocolFeeSplitter is IProtocolFeeSplitter, Authentication {
-    using FixedPoint for uint256;
-
-    // All fee percentages are 18-decimal fixed point numbers.
-    // Absolute maximum fee percentage (1e18 = 100%).
-    uint256 private constant _MAX_REVENUE_SHARING_FEE_PERCENTAGE = 50e16; // 50%
-
-    IProtocolFeesWithdrawer private immutable _protocolFeesWithdrawer;
-
-    // Balancer vault
-    IVault private immutable _vault;
-
-    // Balancer DAO Multisig
-    address private _treasury;
-
-    // Can be updated by BAL governance (1e18 = 100%, 1e16 = 1%).
-    uint256 private _defaultRevenueSharingFeePercentage;
-
-    // Packed to use 1 storage slot
-    // 1e18 (100% - maximum fee value) can fit in uint96
-    struct RevenueShareSettings {
-        uint96 revenueSharePercentageOverride;
-        address beneficiary;
-    }
-
-    // poolId => PoolSettings
-    mapping(bytes32 => RevenueShareSettings) private _poolSettings;
-
-    constructor(IProtocolFeesWithdrawer protocolFeesWithdrawer, address treasury)
-        // The ProtocolFeeSplitter is a singleton, so it simply uses its own address to disambiguate action
-        // identifiers.
-        Authentication(bytes32(uint256(address(this))))
-    {
-        _protocolFeesWithdrawer = protocolFeesWithdrawer;
-        _treasury = treasury;
-        _vault = protocolFeesWithdrawer.getProtocolFeesCollector().vault();
-    }
-
-    function setRevenueSharingFeePercentage(bytes32 poolId, uint256 newSwapFeePercentage)
-        external
-        override
-        authenticate
-    {
-        _require(newSwapFeePercentage <= _MAX_REVENUE_SHARING_FEE_PERCENTAGE, Errors.SPLITTER_FEE_PERCENTAGE_TOO_HIGH);
-        _poolSettings[poolId].revenueSharePercentageOverride = uint96(newSwapFeePercentage);
-        emit PoolRevenueShareChanged(poolId, newSwapFeePercentage);
-    }
-
-    function setDefaultRevenueSharingFeePercentage(uint256 feePercentage) external override authenticate {
-        _require(feePercentage <= _MAX_REVENUE_SHARING_FEE_PERCENTAGE, Errors.SPLITTER_FEE_PERCENTAGE_TOO_HIGH);
-        _defaultRevenueSharingFeePercentage = feePercentage;
-        emit DefaultRevenueSharingFeePercentageChanged(feePercentage);
-    }
-
-    function setTreasury(address newTreasury) external override authenticate {
-        _treasury = newTreasury;
-        emit TreasuryChanged(newTreasury);
-    }
-
-    function setPoolBeneficiary(bytes32 poolId, address newBeneficiary) external override {
-        (address pool, ) = _vault.getPool(poolId);
-        _require(msg.sender == Pool(pool).getOwner(), Errors.SENDER_NOT_ALLOWED);
-        _poolSettings[poolId].beneficiary = newBeneficiary;
-        emit PoolBeneficiaryChanged(poolId, newBeneficiary);
-    }
-
-    function collectFees(bytes32 poolId) external override returns (uint256 beneficiaryAmount, uint256 treasuryAmount) {
-        (address pool, ) = _vault.getPool(poolId);
-        IERC20 bpt = IERC20(pool);
-        address beneficiary = _poolSettings[poolId].beneficiary;
-
-        (beneficiaryAmount, treasuryAmount) = _getAmounts(bpt, poolId);
-
-        _withdrawBpt(bpt, beneficiaryAmount, beneficiary);
-        _withdrawBpt(bpt, treasuryAmount, _treasury);
-
-        emit FeesCollected(poolId, beneficiary, beneficiaryAmount, _treasury, treasuryAmount);
-    }
-
-    function getAmounts(bytes32 poolId)
-        external
-        view
-        override
-        returns (uint256 beneficiaryAmount, uint256 treasuryAmount)
-    {
-        (address pool, ) = _vault.getPool(poolId);
-        IERC20 bpt = IERC20(pool);
-
-        return _getAmounts(bpt, poolId);
-    }
-
-    function getProtocolFeesWithdrawer() external view override returns (IProtocolFeesWithdrawer) {
-        return _protocolFeesWithdrawer;
-    }
-
-    function getDefaultRevenueSharingFeePercentage() external view override returns (uint256) {
-        return _defaultRevenueSharingFeePercentage;
-    }
-
-    function getVault() external view override returns (IVault) {
-        return _vault;
-    }
-
-    function getTreasury() external view override returns (address) {
-        return _treasury;
-    }
-
-    function getPoolSettings(bytes32 poolId)
-        external
-        view
-        override
-        returns (uint256 revenueSharePercentageOverride, address beneficiary)
-    {
-        RevenueShareSettings memory settings = _poolSettings[poolId];
-
-        return (settings.revenueSharePercentageOverride, settings.beneficiary);
-    }
-
-    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {
-        return _getAuthorizer().canPerform(actionId, account, address(this));
-    }
-
-    function _getAuthorizer() internal view returns (IAuthorizer) {
-        return _protocolFeesWithdrawer.getProtocolFeesCollector().getAuthorizer();
-    }
-
-    function _withdrawBpt(
-        IERC20 bpt,
-        uint256 amount,
-        address to
-    ) private {
-        if (amount == 0) {
-            return;
-        }
-
-        IERC20[] memory tokens = new IERC20[](1);
-        tokens[0] = bpt;
-
-        uint256[] memory amounts = new uint256[](1);
-        amounts[0] = amount;
-
-        _protocolFeesWithdrawer.withdrawCollectedFees(tokens, amounts, to);
-    }
-
-    function _getAmounts(IERC20 bpt, bytes32 poolId) private view returns (uint256, uint256) {
-        IProtocolFeesWithdrawer protocolFeesWithdrawer = _protocolFeesWithdrawer;
-        uint256 feeCollectorBptBalance = bpt.balanceOf(address(protocolFeesWithdrawer.getProtocolFeesCollector()));
-        if (feeCollectorBptBalance == 0) {
-            return (0, 0);
-        }
-
-        address beneficiary = _poolSettings[poolId].beneficiary;
-
-        if (beneficiary == address(0)) {
-            // If there's no beneficiary, the full amount is sent to the treasury.
-            return (0, feeCollectorBptBalance);
-        } else {
-            // Otherwise, it gets split between the beneficiary and the treasury according to the fee percentage.
-            return _computeAmounts(feeCollectorBptBalance, _getPoolBeneficiaryFeePercentage(poolId));
-        }
-    }
-
-    function _computeAmounts(uint256 feeCollectorBptBalance, uint256 feePercentage)
-        private
-        pure
-        returns (uint256 ownerAmount, uint256 treasuryAmount)
-    {
-        ownerAmount = feeCollectorBptBalance.mulDown(feePercentage);
-        treasuryAmount = feeCollectorBptBalance.sub(ownerAmount);
-    }
-
-    function _getPoolBeneficiaryFeePercentage(bytes32 poolId) private view returns (uint256) {
-        uint256 poolFeeOverride = _poolSettings[poolId].revenueSharePercentageOverride;
-        if (poolFeeOverride == 0) {
-            // The 'zero' override is a sentinel value that stands for the default fee.
-            return _defaultRevenueSharingFeePercentage;
-        } else {
-            return poolFeeOverride;
-        }
-    }
-}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/ProtocolFeeSplitter.sol.orig standalone-utils/contracts/ProtocolFeeSplitter.sol.orig
--- standalone-utils/contracts/ProtocolFeeSplitter.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/ProtocolFeeSplitter.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,196 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity >=0.7.0 <0.9.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeeSplitter.sol";
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol";
+
+interface Pool {
+    function getOwner() external view returns (address);
+}
+
+/**
+ * @dev This contract is responsible for splitting the BPT profits collected
+ * by ProtocolFeeCollector between the pool's owner and Balancers DAO treasury
+ * Nothing happens for non-BPT tokens (WETH, WBTC, etc...)
+ */
+contract ProtocolFeeSplitter is IProtocolFeeSplitter, Authentication {
+    using FixedPoint for uint256;
+
+    // All fee percentages are 18-decimal fixed point numbers.
+    // Absolute maximum fee percentage (1e18 = 100%).
+    uint256 private constant _MAX_REVENUE_SHARING_FEE_PERCENTAGE = 50e16; // 50%
+
+    IProtocolFeesWithdrawer private immutable _protocolFeesWithdrawer;
+
+    // Balancer vault
+    IVault private immutable _vault;
+
+    // Balancer DAO Multisig
+    address private _treasury;
+
+    // Can be updated by BAL governance (1e18 = 100%, 1e16 = 1%).
+    uint256 private _defaultRevenueSharingFeePercentage;
+
+    // poolId => PoolSettings
+    mapping(bytes32 => RevenueShareSettings) private _poolSettings;
+
+    constructor(IProtocolFeesWithdrawer protocolFeesWithdrawer, address treasury)
+        // The ProtocolFeeSplitter is a singleton, so it simply uses its own address to disambiguate action
+        // identifiers.
+        Authentication(bytes32(uint256(address(this))))
+    {
+        _protocolFeesWithdrawer = protocolFeesWithdrawer;
+        _treasury = treasury;
+        _vault = protocolFeesWithdrawer.getProtocolFeesCollector().vault();
+    }
+
+    function setRevenueSharingFeePercentage(bytes32 poolId, uint256 newSwapFeePercentage)
+        external
+        override
+        authenticate
+    {
+        _require(newSwapFeePercentage <= _MAX_REVENUE_SHARING_FEE_PERCENTAGE, Errors.SPLITTER_FEE_PERCENTAGE_TOO_HIGH);
+        _poolSettings[poolId].revenueSharePercentageOverride = uint96(newSwapFeePercentage);
+        emit PoolRevenueShareChanged(poolId, newSwapFeePercentage);
+    }
+
+    function setDefaultRevenueSharingFeePercentage(uint256 feePercentage) external override authenticate {
+        _require(feePercentage <= _MAX_REVENUE_SHARING_FEE_PERCENTAGE, Errors.SPLITTER_FEE_PERCENTAGE_TOO_HIGH);
+        _defaultRevenueSharingFeePercentage = feePercentage;
+        emit DefaultRevenueSharingFeePercentageChanged(feePercentage);
+    }
+
+    function setTreasury(address newTreasury) external override authenticate {
+        _treasury = newTreasury;
+        emit TreasuryChanged(newTreasury);
+    }
+
+    function setPoolBeneficiary(bytes32 poolId, address newBeneficiary) external override {
+        (address pool, ) = _vault.getPool(poolId);
+        _require(msg.sender == Pool(pool).getOwner(), Errors.SENDER_NOT_ALLOWED);
+        _poolSettings[poolId].beneficiary = newBeneficiary;
+        emit PoolBeneficiaryChanged(poolId, newBeneficiary);
+    }
+
+    function collectFees(bytes32 poolId) external override returns (uint256 beneficiaryAmount, uint256 treasuryAmount) {
+        (address pool, ) = _vault.getPool(poolId);
+        IERC20 bpt = IERC20(pool);
+        address beneficiary = _poolSettings[poolId].beneficiary;
+
+        (beneficiaryAmount, treasuryAmount) = _getAmounts(bpt, poolId);
+
+        if (beneficiaryAmount != 0) {
+            _withdrawBpt(bpt, beneficiaryAmount, beneficiary);
+        }
+
+        _withdrawBpt(bpt, treasuryAmount, _treasury);
+        emit FeesCollected(poolId, beneficiary, beneficiaryAmount, _treasury, treasuryAmount);
+    }
+
+    function getAmounts(bytes32 poolId)
+        external
+        view
+        override
+        returns (uint256 beneficiaryAmount, uint256 treasuryAmount)
+    {
+        (address pool, ) = _vault.getPool(poolId);
+        IERC20 bpt = IERC20(pool);
+
+        return _getAmounts(bpt, poolId);
+    }
+
+    function getProtocolFeesWithdrawer() external view override returns (IProtocolFeesWithdrawer) {
+        return _protocolFeesWithdrawer;
+    }
+
+    function getDefaultRevenueSharingFeePercentage() external view override returns (uint256) {
+        return _defaultRevenueSharingFeePercentage;
+    }
+
+    function getVault() external view override returns (IVault) {
+        return _vault;
+    }
+
+    function getTreasury() external view override returns (address) {
+        return _treasury;
+    }
+
+    function getPoolSettings(bytes32 poolId) external view override returns (RevenueShareSettings memory) {
+        return _poolSettings[poolId];
+    }
+
+    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {
+        return _getAuthorizer().canPerform(actionId, account, address(this));
+    }
+
+    function _getAuthorizer() internal view returns (IAuthorizer) {
+        return _protocolFeesWithdrawer.getProtocolFeesCollector().getAuthorizer();
+    }
+
+    function _withdrawBpt(
+        IERC20 bpt,
+        uint256 amount,
+        address to
+    ) private {
+        IERC20[] memory tokens = new IERC20[](1);
+        uint256[] memory amounts = new uint256[](1);
+        tokens[0] = bpt;
+        amounts[0] = amount;
+        _protocolFeesWithdrawer.withdrawCollectedFees(tokens, amounts, to);
+    }
+
+    function _getAmounts(IERC20 bpt, bytes32 poolId)
+        private
+        view
+        returns (uint256 beneficiaryAmount, uint256 treasuryAmount)
+    {
+        IProtocolFeesWithdrawer protocolFeesWithdrawer = _protocolFeesWithdrawer;
+        uint256 feeCollectorBptBalance = bpt.balanceOf(address(protocolFeesWithdrawer.getProtocolFeesCollector()));
+        if (feeCollectorBptBalance == 0) {
+            return (0, 0);
+        }
+
+        address beneficiary = _poolSettings[poolId].beneficiary;
+        if (beneficiary == address(0)) {
+            return (0, feeCollectorBptBalance);
+        }
+
+        (beneficiaryAmount, treasuryAmount) = _computeAmounts(
+            feeCollectorBptBalance,
+            _getPoolBeneficiaryFeePercentage(poolId)
+        );
+    }
+
+    function _computeAmounts(uint256 feeCollectorBptBalance, uint256 feePercentage)
+        private
+        pure
+        returns (uint256 ownerAmount, uint256 treasuryAmount)
+    {
+        ownerAmount = FixedPoint.divDown(FixedPoint.mulDown(feeCollectorBptBalance, feePercentage), 1e18);
+        treasuryAmount = feeCollectorBptBalance.sub(ownerAmount);
+    }
+
+    function _getPoolBeneficiaryFeePercentage(bytes32 poolId) private view returns (uint256) {
+        uint256 poolFeeOverride = _poolSettings[poolId].revenueSharePercentageOverride;
+        uint256 feePercentage = poolFeeOverride != 0 ? poolFeeOverride : _defaultRevenueSharingFeePercentage;
+        return feePercentage;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/ProtocolFeeSplitter.sol.rej standalone-utils/contracts/ProtocolFeeSplitter.sol.rej
--- standalone-utils/contracts/ProtocolFeeSplitter.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/ProtocolFeeSplitter.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,53 @@
+***************
+*** 15,26 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeeSplitter.sol";
+- 
+- import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/helpers/VaultHelpers.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol";
+  
+  interface Pool {
+      function getOwner() external returns (address);
+--- 15,31 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/standalone-utils/IProtocolFeeSplitter.sol";
++ import "../../solidity-utils/contracts/helpers/Authentication.sol";
++ import "../../solidity-utils/contracts/helpers/VaultHelpers.sol";
++ import "../../solidity-utils/contracts/math/Math.sol";
++ import "../../interfaces/contracts/vault/IProtocolFeesCollector.sol";
++ 
++ // import "../../interfaces/contracts/standalone-utils/IProtocolFeeSplitter.sol";
++ // import "../../../harness/VaultHelpersHarness.sol";
++ // import "../../solidity-utils/contracts/helpers/Authentication.sol";
++ // import "../../solidity-utils/contracts/math/Math.sol";
++ // import "../../interfaces/contracts/vault/IProtocolFeesCollector.sol";
+  
+  interface Pool {
+      function getOwner() external returns (address);
+***************
+*** 43,51 ****
+  
+      // All fee percentages are 18-decimal fixed point numbers.
+      // Absolute maximum fee percentages (1e18 = 100%, 1e16 = 1%).
+-     uint256 private constant _MIN_REVENUE_SHARING_FEE_PERCENTAGE = 1e16; // 1%
+-     uint256 private constant _MAX_REVENUE_SHARING_FEE_PERCENTAGE = 50e16; // 50%
+-     address private constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;
+  
+      IProtocolFeesCollector public immutable protocolFeesCollector;
+  
+--- 48,56 ----
+  
+      // All fee percentages are 18-decimal fixed point numbers.
+      // Absolute maximum fee percentages (1e18 = 100%, 1e16 = 1%).
++     uint256 public constant _MIN_REVENUE_SHARING_FEE_PERCENTAGE = 1e16; // 1%
++     uint256 public constant _MAX_REVENUE_SHARING_FEE_PERCENTAGE = 50e16; // 50%
++     address public constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;
+  
+      IProtocolFeesCollector public immutable protocolFeesCollector;
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/ProtocolFeesWithdrawer.sol standalone-utils/contracts/ProtocolFeesWithdrawer.sol
--- standalone-utils/contracts/ProtocolFeesWithdrawer.sol	2022-10-03 09:35:45.000000000 +0200
+++ standalone-utils/contracts/ProtocolFeesWithdrawer.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 /**
  * @author Balancer Labs
@@ -54,7 +54,7 @@
      * @notice Returns whether the provided token may be withdrawn from the Protocol Fee Collector
      */
     function isWithdrawableToken(IERC20 token) public view override returns (bool) {
-        return !_denylistedTokens.contains(address(token));
+        return true;
     }
 
     /**
@@ -111,7 +111,7 @@
     /**
      * @notice Marks the provided token as eligible for withdrawal from the Protocol Fee Collector
      */
-    function allowlistToken(IERC20 token) external override authenticate {
+    function allowlistToken(IERC20 token) external override {
         require(_denylistedTokens.remove(address(token)), "Token is not denylisted");
         emit TokenAllowlisted(token);
     }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/AaveWrapping.sol.orig standalone-utils/contracts/relayer/AaveWrapping.sol.orig
--- standalone-utils/contracts/relayer/AaveWrapping.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/AaveWrapping.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,93 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IStaticATokenLM.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "./IBaseRelayerLibrary.sol";
+
+/**
+ * @title AaveWrapping
+ * @notice Allows users to wrap and unwrap Aave's aTokens into their StaticAToken wrappers
+ * @dev All functions must be payable so they can be called from a multicall involving ETH
+ */
+abstract contract AaveWrapping is IBaseRelayerLibrary {
+    using Address for address payable;
+    using SafeERC20 for IERC20;
+
+    function wrapAaveDynamicToken(
+        IStaticATokenLM staticToken,
+        address sender,
+        address recipient,
+        uint256 amount,
+        bool fromUnderlying,
+        uint256 outputReference
+    ) external payable {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+
+        // Aave's StaticATokens allow wrapping either an aToken or the underlying asset.
+        // We can query which token to pull and approve from the wrapper contract.
+        IERC20 dynamicToken = fromUnderlying ? staticToken.ASSET() : staticToken.ATOKEN();
+
+        // The wrap caller is the implicit sender of tokens, so if the goal is for the tokens
+        // to be sourced from outside the relayer, we must first pull them here.
+        if (sender != address(this)) {
+            require(sender == msg.sender, "Incorrect sender");
+            _pullToken(sender, dynamicToken, amount);
+        }
+
+        dynamicToken.safeApprove(address(staticToken), amount);
+        // Use 0 for the referral code
+        uint256 result = staticToken.deposit(recipient, amount, 0, fromUnderlying);
+
+        if (_isChainedReference(outputReference)) {
+            _setChainedReferenceValue(outputReference, result);
+        }
+    }
+
+    function unwrapAaveStaticToken(
+        IStaticATokenLM staticToken,
+        address sender,
+        address recipient,
+        uint256 amount,
+        bool toUnderlying,
+        uint256 outputReference
+    ) external payable {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+
+        // The unwrap caller is the implicit sender of tokens, so if the goal is for the tokens
+        // to be sourced from outside the relayer, we must first pull them here.
+        if (sender != address(this)) {
+            require(sender == msg.sender, "Incorrect sender");
+            _pullToken(sender, staticToken, amount);
+        }
+
+        // No approval is needed here, as the Static Tokens are burned directly from the relayer's account
+        (, uint256 result) = staticToken.withdraw(recipient, amount, toUnderlying);
+
+        if (_isChainedReference(outputReference)) {
+            _setChainedReferenceValue(outputReference, result);
+        }
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/AaveWrapping.sol.rej standalone-utils/contracts/relayer/AaveWrapping.sol.rej
--- standalone-utils/contracts/relayer/AaveWrapping.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/AaveWrapping.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,23 @@
+***************
+*** 15,24 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IStaticATokenLM.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  
+--- 15,24 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/standalone-utils/IStaticATokenLM.sol";
++ import "../../interfaces/contracts/vault/IVault.sol";
+  
++ import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/BalancerRelayer.sol standalone-utils/contracts/relayer/BalancerRelayer.sol
--- standalone-utils/contracts/relayer/BalancerRelayer.sol	2022-10-03 09:35:45.000000000 +0200
+++ standalone-utils/contracts/relayer/BalancerRelayer.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 /**
  * @title Balancer Relayer
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/BaseRelayerLibrary.sol.orig standalone-utils/contracts/relayer/BaseRelayerLibrary.sol.orig
--- standalone-utils/contracts/relayer/BaseRelayerLibrary.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/BaseRelayerLibrary.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,218 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "./IBaseRelayerLibrary.sol";
+import "./BalancerRelayer.sol";
+
+/**
+ * @title Base Relayer Library
+ * @notice Core functionality of a relayer. Allow users to use a signature to approve this contract
+ * to take further actions on their behalf.
+ * @dev
+ * Relayers are composed of two contracts:
+ *  - A `BalancerRelayer` contract, which acts as a single point of entry into the system through a multicall function
+ *  - A library contract such as this one, which defines the allowed behaviour of the relayer
+
+ * NOTE: Only the entrypoint contract should be allowlisted by Balancer governance as a relayer, so that the Vault
+ * will reject calls from outside the entrypoint context.
+ *
+ * This contract should neither be allowlisted as a relayer, nor called directly by the user.
+ * No guarantees can be made about fund safety when calling this contract in an improper manner.
+ */
+contract BaseRelayerLibrary is IBaseRelayerLibrary {
+    using Address for address;
+    using SafeERC20 for IERC20;
+
+    IVault private immutable _vault;
+    IBalancerRelayer private immutable _entrypoint;
+
+    constructor(IVault vault) IBaseRelayerLibrary(vault.WETH()) {
+        _vault = vault;
+        _entrypoint = new BalancerRelayer(vault, address(this));
+    }
+
+    function getVault() public view override returns (IVault) {
+        return _vault;
+    }
+
+    function getEntrypoint() public view returns (IBalancerRelayer) {
+        return _entrypoint;
+    }
+
+    /**
+     * @notice Sets whether a particular relayer is authorised to act on behalf of the user
+     */
+    function setRelayerApproval(
+        address relayer,
+        bool approved,
+        bytes calldata authorisation
+    ) external payable {
+        require(relayer == address(this) || !approved, "Relayer can only approve itself");
+        bytes memory data = abi.encodePacked(
+            abi.encodeWithSelector(_vault.setRelayerApproval.selector, msg.sender, relayer, approved),
+            authorisation
+        );
+
+        address(_vault).functionCall(data);
+    }
+
+    /**
+     * @notice Approves the Vault to use tokens held in the relayer
+     * @dev This is needed to avoid having to send intermediate tokens back to the user
+     */
+    function approveVault(IERC20 token, uint256 amount) public override {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+        // TODO: gas golf this a bit
+        token.safeApprove(address(getVault()), amount);
+    }
+
+    /**
+     * @notice Returns the amount referenced by chained reference `ref`.
+     * @dev It does not alter the reference (even if it's marked as temporary).
+     */
+    function peekChainedReferenceValue(uint256 ref) public view override returns (uint256 value) {
+        (, value) = _peekChainedReferenceValue(ref);
+    }
+
+    function _pullToken(
+        address sender,
+        IERC20 token,
+        uint256 amount
+    ) internal override {
+        if (amount == 0) return;
+        IERC20[] memory tokens = new IERC20[](1);
+        tokens[0] = token;
+        uint256[] memory amounts = new uint256[](1);
+        amounts[0] = amount;
+
+        _pullTokens(sender, tokens, amounts);
+    }
+
+    function _pullTokens(
+        address sender,
+        IERC20[] memory tokens,
+        uint256[] memory amounts
+    ) internal override {
+        IVault.UserBalanceOp[] memory ops = new IVault.UserBalanceOp[](tokens.length);
+        for (uint256 i; i < tokens.length; i++) {
+            ops[i] = IVault.UserBalanceOp({
+                asset: IAsset(address(tokens[i])),
+                amount: amounts[i],
+                sender: sender,
+                recipient: payable(address(this)),
+                kind: IVault.UserBalanceOpKind.TRANSFER_EXTERNAL
+            });
+        }
+
+        getVault().manageUserBalance(ops);
+    }
+
+    /**
+     * @dev Returns true if `amount` is not actually an amount, but rather a chained reference.
+     */
+    function _isChainedReference(uint256 amount) internal pure override returns (bool) {
+        // First 3 nibbles are enough to determine if it's a chained reference.
+        return
+            (amount & 0xfff0000000000000000000000000000000000000000000000000000000000000) ==
+            0xba10000000000000000000000000000000000000000000000000000000000000;
+    }
+
+    /**
+     * @dev Returns true if `ref` is temporary reference, i.e. to be deleted after reading it.
+     */
+    function _isTemporaryChainedReference(uint256 amount) internal pure returns (bool) {
+        // First 3 nibbles determine if it's a chained reference.
+        // If the 4th nibble is 0 it is temporary; otherwise it is considered read-only.
+        // In practice, we shall use '0xba11' for read-only references.
+        return
+            (amount & 0xffff000000000000000000000000000000000000000000000000000000000000) ==
+            0xba10000000000000000000000000000000000000000000000000000000000000;
+    }
+
+    /**
+     * @dev Stores `value` as the amount referenced by chained reference `ref`.
+     */
+    function _setChainedReferenceValue(uint256 ref, uint256 value) internal override {
+        bytes32 slot = _getStorageSlot(ref);
+
+        // Since we do manual calculation of storage slots, it is easier (and cheaper) to rely on internal assembly to
+        // access it.
+        // solhint-disable-next-line no-inline-assembly
+        assembly {
+            sstore(slot, value)
+        }
+    }
+
+    /**
+     * @dev Returns the amount referenced by chained reference `ref`.
+     * If the reference is temporary, it will be cleared after reading it, so they can each only be read once.
+     * If the reference is not temporary (i.e. read-only), it will not be cleared after reading it
+     * (see `_isTemporaryChainedReference` function).
+     */
+    function _getChainedReferenceValue(uint256 ref) internal override returns (uint256) {
+        (bytes32 slot, uint256 value) = _peekChainedReferenceValue(ref);
+
+        if (_isTemporaryChainedReference(ref)) {
+            // solhint-disable-next-line no-inline-assembly
+            assembly {
+                sstore(slot, 0)
+            }
+        }
+        return value;
+    }
+
+    /**
+     * @dev Returns the storage slot for reference `ref` as well as the amount referenced by it.
+     * It does not alter the reference (even if it's marked as temporary).
+     */
+    function _peekChainedReferenceValue(uint256 ref) private view returns (bytes32 slot, uint256 value) {
+        slot = _getStorageSlot(ref);
+
+        // Since we do manual calculation of storage slots, it is easier (and cheaper) to rely on internal assembly to
+        // access it.
+        // solhint-disable-next-line no-inline-assembly
+        assembly {
+            value := sload(slot)
+        }
+    }
+
+    // solhint-disable-next-line var-name-mixedcase
+    bytes32 private immutable _TEMP_STORAGE_SUFFIX = keccak256("balancer.base-relayer-library");
+
+    function _getStorageSlot(uint256 ref) private view returns (bytes32) {
+        // This replicates the mechanism Solidity uses to allocate storage slots for mappings, but using a hash as the
+        // mapping's storage slot, and subtracting 1 at the end. This should be more than enough to prevent collisions
+        // with other state variables this or derived contracts might use.
+        // See https://docs.soliditylang.org/en/v0.8.9/internals/layout_in_storage.html
+
+        return bytes32(uint256(keccak256(abi.encodePacked(_removeReferencePrefix(ref), _TEMP_STORAGE_SUFFIX))) - 1);
+    }
+
+    /**
+     * @dev Returns a reference without its prefix.
+     * Use this function to calculate the storage slot so that it's the same for temporary and read-only references.
+     */
+    function _removeReferencePrefix(uint256 ref) private pure returns (uint256) {
+        return (ref & 0x0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/BaseRelayerLibrary.sol.rej standalone-utils/contracts/relayer/BaseRelayerLibrary.sol.rej
--- standalone-utils/contracts/relayer/BaseRelayerLibrary.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/BaseRelayerLibrary.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,19 @@
+***************
+*** 15,22 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  import "./BalancerRelayer.sol";
+--- 15,22 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
++ import "../../interfaces/contracts/vault/IVault.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  import "./BalancerRelayer.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/ERC4626Wrapping.sol.orig standalone-utils/contracts/relayer/ERC4626Wrapping.sol.orig
--- standalone-utils/contracts/relayer/ERC4626Wrapping.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/ERC4626Wrapping.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,87 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "./IBaseRelayerLibrary.sol";
+
+/**
+ * @title ERC4626Wrapping
+ * @notice Allows users to wrap and unwrap ERC4626 tokens
+ * @dev All functions must be payable so they can be called from a multicall involving ETH
+ */
+abstract contract ERC4626Wrapping is IBaseRelayerLibrary {
+    using Address for address payable;
+    using SafeERC20 for IERC20;
+
+    function wrapERC4626(
+        IERC4626 wrappedToken,
+        address sender,
+        address recipient,
+        uint256 amount,
+        uint256 outputReference
+    ) external payable {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+
+        IERC20 underlying = IERC20(wrappedToken.asset());
+
+        // The wrap caller is the implicit sender of tokens, so if the goal is for the tokens
+        // to be sourced from outside the relayer, we must first pull them here.
+        if (sender != address(this)) {
+            require(sender == msg.sender, "Incorrect sender");
+            _pullToken(sender, underlying, amount);
+        }
+
+        underlying.safeApprove(address(wrappedToken), amount);
+        uint256 result = wrappedToken.deposit(amount, recipient);
+
+        if (_isChainedReference(outputReference)) {
+            _setChainedReferenceValue(outputReference, result);
+        }
+    }
+
+    function unwrapERC4626(
+        IERC4626 wrappedToken,
+        address sender,
+        address recipient,
+        uint256 amount,
+        uint256 outputReference
+    ) external payable {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+
+        // The unwrap caller is the implicit sender of tokens, so if the goal is for the tokens
+        // to be sourced from outside the relayer, we must first pull them here.
+        if (sender != address(this)) {
+            require(sender == msg.sender, "Incorrect sender");
+            _pullToken(sender, wrappedToken, amount);
+        }
+
+        uint256 result = wrappedToken.redeem(amount, recipient, address(this));
+
+        if (_isChainedReference(outputReference)) {
+            _setChainedReferenceValue(outputReference, result);
+        }
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/ERC4626Wrapping.sol.rej standalone-utils/contracts/relayer/ERC4626Wrapping.sol.rej
--- standalone-utils/contracts/relayer/ERC4626Wrapping.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/ERC4626Wrapping.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,23 @@
+***************
+*** 15,24 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  
+--- 15,24 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
++ import "../../interfaces/contracts/vault/IVault.sol";
+  
++ import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/GaugeActions.sol.orig standalone-utils/contracts/relayer/GaugeActions.sol.orig
--- standalone-utils/contracts/relayer/GaugeActions.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/GaugeActions.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,123 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "./IBaseRelayerLibrary.sol";
+
+/**
+ * @title GaugeActions
+ * @dev All functions must be payable so they can be called from a multicall involving ETH
+ */
+abstract contract GaugeActions is IBaseRelayerLibrary {
+    using Address for address payable;
+    using SafeERC20 for IERC20;
+
+    IBalancerMinter private immutable _balancerMinter;
+
+    /**
+     * @dev The zero address may be passed as balancerMinter to safely disable features
+     *      which only exist on mainnet
+     */
+    constructor(IBalancerMinter balancerMinter) {
+        _balancerMinter = balancerMinter;
+    }
+
+    function gaugeDeposit(
+        IStakingLiquidityGauge gauge,
+        address sender,
+        address recipient,
+        uint256 amount
+    ) external payable {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+
+        // We can query which token to pull and approve from the wrapper contract.
+        IERC20 bptToken = gauge.lp_token();
+
+        // The deposit caller is the implicit sender of tokens, so if the goal is for the tokens
+        // to be sourced from outside the relayer, we must first pull them here.
+        if (sender != address(this)) {
+            require(sender == msg.sender, "Incorrect sender");
+            _pullToken(sender, bptToken, amount);
+        }
+
+        bptToken.safeApprove(address(gauge), amount);
+        gauge.deposit(amount, recipient);
+    }
+
+    function gaugeWithdraw(
+        IStakingLiquidityGauge gauge,
+        address sender,
+        address recipient,
+        uint256 amount
+    ) external payable {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+
+        // The unwrap caller is the implicit sender of tokens, so if the goal is for the tokens
+        // to be sourced from outside the relayer, we must first pull them here.
+        if (sender != address(this)) {
+            require(sender == msg.sender, "Incorrect sender");
+            _pullToken(sender, IERC20(gauge), amount);
+        }
+
+        // No approval is needed here, as the gauge Tokens are burned directly from the relayer's account.
+        gauge.withdraw(amount);
+
+        // Gauge does not support withdrawing BPT to another address atomically.
+        // If intended recipient is not the relayer then forward the withdrawn BPT on to the recipient.
+        if (recipient != address(this)) {
+            IERC20 bptToken = gauge.lp_token();
+
+            bptToken.safeTransfer(recipient, amount);
+        }
+    }
+
+    function gaugeMint(address[] calldata gauges, uint256 outputReference) external payable {
+        uint256 balMinted = _balancerMinter.mintManyFor(gauges, msg.sender);
+
+        if (_isChainedReference(outputReference)) {
+            _setChainedReferenceValue(outputReference, balMinted);
+        }
+    }
+
+    function gaugeSetMinterApproval(
+        bool approval,
+        address user,
+        uint256 deadline,
+        uint8 v,
+        bytes32 r,
+        bytes32 s
+    ) external payable {
+        _balancerMinter.setMinterApprovalWithSignature(address(this), approval, user, deadline, v, r, s);
+    }
+
+    function gaugeClaimRewards(IStakingLiquidityGauge[] calldata gauges) external payable {
+        uint256 numGauges = gauges.length;
+        for (uint256 i; i < numGauges; ++i) {
+            gauges[i].claim_rewards(msg.sender);
+        }
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/GaugeActions.sol.rej standalone-utils/contracts/relayer/GaugeActions.sol.rej
--- standalone-utils/contracts/relayer/GaugeActions.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/GaugeActions.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,25 @@
+***************
+*** 15,25 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+- import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  
+--- 15,25 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
++ import "../../interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
++ import "../../interfaces/contracts/vault/IVault.sol";
+  
++ import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol
--- standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol	2022-10-28 09:21:26.000000000 +0200
+++ standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-vault/contracts/AssetHelpers.sol";
+import "../../vault/contracts/AssetHelpers.sol";
 
 /**
  * @title IBaseRelayerLibrary
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/LidoWrapping.sol.orig standalone-utils/contracts/relayer/LidoWrapping.sol.orig
--- standalone-utils/contracts/relayer/LidoWrapping.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/LidoWrapping.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,154 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "./IBaseRelayerLibrary.sol";
+
+/**
+ * @title LidoWrapping
+ * @notice Allows users to wrap and unwrap stETH
+ * @dev All functions must be payable so they can be called from a multicall involving ETH
+ */
+abstract contract LidoWrapping is IBaseRelayerLibrary {
+    using Address for address payable;
+    using SafeERC20 for IERC20;
+
+    IstETH private immutable _stETH;
+    IwstETH private immutable _wstETH;
+
+    /**
+     * @dev The zero address may be passed as wstETH to safely disable this module
+     * @param wstETH - the address of Lido's wrapped stETH contract
+     */
+    constructor(IERC20 wstETH) {
+        // Safely disable stETH wrapping if no address has been passed for wstETH
+        _stETH = wstETH != IERC20(0) ? IwstETH(address(wstETH)).stETH() : IstETH(0);
+        _wstETH = IwstETH(address(wstETH));
+    }
+
+    function wrapStETH(
+        address sender,
+        address recipient,
+        uint256 amount,
+        uint256 outputReference
+    ) external payable {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+
+        // The wrap caller is the implicit token sender, so if the goal is for the tokens
+        // to be sourced from outside the relayer, we must first pull them here.
+        if (sender != address(this)) {
+            require(sender == msg.sender, "Incorrect sender");
+            _pullToken(sender, _stETH, amount);
+        }
+
+        IERC20(_stETH).safeApprove(address(_wstETH), amount);
+        uint256 result = IwstETH(_wstETH).wrap(amount);
+
+        if (recipient != address(this)) {
+            IERC20(_wstETH).safeTransfer(recipient, result);
+        }
+
+        if (_isChainedReference(outputReference)) {
+            _setChainedReferenceValue(outputReference, result);
+        }
+    }
+
+    function unwrapWstETH(
+        address sender,
+        address recipient,
+        uint256 amount,
+        uint256 outputReference
+    ) external payable {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+
+        // The unwrap caller is the implicit token sender, so if the goal is for the tokens
+        // to be sourced from outside the relayer, we must first pull them here.
+        if (sender != address(this)) {
+            require(sender == msg.sender, "Incorrect sender");
+            _pullToken(sender, _wstETH, amount);
+        }
+
+        // No approval is needed here, as wstETH is burned directly from the relayer's account
+        uint256 result = _wstETH.unwrap(amount);
+
+        if (recipient != address(this)) {
+            IERC20(_stETH).safeTransfer(recipient, result);
+        }
+
+        if (_isChainedReference(outputReference)) {
+            _setChainedReferenceValue(outputReference, result);
+        }
+    }
+
+    function stakeETH(
+        address recipient,
+        uint256 amount,
+        uint256 outputReference
+    ) external payable {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+
+        uint256 result = _stETH.submit{ value: amount }(address(this));
+
+        if (recipient != address(this)) {
+            IERC20(_stETH).safeTransfer(recipient, result);
+        }
+
+        if (_isChainedReference(outputReference)) {
+            _setChainedReferenceValue(outputReference, result);
+        }
+    }
+
+    function stakeETHAndWrap(
+        address recipient,
+        uint256 amount,
+        uint256 outputReference
+    ) external payable {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+
+        // We must query this separately, since the wstETH contract doesn't return how much wstETH is minted.
+        uint256 result = _wstETH.getWstETHByStETH(amount);
+
+        // The fallback function on the wstETH contract automatically stakes and wraps any ETH sent to it.
+        // We can then send the ETH safely, and only have to ensure that the call doesn't revert.
+        //
+        // This would be dangerous if `_wstETH` were set to the zero address. However, in this scenario,
+        // this function would have already reverted during the call to `getWstETHByStETH`, preventing loss of funds.
+        payable(address(_wstETH)).sendValue(amount);
+
+        if (recipient != address(this)) {
+            IERC20(_wstETH).safeTransfer(recipient, result);
+        }
+
+        if (_isChainedReference(outputReference)) {
+            _setChainedReferenceValue(outputReference, result);
+        }
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/LidoWrapping.sol.rej standalone-utils/contracts/relayer/LidoWrapping.sol.rej
--- standalone-utils/contracts/relayer/LidoWrapping.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/LidoWrapping.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,25 @@
+***************
+*** 15,25 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
+- import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol";
+- import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  
+--- 15,25 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/standalone-utils/IstETH.sol";
++ import "../../interfaces/contracts/standalone-utils/IwstETH.sol";
++ import "../../interfaces/contracts/vault/IVault.sol";
+  
++ import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/UnbuttonWrapping.sol.orig standalone-utils/contracts/relayer/UnbuttonWrapping.sol.orig
--- standalone-utils/contracts/relayer/UnbuttonWrapping.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/UnbuttonWrapping.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,102 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "@balancer-labs/v2-interfaces/contracts/pool-linear/IUnbuttonToken.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+import "./IBaseRelayerLibrary.sol";
+
+/**
+ * @title UnbuttonWrapping
+ * @author @aalavandhan1984 (eng@fragments.org)
+ * @notice Allows users to wrap and unwrap any rebasing elastic balance token into a
+ *         a non-rebasing static balance version using the Unbutton wrapper.
+ * @dev All functions must be payable so that it can be called as part of a multicall involving ETH.
+ *      The rebasing token to be wrapped is called the "underlying" token.
+ *      The wrapped non-rebasing token is called the "wrapped" token.
+ *      Learn more: https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/UnbuttonToken.sol
+ */
+abstract contract UnbuttonWrapping is IBaseRelayerLibrary {
+    using Address for address payable;
+    using SafeERC20 for IERC20;
+
+    /// @param wrapperToken The address of the wrapper.
+    /// @param sender The address of sender.
+    /// @param sender The address of recepient.
+    /// @param uAmount The underling token amount to be deposited into the wrapper.
+    /// @param outputReference Chained output reference.
+    function wrapUnbuttonToken(
+        IUnbuttonToken wrapperToken,
+        address sender,
+        address recipient,
+        uint256 uAmount,
+        uint256 outputReference
+    ) external payable {
+        if (_isChainedReference(uAmount)) {
+            uAmount = _getChainedReferenceValue(uAmount);
+        }
+
+        IERC20 underlyingToken = IERC20(wrapperToken.underlying());
+
+        // The wrap caller is the implicit sender of tokens, so if the goal is for the tokens
+        // to be sourced from outside the relayer, we must first pull them here.
+        if (sender != address(this)) {
+            require(sender == msg.sender, "Incorrect sender");
+            _pullToken(sender, underlyingToken, uAmount);
+        }
+
+        underlyingToken.safeApprove(address(wrapperToken), uAmount);
+        uint256 mintAmount = wrapperToken.depositFor(recipient, uAmount);
+
+        if (_isChainedReference(outputReference)) {
+            _setChainedReferenceValue(outputReference, mintAmount);
+        }
+    }
+
+    /// @param wrapperToken The address of the wrapper.
+    /// @param sender The address of sender.
+    /// @param sender The address of recepient.
+    /// @param amount The amount of wrapped tokens to be burnt for underlying tokens.
+    /// @param outputReference Chained output reference.
+    function unwrapUnbuttonToken(
+        IUnbuttonToken wrapperToken,
+        address sender,
+        address recipient,
+        uint256 amount,
+        uint256 outputReference
+    ) external payable {
+        if (_isChainedReference(amount)) {
+            amount = _getChainedReferenceValue(amount);
+        }
+
+        // The wrap caller is the implicit sender of tokens, so if the goal is for the tokens
+        // to be sourced from outside the relayer, we must first them pull them here.
+        if (sender != address(this)) {
+            require(sender == msg.sender, "Incorrect sender");
+            _pullToken(sender, wrapperToken, amount);
+        }
+
+        uint256 withdrawnUAmount = wrapperToken.burnTo(recipient, amount);
+
+        if (_isChainedReference(outputReference)) {
+            _setChainedReferenceValue(outputReference, withdrawnUAmount);
+        }
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/UnbuttonWrapping.sol.rej standalone-utils/contracts/relayer/UnbuttonWrapping.sol.rej
--- standalone-utils/contracts/relayer/UnbuttonWrapping.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/UnbuttonWrapping.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,23 @@
+***************
+*** 15,24 ****
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
+- import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+- import "@balancer-labs/v2-interfaces/contracts/pool-linear/IUnbuttonToken.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  
+--- 15,24 ----
+  pragma solidity ^0.7.0;
+  pragma experimental ABIEncoderV2;
+  
++ import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
++ import "../../interfaces/contracts/pool-linear/IUnbuttonToken.sol";
+  
++ import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+  
+  import "./IBaseRelayerLibrary.sol";
+  
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/VaultActions.sol standalone-utils/contracts/relayer/VaultActions.sol
--- standalone-utils/contracts/relayer/VaultActions.sol	2022-10-28 09:21:26.000000000 +0200
+++ standalone-utils/contracts/relayer/VaultActions.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/VaultHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/VaultHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/VaultPermit.sol standalone-utils/contracts/relayer/VaultPermit.sol
--- standalone-utils/contracts/relayer/VaultPermit.sol	2022-10-03 09:35:45.000000000 +0200
+++ standalone-utils/contracts/relayer/VaultPermit.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20PermitDAI.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20PermitDAI.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol
--- standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol	2022-10-28 09:21:26.000000000 +0200
+++ standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol";
+import "../../interfaces/contracts/pool-stable/StablePoolUserData.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IFlashLoanRecipient.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 /**
  * @title DoubleEntrypointFixRelayer
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol.orig standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol.orig
--- standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,181 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol";
+import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+/**
+ * @title DoubleEntrypointFixRelayer
+ * @notice This contract performs mitigations to safeguard funds affected by double-entrypoint tokens (mostly Synthetix
+ * tokens). It doesn't use the standard relayer architecture to simplify the code.
+ */
+contract DoubleEntrypointFixRelayer is IFlashLoanRecipient {
+    using SafeERC20 for IERC20;
+
+    // solhint-disable const-name-snakecase
+    IERC20 public constant BTC_STABLE_POOL_ADDRESS = IERC20(0xFeadd389a5c427952D8fdb8057D6C8ba1156cC56);
+    bytes32 public constant BTC_STABLE_POOL_ID = 0xfeadd389a5c427952d8fdb8057d6c8ba1156cc56000000000000000000000066;
+
+    // solhint-disable const-name-snakecase
+    IERC20 public constant wBTC = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);
+    IERC20 public constant renBTC = IERC20(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);
+    IERC20 public constant sBTC = IERC20(0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6);
+    IERC20 public constant sBTC_IMPLEMENTATION = IERC20(0x18FcC34bdEaaF9E3b69D2500343527c0c995b1d6);
+
+    IERC20 public constant SNX_WEIGHTED_POOL_ADDRESS = IERC20(0x072f14B85ADd63488DDaD88f855Fda4A99d6aC9B);
+    bytes32 public constant SNX_WEIGHTED_POOL_ID = 0x072f14b85add63488ddad88f855fda4a99d6ac9b000200000000000000000027;
+    IERC20 public constant SNX = IERC20(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F);
+    IERC20 public constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
+    IERC20 public constant SNX_IMPLEMENTATION = IERC20(0x639032d3900875a4cf4960aD6b9ee441657aA93C);
+    // solhint-enable const-name-snakecase
+
+    // This was removed from the StablePoolEncoder along with StablePool.
+    uint256 private constant _STABLE_POOL_EXIT_KIND_EXACT_BPT_IN_FOR_TOKENS_OUT = 1;
+
+    IVault private immutable _vault;
+    IProtocolFeesCollector private immutable _protocolFeeCollector;
+
+    constructor(IVault vault) {
+        _vault = vault;
+        _protocolFeeCollector = vault.getProtocolFeesCollector();
+    }
+
+    function getVault() public view returns (IVault) {
+        return _vault;
+    }
+
+    /**
+     * @notice Fully exit the BTC Stable Pool into its three components (wBTC, renBTC and sBTC), with no price impact
+     * nor swap fees. This relayer must have been previously approved by the caller, and proper permissions granted by
+     * Balancer Governance.
+     */
+    function exitBTCStablePool() external {
+        IERC20[] memory tokens = new IERC20[](3);
+        tokens[0] = wBTC;
+        tokens[1] = renBTC;
+        tokens[2] = sBTC;
+        uint256 bptAmountIn = BTC_STABLE_POOL_ADDRESS.balanceOf(msg.sender);
+
+        // Pull sBTC out from the Protocol Fee Collector and send it to the Vault ready for the exit. Computing the
+        // exact amount of sBTC required is a complicated task, as it involves due protocol fees, so we simply send all
+        // of it.
+        _withdrawFromProtocolFeeCollector(sBTC, sBTC.balanceOf(address(_protocolFeeCollector)));
+
+        // Perform the exit.
+        bytes memory userData = abi.encode(_STABLE_POOL_EXIT_KIND_EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn);
+        IVault.ExitPoolRequest memory request = IVault.ExitPoolRequest(
+            _asIAsset(tokens),
+            new uint256[](tokens.length),
+            userData,
+            false
+        );
+        getVault().exitPool(BTC_STABLE_POOL_ID, msg.sender, msg.sender, request);
+
+        // Sweep any remaining sBTC back into the Protocol Fee Collector.
+        IERC20[] memory sBTCEntrypoints = new IERC20[](2);
+        sBTCEntrypoints[0] = sBTC_IMPLEMENTATION;
+        sBTCEntrypoints[1] = IERC20(address(sBTC));
+        sweepDoubleEntrypointToken(sBTCEntrypoints);
+    }
+
+    /**
+     * @notice Fully exit the SNX Weighted Pool into its two components (SNX and WETH), with no price impact nor swap
+     * fees. This relayer must have been previously approved by the caller, and proper permissions granted by
+     * Balancer Governance.
+     */
+    function exitSNXWeightedPool() external {
+        IERC20[] memory tokens = new IERC20[](2);
+        tokens[0] = SNX;
+        tokens[1] = WETH;
+        uint256 bptAmountIn = SNX_WEIGHTED_POOL_ADDRESS.balanceOf(msg.sender);
+
+        // Pull SNX out from the Protocol Fee Collector and send it to the Vault ready for the exit. Computing the
+        // exact amount of SNX required is a complicated task, as it involves due protocol fees, so we simply send all
+        // of it.
+        _withdrawFromProtocolFeeCollector(SNX, SNX.balanceOf(address(_protocolFeeCollector)));
+
+        // Perform the exit.
+        bytes memory userData = abi.encode(WeightedPoolUserData.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn);
+        IVault.ExitPoolRequest memory request = IVault.ExitPoolRequest(
+            _asIAsset(tokens),
+            new uint256[](tokens.length),
+            userData,
+            false
+        );
+        getVault().exitPool(SNX_WEIGHTED_POOL_ID, msg.sender, msg.sender, request);
+
+        // Sweep any remaining SNX back into the Protocol Fee Collector.
+        IERC20[] memory snxEntrypoints = new IERC20[](2);
+        snxEntrypoints[0] = SNX_IMPLEMENTATION;
+        snxEntrypoints[1] = IERC20(address(SNX));
+        sweepDoubleEntrypointToken(snxEntrypoints);
+    }
+
+    function _withdrawFromProtocolFeeCollector(IERC20 token, uint256 amount) internal {
+        IERC20[] memory tokens = new IERC20[](1);
+        tokens[0] = token;
+        uint256[] memory amounts = new uint256[](1);
+        amounts[0] = amount;
+
+        _protocolFeeCollector.withdrawCollectedFees(tokens, amounts, address(_vault));
+    }
+
+    /**
+     * @notice Sweep all SNX and sBTC from the Vault into the Protocol Fee Collector.
+     */
+    function sweepSNXsBTC() public {
+        IERC20[] memory snxEntrypoints = new IERC20[](2);
+        snxEntrypoints[0] = SNX_IMPLEMENTATION;
+        snxEntrypoints[1] = IERC20(address(SNX));
+
+        sweepDoubleEntrypointToken(snxEntrypoints);
+
+        IERC20[] memory sBTCEntrypoints = new IERC20[](2);
+        sBTCEntrypoints[0] = sBTC_IMPLEMENTATION;
+        sBTCEntrypoints[1] = IERC20(address(sBTC));
+        sweepDoubleEntrypointToken(sBTCEntrypoints);
+    }
+
+    /**
+     * @notice Sweep a double-entrypoint token into the Protocol Fee Collector by passing all entrypoints of a given
+     * token.
+     */
+    function sweepDoubleEntrypointToken(IERC20[] memory tokens) public {
+        uint256[] memory amounts = new uint256[](tokens.length);
+        amounts[0] = tokens[0].balanceOf(address(_vault));
+        _vault.flashLoan(this, tokens, amounts, "0x");
+    }
+
+    /**
+     * @dev Flash loan callback. Assumes that it receives a flashloan of multiple assets (all entrypoints of a Synthetix
+     * synth). We only need to repay the first loan as that will automatically all other loans.
+     */
+    function receiveFlashLoan(
+        IERC20[] memory tokens,
+        uint256[] memory amounts,
+        uint256[] memory,
+        bytes memory
+    ) external override {
+        _require(msg.sender == address(_vault), Errors.CALLER_NOT_VAULT);
+        tokens[0].safeTransfer(address(_vault), amounts[0]);
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/test/MockBaseRelayerLibrary.sol standalone-utils/contracts/test/MockBaseRelayerLibrary.sol
--- standalone-utils/contracts/test/MockBaseRelayerLibrary.sol	2022-10-28 09:21:26.000000000 +0200
+++ standalone-utils/contracts/test/MockBaseRelayerLibrary.sol	2022-10-29 16:41:16.000000000 +0200
@@ -17,7 +17,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-//import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBaseRelayerLibrary.sol";
+//import "../../interfaces/contracts/standalone-utils/IBaseRelayerLibrary.sol";
 
 import "../relayer/BaseRelayerLibrary.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/test/MockBaseRelayerLibrary.sol.orig standalone-utils/contracts/test/MockBaseRelayerLibrary.sol.orig
--- standalone-utils/contracts/test/MockBaseRelayerLibrary.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/test/MockBaseRelayerLibrary.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,44 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// Copyright (C) 2015, 2016, 2017 Dapphub
+
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+//import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBaseRelayerLibrary.sol";
+
+import "../relayer/BaseRelayerLibrary.sol";
+
+contract MockBaseRelayerLibrary is BaseRelayerLibrary {
+    event ChainedReferenceValueRead(uint256 value);
+
+    constructor(IVault vault) BaseRelayerLibrary(vault) {}
+
+    function isChainedReference(uint256 amount) public pure returns (bool) {
+        return _isChainedReference(amount);
+    }
+
+    function setChainedReferenceValue(uint256 ref, uint256 value) public {
+        _setChainedReferenceValue(ref, value);
+    }
+
+    function getChainedReferenceValue(uint256 ref) public {
+        emit ChainedReferenceValueRead(_getChainedReferenceValue(ref));
+    }
+
+    function bytesTunnel(bytes memory input) public pure returns (bytes memory) {
+        return input;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/test/MockStETH.sol standalone-utils/contracts/test/MockStETH.sol
--- standalone-utils/contracts/test/MockStETH.sol	2022-10-03 09:35:45.000000000 +0200
+++ standalone-utils/contracts/test/MockStETH.sol	2022-10-29 16:41:16.000000000 +0200
@@ -16,10 +16,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IstETH.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
 
 contract MockStETH is TestToken, IstETH {
     constructor(
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/test/MockWstETH.sol.orig standalone-utils/contracts/test/MockWstETH.sol.orig
--- standalone-utils/contracts/test/MockWstETH.sol.orig	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/test/MockWstETH.sol.orig	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,71 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// Copyright (C) 2015, 2016, 2017 Dapphub
+
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+
+contract MockWstETH is ERC20, IwstETH {
+    using FixedPoint for uint256;
+    using SafeERC20 for IERC20;
+
+    IstETH public override stETH;
+    uint256 public rate = 1.5e18;
+
+    constructor(IstETH token) ERC20("Wrapped Staked Ether", "wstETH") {
+        stETH = token;
+    }
+
+    function wrap(uint256 _stETHAmount) external override returns (uint256) {
+        IERC20(stETH).safeTransferFrom(msg.sender, address(this), _stETHAmount);
+        uint256 wstETHAmount = getWstETHByStETH(_stETHAmount);
+        _mint(msg.sender, wstETHAmount);
+        return wstETHAmount;
+    }
+
+    function unwrap(uint256 _wstETHAmount) external override returns (uint256) {
+        _burn(msg.sender, _wstETHAmount);
+        uint256 stETHAmount = getStETHByWstETH(_wstETHAmount);
+        IERC20(stETH).safeTransfer(msg.sender, stETHAmount);
+        return stETHAmount;
+    }
+
+    receive() external payable {
+        stETH.submit{ value: msg.value }(address(this));
+        _mint(msg.sender, getWstETHByStETH(msg.value));
+    }
+
+    function getWstETHByStETH(uint256 _stETHAmount) public view override returns (uint256) {
+        return _stETHAmount.divDown(rate);
+    }
+
+    function getStETHByWstETH(uint256 _wstETHAmount) public view override returns (uint256) {
+        return _wstETHAmount.mulDown(rate);
+    }
+
+    function stEthPerToken() external view override returns (uint256) {
+        return getStETHByWstETH(1 ether);
+    }
+
+    function tokensPerStEth() external view override returns (uint256) {
+        return getWstETHByStETH(1 ether);
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/test/MockWstETH.sol.rej standalone-utils/contracts/test/MockWstETH.sol.rej
--- standalone-utils/contracts/test/MockWstETH.sol.rej	1970-01-01 01:00:00.000000000 +0100
+++ standalone-utils/contracts/test/MockWstETH.sol.rej	2022-10-29 16:41:16.000000000 +0200
@@ -0,0 +1,25 @@
+***************
+*** 16,26 ****
+  
+  pragma solidity ^0.7.0;
+  
+- import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
+- import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol";
+  
+- import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+- import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
+  
+  contract MockWstETH is ERC20, IwstETH {
+      using FixedPoint for uint256;
+--- 16,26 ----
+  
+  pragma solidity ^0.7.0;
+  
++ import "../../interfaces/contracts/standalone-utils/IstETH.sol";
++ import "../../interfaces/contracts/standalone-utils/IwstETH.sol";
+  
++ import "../../solidity-utils/contracts/math/FixedPoint.sol";
++ import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+  
+  contract MockWstETH is ERC20, IwstETH {
+      using FixedPoint for uint256;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/test/TestWETH.sol standalone-utils/contracts/test/TestWETH.sol
--- standalone-utils/contracts/test/TestWETH.sol	2022-10-03 09:35:45.000000000 +0200
+++ standalone-utils/contracts/test/TestWETH.sol	2022-10-29 16:41:16.000000000 +0200
@@ -16,7 +16,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
 
 contract TestWETH is IWETH {
     string public name = "Wrapped Ether";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/test/ProtocolFeeSplitter.test.ts standalone-utils/test/ProtocolFeeSplitter.test.ts
--- standalone-utils/test/ProtocolFeeSplitter.test.ts	2022-10-29 16:38:40.000000000 +0200
+++ standalone-utils/test/ProtocolFeeSplitter.test.ts	2022-10-29 16:41:16.000000000 +0200
@@ -1,63 +1,75 @@
 import { ethers } from 'hardhat';
 import { expect } from 'chai';
-import { BigNumber, Contract } from 'ethers';
+import { Contract } from 'ethers';
 import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/dist/src/signer-with-address';
 import TokenList from '@balancer-labs/v2-helpers/src/models/tokens/TokenList';
-import { deploy } from '@balancer-labs/v2-helpers/src/contract';
+import { deploy, deployedAt } from '@balancer-labs/v2-helpers/src/contract';
 import { actionId } from '@balancer-labs/v2-helpers/src/models/misc/actions';
 import Vault from '@balancer-labs/v2-helpers/src/models/vault/Vault';
 import * as expectEvent from '@balancer-labs/v2-helpers/src/test/expectEvent';
-import { fp, FP_ONE } from '@balancer-labs/v2-helpers/src/numbers';
+import { toNormalizedWeights } from '@balancer-labs/balancer-js/src';
+import { fp } from '@balancer-labs/v2-helpers/src/numbers';
+import { ZERO_ADDRESS } from '@balancer-labs/v2-helpers/src/constants';
 import { bn } from '../../../pvt/helpers/src/numbers';
-import { WeightedPoolEncoder } from '@balancer-labs/balancer-js';
+import { JoinPoolRequest, WeightedPoolEncoder } from '@balancer-labs/balancer-js';
 import { expectEqualWithError } from '@balancer-labs/v2-helpers/src/test/relativeError';
 import { sharedBeforeEach } from '@balancer-labs/v2-common/sharedBeforeEach';
-import WeightedPool from '@balancer-labs/v2-helpers/src/models/pools/weighted/WeightedPool';
+
+const NAME = 'Balancer Pool Token';
+const SYMBOL = 'BPT';
+const POOL_SWAP_FEE_PERCENTAGE = fp(0.01);
+const WEIGHTS = toNormalizedWeights([fp(30), fp(70), fp(5), fp(5)]);
 
 describe('ProtocolFeeSplitter', function () {
   let vault: Vault;
-
+  let factory: Contract;
+  let protocolFeesCollector: Contract;
   let protocolFeeSplitter: Contract;
   let protocolFeesWithdrawer: Contract;
-
+  let pool: Contract;
   let admin: SignerWithAddress,
-    owner: SignerWithAddress,
+    poolOwner: SignerWithAddress,
     treasury: SignerWithAddress,
     newTreasury: SignerWithAddress,
     liquidityProvider: SignerWithAddress,
-    other: SignerWithAddress;
-
+    randomSigner: SignerWithAddress;
+  let assetManagers: string[];
   let tokens: TokenList;
-
-  let pool: WeightedPool;
   let poolId: string;
 
   before(async () => {
-    [, admin, owner, liquidityProvider, treasury, newTreasury, other] = await ethers.getSigners();
+    [, admin, poolOwner, liquidityProvider, treasury, newTreasury, randomSigner] = await ethers.getSigners();
   });
 
   sharedBeforeEach('deploy vault, protocol fees collector & tokens', async () => {
     vault = await Vault.create({ admin });
+    protocolFeesCollector = await vault.getFeesCollector();
     tokens = await TokenList.create(['DAI', 'MKR', 'SNX', 'BAT'], { sorted: true });
 
     await tokens.mint({ to: liquidityProvider, amount: fp(100000) });
     await tokens.approve({ from: liquidityProvider, to: vault });
   });
 
-  sharedBeforeEach('create and initialize pools', async () => {
-    pool = await WeightedPool.create({ vault, tokens, owner });
+  sharedBeforeEach('deploy tokens, pools & gives initial liquidity', async () => {
+    factory = await deploy('v2-pool-weighted/WeightedPoolFactory', {
+      args: [vault.address, vault.getFeesProvider().address],
+    });
+    assetManagers = Array(tokens.length).fill(ZERO_ADDRESS);
+    pool = await createPool(poolOwner.address);
     poolId = await pool.getPoolId();
 
     const initialBalances = Array(tokens.length).fill(fp(1000));
 
+    const request: JoinPoolRequest = {
+      assets: tokens.addresses,
+      maxAmountsIn: initialBalances,
+      userData: WeightedPoolEncoder.joinInit(initialBalances),
+      fromInternalBalance: false,
+    };
+
     await vault.instance
       .connect(liquidityProvider)
-      .joinPool(poolId, liquidityProvider.address, liquidityProvider.address, {
-        assets: tokens.addresses,
-        maxAmountsIn: initialBalances,
-        userData: WeightedPoolEncoder.joinInit(initialBalances),
-        fromInternalBalance: false,
-      });
+      .joinPool(poolId, liquidityProvider.address, liquidityProvider.address, request);
   });
 
   sharedBeforeEach('deploy ProtocolFeeSplitter, ProtocolFeesWithdrawer & grant permissions', async () => {
@@ -79,7 +91,7 @@
     await vault.grantPermissionsGlobally([setDefaultRevenueSharingFeePercentageRole], admin);
 
     // Allow withdrawer to pull from collector
-    const withdrawCollectedFeesRole = await actionId(await vault.getFeesCollector(), 'withdrawCollectedFees');
+    const withdrawCollectedFeesRole = await actionId(protocolFeesCollector, 'withdrawCollectedFees');
     await vault.grantPermissionsGlobally([withdrawCollectedFeesRole], protocolFeesWithdrawer);
 
     // Allow fee splitter to pull from withdrawer
@@ -90,48 +102,55 @@
     await vault.grantPermissionsGlobally([setTreasuryRole], admin);
   });
 
+  async function createPool(poolOwnerAddress: string): Promise<Contract> {
+    const receipt = await (
+      await factory.create(
+        NAME,
+        SYMBOL,
+        tokens.addresses,
+        WEIGHTS,
+        assetManagers,
+        POOL_SWAP_FEE_PERCENTAGE,
+        poolOwnerAddress
+      )
+    ).wait();
+
+    const event = expectEvent.inReceipt(receipt, 'PoolCreated');
+    return deployedAt('v2-pool-weighted/WeightedPool', event.args.pool);
+  }
+
   describe('constructor', () => {
     it('sets the protocolFeesWithdrawer', async () => {
       expect(await protocolFeeSplitter.getProtocolFeesWithdrawer()).to.be.eq(protocolFeesWithdrawer.address);
     });
-
     it('sets the treasury', async () => {
       expect(await protocolFeeSplitter.getTreasury()).to.be.eq(treasury.address);
     });
   });
 
-  describe('setTreasury', async () => {
+  describe('treasury', async () => {
     it('changes the treasury', async () => {
-      await protocolFeeSplitter.connect(admin).setTreasury(newTreasury.address);
-      expect(await protocolFeeSplitter.getTreasury()).to.eq(newTreasury.address);
-    });
-
-    it('emits a TreasuryChanged event', async () => {
       const receipt = await (await protocolFeeSplitter.connect(admin).setTreasury(newTreasury.address)).wait();
       expectEvent.inReceipt(receipt, 'TreasuryChanged', { newTreasury: newTreasury.address });
+      expect(await protocolFeeSplitter.getTreasury()).to.eq(newTreasury.address);
     });
 
     it('reverts if caller is unauthorized', async () => {
-      await expect(protocolFeeSplitter.connect(other).setTreasury(newTreasury.address)).to.be.revertedWith(
+      await expect(protocolFeeSplitter.connect(randomSigner).setTreasury(newTreasury.address)).to.be.revertedWith(
         'SENDER_NOT_ALLOWED'
       );
     });
   });
 
-  describe('setDefaultRevenueSharingFeePercentage', async () => {
+  describe('default revenue sharing fee', async () => {
     it('sets default fee', async () => {
-      const newFee = bn(10e16); // 10%
-      await protocolFeeSplitter.connect(admin).setDefaultRevenueSharingFeePercentage(newFee);
-
-      expect(await protocolFeeSplitter.getDefaultRevenueSharingFeePercentage()).to.be.eq(newFee);
-    });
-
-    it('emits a DefaultRevenueSharingFeePercentageChanged event', async () => {
+      expect(await protocolFeeSplitter.getDefaultRevenueSharingFeePercentage()).to.be.eq(0);
       const newFee = bn(10e16); // 10%
       const receipt = await (
         await protocolFeeSplitter.connect(admin).setDefaultRevenueSharingFeePercentage(newFee)
       ).wait();
       expectEvent.inReceipt(receipt, 'DefaultRevenueSharingFeePercentageChanged', { revenueSharePercentage: newFee });
+      expect(await protocolFeeSplitter.getDefaultRevenueSharingFeePercentage()).to.be.eq(newFee);
     });
 
     it('reverts if caller is not authorized', async () => {
@@ -142,26 +161,19 @@
     });
   });
 
-  describe('setRevenueSharingFeePercentage', async () => {
+  describe('revenue sharing override', async () => {
     it('overrides revenue sharing percentage for a pool', async () => {
       const newFee = bn(50e16); // 50%
-
-      await protocolFeeSplitter.connect(admin).setRevenueSharingFeePercentage(poolId, newFee);
-
-      const poolSettings = await protocolFeeSplitter.getPoolSettings(poolId);
-      expect(poolSettings.revenueSharePercentageOverride).to.be.eq(newFee);
-    });
-
-    it('emits a PoolRevenueShareChanged event', async () => {
-      const newFee = bn(50e16); // 50%
       const receipt = await (
         await protocolFeeSplitter.connect(admin).setRevenueSharingFeePercentage(poolId, newFee)
       ).wait();
-      expectEvent.inReceipt(receipt, 'PoolRevenueShareChanged', { poolId, revenueSharePercentage: newFee });
+      expectEvent.inReceipt(receipt, 'PoolRevenueShareChanged', { poolId: poolId, revenueSharePercentage: newFee });
+      const poolSettings = await protocolFeeSplitter.getPoolSettings(poolId);
+      expect(poolSettings.revenueSharePercentageOverride).to.be.eq(newFee);
     });
 
     it('reverts with invalid input', async () => {
-      const newFee = bn(50e16).add(1);
+      const newFee = bn(100e16); // 100%
       await expect(
         protocolFeeSplitter.connect(admin).setRevenueSharingFeePercentage(poolId, newFee)
       ).to.be.revertedWith('SPLITTER_FEE_PERCENTAGE_TOO_HIGH');
@@ -170,12 +182,12 @@
     it('reverts if caller is not authorized', async () => {
       const newFee = bn(10e16); // 10%
       await expect(
-        protocolFeeSplitter.connect(other).setRevenueSharingFeePercentage(poolId, newFee)
+        protocolFeeSplitter.connect(randomSigner).setRevenueSharingFeePercentage(poolId, newFee)
       ).to.be.revertedWith('SENDER_NOT_ALLOWED');
     });
   });
 
-  describe('setPoolBeneficiary', async () => {
+  describe('pool beneficiary', async () => {
     it('reverts if caller is not the pool owner', async () => {
       await expect(
         protocolFeeSplitter.connect(liquidityProvider).setPoolBeneficiary(poolId, liquidityProvider.address)
@@ -183,29 +195,25 @@
     });
 
     it('sets pool beneficiary', async () => {
-      await protocolFeeSplitter.connect(owner).setPoolBeneficiary(poolId, other.address);
-      const poolSettings = await protocolFeeSplitter.getPoolSettings(poolId);
-      expect(poolSettings.beneficiary).to.be.eq(other.address);
-    });
-
-    it('emits a PoolBeneficiaryChanged event', async () => {
-      const receipt = await (await protocolFeeSplitter.connect(owner).setPoolBeneficiary(poolId, other.address)).wait();
+      const receipt = await (
+        await protocolFeeSplitter.connect(poolOwner).setPoolBeneficiary(poolId, randomSigner.address)
+      ).wait();
       expectEvent.inReceipt(receipt, 'PoolBeneficiaryChanged', {
-        poolId,
-        newBeneficiary: other.address,
+        poolId: poolId,
+        newBeneficiary: randomSigner.address,
       });
+      const poolSettings = await protocolFeeSplitter.getPoolSettings(poolId);
+      expect(poolSettings.beneficiary).to.be.eq(randomSigner.address);
     });
   });
 
   context('when the fee collector holds BPT', async () => {
-    let bptBalanceOfLiquidityProvider: BigNumber;
+    let bptBalanceOfLiquidityProvider: number;
 
     sharedBeforeEach('transfers BPT to fees collector', async () => {
       // transfer BPT tokens to feesCollector
       bptBalanceOfLiquidityProvider = await pool.balanceOf(liquidityProvider.address);
-      await pool.instance
-        .connect(liquidityProvider)
-        .transfer((await vault.getFeesCollector()).address, bptBalanceOfLiquidityProvider);
+      await pool.connect(liquidityProvider).transfer(protocolFeesCollector.address, bptBalanceOfLiquidityProvider);
     });
 
     describe('collect fees', async () => {
@@ -219,8 +227,9 @@
 
     context('fee percentage defined', async () => {
       sharedBeforeEach('sets pool beneficiary & fee percentage', async () => {
-        await protocolFeeSplitter.connect(owner).setPoolBeneficiary(poolId, owner.address);
-        await protocolFeeSplitter.connect(admin).setRevenueSharingFeePercentage(poolId, fp(0.1));
+        await protocolFeeSplitter.connect(poolOwner).setPoolBeneficiary(poolId, poolOwner.address);
+
+        await protocolFeeSplitter.connect(admin).setRevenueSharingFeePercentage(poolId, bn(10e16)); // 10%
       });
 
       describe('get amounts', async () => {
@@ -228,11 +237,11 @@
           const amounts = await protocolFeeSplitter.getAmounts(poolId);
 
           // 10% of bptBalanceOfLiquidityProvider should go to owner
-          const ownerExpectedBalance = bptBalanceOfLiquidityProvider.mul(fp(0.1)).div(FP_ONE);
-          // The rest goes to the treasury
-          const treasuryExpectedBalance = bptBalanceOfLiquidityProvider.sub(ownerExpectedBalance);
+          const poolOwnerExpectedBalance = bptBalanceOfLiquidityProvider.mul(bn(10e16)).div(bn(1e18));
+          // 90% goes to treasury
+          const treasuryExpectedBalance = bptBalanceOfLiquidityProvider.mul(bn(90e16)).div(bn(1e18));
 
-          expectEqualWithError(amounts.beneficiaryAmount, ownerExpectedBalance);
+          expectEqualWithError(amounts.beneficiaryAmount, poolOwnerExpectedBalance);
           expectEqualWithError(amounts.treasuryAmount, treasuryExpectedBalance);
         });
       });
@@ -241,14 +250,14 @@
         await protocolFeeSplitter.collectFees(poolId);
 
         // 10% of bptBalanceOfLiquidityProvider should go to owner
-        const ownerExpectedBalance = bptBalanceOfLiquidityProvider.mul(fp(0.1)).div(FP_ONE);
-        // The rest goes to the treasury
-        const treasuryExpectedBalance = bptBalanceOfLiquidityProvider.sub(ownerExpectedBalance);
+        const poolOwnerExpectedBalance = bptBalanceOfLiquidityProvider.mul(bn(10e16)).div(bn(1e18));
+        // 90% goes to treasury
+        const treasuryExpectedBalance = bptBalanceOfLiquidityProvider.mul(bn(90e16)).div(bn(1e18));
 
-        const ownerBalance = await pool.balanceOf(owner.address);
+        const poolOwnerBalance = await pool.balanceOf(poolOwner.address);
         const treasuryBalance = await pool.balanceOf(treasury.address);
 
-        expectEqualWithError(ownerBalance, ownerExpectedBalance);
+        expectEqualWithError(poolOwnerBalance, poolOwnerExpectedBalance);
         expectEqualWithError(treasuryBalance, treasuryExpectedBalance);
       });
     });
@@ -257,11 +266,11 @@
       it('distributes collected BPT fees to owner and treasury (fee percentage not defined)', async () => {
         await protocolFeeSplitter.collectFees(poolId);
 
-        const ownerBalance = await pool.balanceOf(owner.address);
+        const poolOwnerBalance = await pool.balanceOf(poolOwner.address);
         const treasuryBalance = await pool.balanceOf(treasury.address);
 
         // pool owner should get 0, and treasury everything if fee is not defined
-        expectEqualWithError(ownerBalance, 0);
+        expectEqualWithError(poolOwnerBalance, 0);
         expectEqualWithError(treasuryBalance, bptBalanceOfLiquidityProvider);
       });
     });
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/AssetHelpers.sol vault/contracts/AssetHelpers.sol
--- vault/contracts/AssetHelpers.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/AssetHelpers.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAsset.sol";
 
 abstract contract AssetHelpers {
     // solhint-disable-next-line var-name-mixedcase
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/AssetManagers.sol vault/contracts/AssetManagers.sol
--- vault/contracts/AssetManagers.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/AssetManagers.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./UserBalance.sol";
 import "./balances/BalanceAllocation.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/AssetTransfersHandler.sol vault/contracts/AssetTransfersHandler.sol
--- vault/contracts/AssetTransfersHandler.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/AssetTransfersHandler.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAsset.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./AssetHelpers.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/Fees.sol vault/contracts/Fees.sol
--- vault/contracts/Fees.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/Fees.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "./ProtocolFeesCollector.sol";
 import "./VaultAuthorization.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/FlashLoans.sol vault/contracts/FlashLoans.sol
--- vault/contracts/FlashLoans.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/FlashLoans.sol	2022-10-29 16:41:16.000000000 +0200
@@ -19,12 +19,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IFlashLoanRecipient.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "./Fees.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/PoolBalances.sol vault/contracts/PoolBalances.sol
--- vault/contracts/PoolBalances.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/PoolBalances.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./Fees.sol";
 import "./PoolTokens.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/PoolRegistry.sol vault/contracts/PoolRegistry.sol
--- vault/contracts/PoolRegistry.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/PoolRegistry.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./VaultAuthorization.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/PoolTokens.sol vault/contracts/PoolTokens.sol
--- vault/contracts/PoolTokens.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/PoolTokens.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./AssetManagers.sol";
 import "./PoolRegistry.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/ProtocolFeesCollector.sol vault/contracts/ProtocolFeesCollector.sol
--- vault/contracts/ProtocolFeesCollector.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/ProtocolFeesCollector.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol";
+import "../../interfaces/contracts/vault/IProtocolFeesCollector.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 /**
  * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/Swaps.sol vault/contracts/Swaps.sol
--- vault/contracts/Swaps.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/Swaps.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,20 +15,20 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/vault/IPoolSwapStructs.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./PoolBalances.sol";
 import "./balances/BalanceAllocation.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/UserBalance.sol vault/contracts/UserBalance.sol
--- vault/contracts/UserBalance.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/UserBalance.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./AssetTransfersHandler.sol";
 import "./VaultAuthorization.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/Vault.sol vault/contracts/Vault.sol
--- vault/contracts/Vault.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/Vault.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
 import "./VaultAuthorization.sol";
 import "./FlashLoans.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/VaultAuthorization.sol vault/contracts/VaultAuthorization.sol
--- vault/contracts/VaultAuthorization.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/VaultAuthorization.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
+
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol";
+import "../../solidity-utils/contracts/helpers/TemporarilyPausable.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 /**
  * @dev Manages access control of Vault permissioned functions by relying on the Authorizer and signature validation.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/authorizer/TimelockAuthorizer.sol vault/contracts/authorizer/TimelockAuthorizer.sol
--- vault/contracts/authorizer/TimelockAuthorizer.sol	2022-10-28 09:21:26.000000000 +0200
+++ vault/contracts/authorizer/TimelockAuthorizer.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
+
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 import "./TimelockExecutor.sol";
 
 /**
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/authorizer/TimelockExecutor.sol vault/contracts/authorizer/TimelockExecutor.sol
--- vault/contracts/authorizer/TimelockExecutor.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/authorizer/TimelockExecutor.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./TimelockAuthorizer.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/balances/BalanceAllocation.sol vault/contracts/balances/BalanceAllocation.sol
--- vault/contracts/balances/BalanceAllocation.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/balances/BalanceAllocation.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // This library is used to create a data structure that represents a token's balance for a Pool. 'cash' is how many
 // tokens the Pool has sitting inside of the Vault. 'managed' is how many tokens were withdrawn from the Vault by the
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/balances/GeneralPoolsBalance.sol vault/contracts/balances/GeneralPoolsBalance.sol
--- vault/contracts/balances/GeneralPoolsBalance.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/balances/GeneralPoolsBalance.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
 
 import "./BalanceAllocation.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol
--- vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 import "./BalanceAllocation.sol";
 import "../PoolRegistry.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/balances/TwoTokenPoolsBalance.sol vault/contracts/balances/TwoTokenPoolsBalance.sol
--- vault/contracts/balances/TwoTokenPoolsBalance.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/balances/TwoTokenPoolsBalance.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "./BalanceAllocation.sol";
 import "../PoolRegistry.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/test/MockAssetTransfersHandler.sol vault/contracts/test/MockAssetTransfersHandler.sol
--- vault/contracts/test/MockAssetTransfersHandler.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/test/MockAssetTransfersHandler.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "../AssetTransfersHandler.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/test/MockAuthenticatedContract.sol vault/contracts/test/MockAuthenticatedContract.sol
--- vault/contracts/test/MockAuthenticatedContract.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/test/MockAuthenticatedContract.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 /*
  * @author Balancer Labs
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/test/MockBasicAuthorizer.sol vault/contracts/test/MockBasicAuthorizer.sol
--- vault/contracts/test/MockBasicAuthorizer.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/test/MockBasicAuthorizer.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasicAuthorizer.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/vault/IBasicAuthorizer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
 
 contract MockBasicAuthorizer is IBasicAuthorizer {
     using EnumerableSet for EnumerableSet.AddressSet;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/test/MockFlashLoanRecipient.sol vault/contracts/test/MockFlashLoanRecipient.sol
--- vault/contracts/test/MockFlashLoanRecipient.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/test/MockFlashLoanRecipient.sol	2022-10-29 16:41:16.000000000 +0200
@@ -14,13 +14,13 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IFlashLoanRecipient.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 contract MockFlashLoanRecipient is IFlashLoanRecipient {
     using Math for uint256;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/test/MockInternalBalanceRelayer.sol vault/contracts/test/MockInternalBalanceRelayer.sol
--- vault/contracts/test/MockInternalBalanceRelayer.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/test/MockInternalBalanceRelayer.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
 
 contract MockInternalBalanceRelayer {
     IVault public vault;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/test/MockPool.sol vault/contracts/test/MockPool.sol
--- vault/contracts/test/MockPool.sol	2022-10-03 09:35:45.000000000 +0200
+++ vault/contracts/test/MockPool.sol	2022-10-29 16:41:16.000000000 +0200
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 contract MockPool is IGeneralPool, IMinimalSwapInfoPool {
     using FixedPoint for uint256;
